


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             interrupts, CODE, READWRITE
    2 00000000                 EXPORT           lab7
    3 00000000                 EXPORT           FIQ_Handler
    4 00000000         
    5 00000000                 EXTERN           pin_connect_block_setup_for_uar
t0
    6 00000000                 EXTERN           uart_init
    7 00000000                 EXTERN           read_character
    8 00000000                 EXTERN           output_character
    9 00000000                 EXTERN           read_string
   10 00000000                 EXTERN           output_string
   11 00000000                 EXTERN           div_and_mod
   12 00000000                 EXTERN           illuminateLEDs
   13 00000000                 EXTERN           illuminate_RGB_LED
   14 00000000                 EXTERN           display_digit_on_7_seg
   15 00000000         
   16 00000000         
   31 00000000 20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 53 43 
              4F 52 45 
              20 30 30 
              30 0A 0A 
              0A 0D 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 5F 5F 
              5F 5F 5F 
              0A 0D 20 
              20 20 20 
              20 20 20 
              20 20 20 
              2F 2F 2F 
              2F 51 2F 
              7C 0A 0D 
              20 20 20 
              20 20 20 
              20 20 20 
              2F 5F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              0A 0D 20 
              20 20 20 
              20 20 20 
              20 20 7C 
              20 20 20 
              20 7C 20 
              2F 2F 2F 
              2F 2F 7C 



ARM Macro Assembler    Page 2 


              0A 0D 20 
              20 20 20 
              20 20 20 
              20 20 7C 
              5F 5F 5F 
              5F 7C 2F 
              5F 5F 5F 
              2F 20 7C 
              5F 5F 5F 
              5F 0A 0D 
              20 20 20 
              20 20 20 
              20 20 20 
              2F 2F 2F 
              2F 2F 7C 
              20 20 20 
              7C 20 2F 
              2F 2F 2F 
              2F 2F 7C 
              0A 0D 20 
              20 20 20 
              20 20 20 
              20 2F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 7C 
              2F 5F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              5F 0A 0D 
              20 20 20 
              20 20 20 
              20 20 7C 
              20 20 20 
              7C 20 2F 
              2F 2F 2F 
              2F 7C 20 
              20 20 20 
              7C 20 2F 
              2F 2F 2F 
              2F 2F 7C 
              0A 0D 20 
              20 20 20 
              20 20 20 
              20 7C 5F 
              5F 5F 7C 
              2F 5F 5F 
              5F 2F 20 
              7C 5F 5F 
              5F 5F 7C 
              2F 5F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              0A 0D 20 
              20 20 20 
              20 20 20 
              20 2F 2F 



ARM Macro Assembler    Page 3 


              2F 2F 2F 
              7C 20 20 
              20 7C 20 
              2F 2F 2F 
              2F 2F 2F 
              7C 20 20 
              20 20 7C 
              20 2F 2F 
              2F 2F 2F 
              7C 0A 0D 
              20 20 20 
              20 20 20 
              20 2F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 7C 
              2F 5F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              7C 2F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              0A 0D 20 
              20 20 20 
              20 20 20 
              7C 20 20 
              20 7C 20 
              2F 2F 2F 
              2F 2F 7C 
              20 20 20 
              20 7C 20 
              2F 2F 2F 
              2F 2F 2F 
              7C 20 20 
              20 7C 20 
              2F 2F 2F 
              2F 2F 7C 
              0A 0D 20 
              20 20 20 
              20 20 20 
              7C 5F 5F 
              5F 7C 2F 
              5F 5F 5F 
              2F 20 7C 
              5F 5F 5F 
              5F 7C 2F 
              5F 5F 5F 
              5F 2F 20 
              7C 5F 5F 
              5F 7C 2F 
              5F 5F 5F 
              2F 20 7C 
              0A 0D 20 
              20 20 20 
              20 20 2F 
              2F 2F 2F 
              2F 7C 20 



ARM Macro Assembler    Page 4 


              20 20 7C 
              20 2F 2F 
              2F 2F 2F 
              2F 7C 20 
              20 20 20 
              7C 20 2F 
              2F 2F 2F 
              2F 7C 20 
              20 20 20 
              7C 20 2F 
              0A 0D 20 
              20 20 20 
              20 2F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 7C 
              2F 5F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              7C 2F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              7C 2F 0A 
              0D 20 20 
              20 20 7C 
              20 20 20 
              20 7C 20 
              2F 2F 2F 
              2F 2F 7C 
              20 20 20 
              20 7C 2F 
              2F 2F 2F 
              2F 2F 7C 
              20 20 20 
              20 7C 20 
              2F 0A 0D 
              20 20 20 
              20 7C 5F 
              5F 5F 5F 
              7C 2F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              2F 5F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              7C 2F 0A 
              0D 20 20 
              20 2F 2F 
              2F 2F 2F 
              2F 7C 20 
              20 20 20 
              7C 20 2F 
              2F 2F 2F 
              2F 7C 20 
              20 20 20 



ARM Macro Assembler    Page 5 


              7C 20 2F 
              0A 0D 20 
              20 2F 5F 
              5F 5F 5F 
              2F 20 7C 
              5F 5F 5F 
              5F 7C 2F 
              5F 5F 5F 
              2F 20 7C 
              5F 5F 5F 
              5F 7C 2F 
              0A 0D 20 
              20 7C 20 
              20 20 20 
              7C 20 2F 
              2F 2F 2F 
              2F 7C 20 
              20 20 20 
              7C 20 2F 
              0A 0D 20 
              20 7C 5F 
              5F 5F 5F 
              7C 2F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              7C 2F 0A 
              0D 20 2F 
              2F 2F 2F 
              2F 2F 7C 
              20 20 20 
              20 7C 20 
              2F 0A 0D 
              2F 5F 5F 
              5F 5F 2F 
              20 7C 5F 
              5F 5F 5F 
              7C 2F 0A 
              0D 7C 20 
              20 20 20 
              7C 20 2F 
              0A 0D 7C 
              5F 5F 5F 
              5F 7C 2F 
              0A 0D 00 GAME_BOARD
                               =                "                              
 SCORE 000",10,10,10,13, "           _____",10,13,"          ////Q/|",10,13, 
"         /____/ |____",10,13,"         |    | /////|",10,13, "         |____|
/___/ |____",10,13,"         /////|   | //////|", 10,13,"        /___/ |___|/_
___/ |_____",10,13,"        |   | /////", "|    | //////|",10,13,"        |___
|/___/ |____|/____/ |____",10,13, "        /////|   | //////|    | /////|",10,
13,"       /___/ |___|/", "____/ |____|/___/ |____",10,13,"       |   | /////|
    | //////|", "   | /////|",10,13,"       |___|/___/ |____|/____/ |___|/___/
 |",10,13, "      /////|   | //////|    | /////|    | /",10,13,"     /___/ |__
_|/", "____/ |____|/___/ |____|/",10,13,"    |    | /////|    |//////|    | /"
, 10,13,"    |____|/___/ |____/____/ |____|/",10,13,"   //////|    | ///", "/
/|    | /",10,13,"  /____/ |____|/___/ |____|/",10,13,"  |    | /////", "|    
| /",10,13,"  |____|/___/ |____|/",10,13," //////|    | /",10,13, "/____/ |___
_|/",10,13,"|    | /",10,13,"|____|/",10,13,0



ARM Macro Assembler    Page 6 


   32 00000318         
   33 00000318         
   51 00000318 20 20 20 
              20 20 20 
              20 20 20 
              20 57 65 
              6C 63 6F 
              6D 65 20 
              74 6F 20 
              41 52 4D 
              20 51 42 
              45 52 54 
              0A 0A 0A 
              0D 49 6E 
              73 74 72 
              75 63 74 
              69 6F 6E 
              73 3A 0A 
              0D 51 62 
              65 72 74 
              20 69 73 
              20 72 65 
              70 72 65 
              73 65 6E 
              74 65 64 
              20 62 79 
              20 61 20 
              51 2C 20 
              62 61 6C 
              6C 73 20 
              61 72 65 
              20 72 65 
              70 72 65 
              73 65 6E 
              74 65 64 
              20 62 79 
              20 61 20 
              4F 2C 20 
              0A 0D 74 
              68 65 20 
              73 6E 61 
              6B 65 20 
              62 61 6C 
              6C 20 69 
              73 20 61 
              20 43 2C 
              20 61 6E 
              64 20 74 
              68 65 20 
              73 6E 61 
              6B 65 20 
              69 73 20 
              61 6E 20 
              53 2E 0A 
              0A 0D 55 
              73 65 20 
              74 68 65 
              20 77 2C 
              20 61 2C 



ARM Macro Assembler    Page 7 


              20 73 2C 
              20 64 20 
              6B 65 79 
              73 20 74 
              6F 20 6D 
              6F 76 65 
              20 75 70 
              2C 20 6C 
              65 66 74 
              2C 20 64 
              6F 77 6E 
              2C 20 61 
              6E 64 20 
              72 69 67 
              68 74 20 
              0A 0D 72 
              65 73 70 
              65 63 74 
              69 76 65 
              6C 79 2E 
              0A 0A 0D 
              51 62 65 
              72 74 20 
              73 74 61 
              72 74 73 
              20 74 68 
              65 20 67 
              61 6D 65 
              20 77 69 
              74 68 20 
              66 6F 75 
              72 20 6C 
              69 76 65 
              73 2E 20 
              47 65 74 
              74 69 6E 
              67 20 68 
              69 74 20 
              62 79 20 
              61 20 0A 
              0D 62 61 
              6C 6C 2C 
              20 6F 72 
              20 73 6E 
              61 6B 65 
              20 72 65 
              6D 6F 76 
              65 73 20 
              61 20 6C 
              69 66 65 
              2E 20 4A 
              75 6D 70 
              69 6E 67 
              20 6F 66 
              66 20 74 
              68 65 20 
              73 69 64 
              65 20 6F 
              66 20 74 



ARM Macro Assembler    Page 8 


              68 65 20 
              0A 0D 70 
              79 72 61 
              6D 69 64 
              20 61 6C 
              73 6F 20 
              63 6F 73 
              74 73 20 
              6F 6E 65 
              20 6F 6E 
              65 20 6C 
              69 66 65 
              2E 0A 0A 
              0D 55 6E 
              65 78 70 
              6C 6F 72 
              65 64 20 
              73 71 75 
              61 72 65 
              73 20 61 
              72 65 20 
              73 68 61 
              64 65 64 
              20 77 69 
              74 68 20 
              2F 2F 2F 
              2F 2E 20 
              45 78 70 
              6C 6F 72 
              65 20 61 
              6C 6C 20 
              73 71 75 
              61 72 65 
              73 0A 0D 
              74 6F 20 
              61 64 76 
              61 6E 63 
              65 20 74 
              6F 20 74 
              68 65 20 
              6E 65 78 
              74 20 6C 
              65 76 65 
              6C 2E 0A 
              0A 0D 54 
              68 65 20 
              67 61 6D 
              65 20 69 
              73 20 6F 
              76 65 72 
              20 61 66 
              74 65 72 
              20 32 20 
              6D 69 6E 
              75 74 65 
              73 2C 20 
              6F 72 20 
              61 6C 6C 
              20 66 6F 



ARM Macro Assembler    Page 9 


              75 72 20 
              6C 69 76 
              65 73 20 
              68 61 76 
              65 20 0A 
              0D 62 65 
              65 6E 20 
              6C 6F 73 
              74 2E 0A 
              0A 0D 50 
              72 65 73 
              73 20 74 
              68 65 20 
              73 70 61 
              63 65 20 
              62 61 72 
              20 61 74 
              20 61 6E 
              79 74 69 
              6D 65 20 
              74 6F 20 
              65 78 69 
              74 20 74 
              68 65 20 
              67 61 6D 
              65 2E 0A 
              0A 0D 50 
              72 65 73 
              73 20 74 
              68 65 20 
              41 52 4D 
              20 70 75 
              73 68 20 
              62 75 74 
              74 6F 6E 
              20 61 74 
              20 61 6E 
              79 74 69 
              6D 65 20 
              74 6F 20 
              70 61 75 
              73 65 20 
              74 68 65 
              20 67 61 
              6D 65 2E 
              0A 0D 4E 
              6F 20 69 
              6E 70 75 
              74 73 20 
              77 69 6C 
              6C 20 62 
              65 20 61 
              63 63 65 
              70 74 65 
              64 20 75 
              6E 74 69 
              6C 20 74 
              68 65 20 
              67 61 6D 



ARM Macro Assembler    Page 10 


              65 20 69 
              73 20 75 
              6E 70 61 
              75 73 65 
              64 20 62 
              79 20 0A 
              0D 70 75 
              73 68 69 
              6E 67 20 
              74 68 65 
              20 41 52 
              4D 20 70 
              75 73 68 
              20 62 75 
              74 74 6F 
              6E 20 61 
              67 61 69 
              6E 2E 0A 
              0A 0D 50 
              72 65 73 
              73 20 67 
              20 61 74 
              20 61 6E 
              79 74 69 
              6D 65 20 
              74 6F 20 
              73 74 61 
              72 74 20 
              61 20 6E 
              65 77 20 
              67 61 6D 
              65 2E 0A 
              0A 0D 50 
              72 65 73 
              73 20 67 
              20 6E 6F 
              77 20 74 
              6F 20 73 
              74 61 72 
              74 2E 2E 
              2E 0A 0D 
              00       INTRO   =                "          Welcome to ARM QBERT
",10,10,10,13,"Instructions:",10,13, "Qbert is represented by a Q, balls are r
epresented by a O, ",10,13, "the snake ball is a C, and the snake is an S.",10
,10,13, "Use the w, a, s, d keys to move up, left, down, and right ",10,13, "
respectively.",10,10,13, "Qbert starts the game with four lives. Getting hit b
y a ",10,13, "ball, or snake removes a life. Jumping off the side of the ",10,
13, "pyramid also costs one one life.",10,10,13, "Unexplored squares are shad
ed with ////. Explore all squares",10,13, "to advance to the next level.",10,1
0,13, "The game is over after 2 minutes, or all four lives have ",10,13, "bee
n lost.",10,10,13, "Press the space bar at anytime to exit the game.",10,10,13
, "Press the ARM push button at anytime to pause the game.",10,13, "No inputs
 will be accepted until the game is unpaused by ",10,13, "pushing the ARM push
 button again.",10,10,13, "Press g at anytime to start a new game.",10,10,13, 
"Press g now to start...",10,13,0
   52 00000652         
   55 00000652 20 20 20 
              20 20 20 
              20 20 20 



ARM Macro Assembler    Page 11 


              20 20 20 
              20 20 20 
              47 61 6D 
              65 20 4F 
              76 65 72 
              20 20 20 
              20 20 20 
              53 63 6F 
              72 65 3A 
              20 30 30 
              30 0A 0A 
              0A 0A 0D 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              50 72 65 
              73 73 20 
              67 20 74 
              6F 20 70 
              6C 61 79 
              20 61 67 
              61 69 6E 
              0A 0D 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 50 
              72 65 73 
              73 20 73 
              70 61 63 
              65 20 62 
              61 72 20 
              74 6F 20 
              65 78 69 
              74 00    GAME_OVER
                               =                "               Game Over      
Score: 000",10,10,10,10,13, "               Press g to play again",10,13, "  
             Press space bar to exit",0
   56 000006CC         
   57 000006CC 20 20 20 
              20 74 69 
              6D 65 72 
              20 31 20 
              20 20 0A 
              0D 00    TEST_TIMER1
                               =                "    timer 1   ",10,13,0
   58 000006DD         
   59 000006DD         
   60 000006DD 00 00 00        ALIGN
   61 000006E0 0000000F 
                       Q_X_POSITION
                               DCD              15          ; Starting x=15
   62 000006E4 00000005 
                       Q_Y_POSITION
                               DCD              5           ; Starting y=5
   63 000006E8 00000000 



ARM Macro Assembler    Page 12 


                       Q_DIRECTION
                               DCD              0           ;0=none, 1=up, 2=le
                                                            ft, 3=down, 4=right
                                                            
   64 000006EC 00000001 
                       Q_SQUARE
                               DCD              1
   65 000006F0 00000000 
                       BALL1_X_POSITION
                               DCD              0
   66 000006F4 00000000 
                       BALL1_Y_POSITION
                               DCD              0
   67 000006F8 00000000 
                       BALL1_DIRECTION
                               DCD              0
   68 000006FC 00000000 
                       BALL1_SQUARE
                               DCD              0
   69 00000700 00000000 
                       BALL2_X_POSITION
                               DCD              0
   70 00000704 00000000 
                       BALL2_Y_POSITION
                               DCD              0
   71 00000708 00000000 
                       BALL2_DIRECTION
                               DCD              0
   72 0000070C 00000000 
                       BALL2_SQUARE
                               DCD              0
   73 00000710 00000000 
                       SNAKEBALL_X_POSITION
                               DCD              0
   74 00000714 00000000 
                       SNAKEBALL_Y_POSITION
                               DCD              0
   75 00000718 00000000 
                       SNAKEBALL_DIRECTION
                               DCD              0
   76 0000071C 00000000 
                       SNAKEBALL_SQUARE
                               DCD              0
   77 00000720 00000000 
                       SNAKE_X_POSITION
                               DCD              0
   78 00000724 00000000 
                       SNAKE_Y_POSITION
                               DCD              0
   79 00000728 00000000 
                       SNAKE_DIRECTION
                               DCD              0
   80 0000072C 00000000 
                       SNAKE_SQUARE
                               DCD              0
   81 00000730 00000001 
                       LEVEL   DCD              1
   82 00000734 00000004 
                       LIVES   DCD              4



ARM Macro Assembler    Page 13 


   83 00000738         SQUARE
   84 00000738 00000000        DCD              0           ; 0
   85 0000073C 00000000        DCD              0           ; 1
   86 00000740 00000000        DCD              0           ; 2
   87 00000744 00000000        DCD              0           ; 3
   88 00000748 00000000        DCD              0           ; 4
   89 0000074C 00000000        DCD              0           ; 5
   90 00000750 00000000        DCD              0           ; 6
   91 00000754 00000000        DCD              0           ; 7
   92 00000758 00000000        DCD              0           ; 8
   93 0000075C 00000000        DCD              0           ; 9
   94 00000760 00000000        DCD              0           ; 10
   95 00000764 00000000        DCD              0           ; 11
   96 00000768 00000000        DCD              0           ; 12
   97 0000076C 00000000        DCD              0           ; 13
   98 00000770 00000000        DCD              0           ; 14
   99 00000774 00000000        DCD              0           ; 15
  100 00000778 00000000        DCD              0           ; 16
  101 0000077C 00000000        DCD              0           ; 17
  102 00000780 00000000        DCD              0           ; 18
  103 00000784 00000000        DCD              0           ; 29
  104 00000788 00000000        DCD              0           ; 20
  105 0000078C 00000000        DCD              0           ; 21
  106 00000790 00000000 
                       SCORE   DCD              0
  107 00000794 00000000 
                       BLINK   DCD              0
  108 00000798 00000001 
                       Q_MOVES DCD              1
  109 0000079C 00000000 
                       INC_TIMER_FLAG
                               DCD              0           ; 0=up to date, 1=n
                                                            eeds to be updated
  110 000007A0 00000000 
                       NUM_BALLS
                               DCD              0
  111 000007A4 00000000 
                       NUM_HALF_SECS
                               DCD              0
  112 000007A8 00000000 
                       IS_PAUSED
                               DCD              0           ; 0=running, 1=paus
                                                            ed 
  113 000007AC 00000000 
                       BALL1_FELL_OFF
                               DCD              0           ; Set if falls off
  114 000007B0 00000000 
                       BALL2_FELL_OFF
                               DCD              0           ; Set if falls off
  115 000007B4 00000000 
                       SNAKEBALL_FELL_OFF
                               DCD              0           ; Set if falls off
  116 000007B8 00000000 
                       IS_GAMEOVER_SCREEN
                               DCD              0           ; Set when at game 
                                                            over screen
  117 000007BC 00000000 
                       DISPLAY_CURSE
                               DCD              0



ARM Macro Assembler    Page 14 


  118 000007C0 00      Q_RECENTLY_HIT
                               =                0           ; Set when Q has be
                                                            en hit
  119 000007C1         
  120 000007C1 00 00 00        ALIGN
  121 000007C4         
  122 000007C4         lab7
  123 000007C4 E92D4000        STMFD            sp!, {lr}
  124 000007C8         ;;;;;; TODO hide cursor????
  125 000007C8 EBFFFFFE        BL               uart_init
  126 000007CC EBFFFFFE        BL               pin_connect_block_setup_for_uar
t0
  127 000007D0 EB0008B4        BL               interrupt_init
  128 000007D4         
  129 000007D4 E3A0200C        MOV              r2, #0x0C   ; ASCII 0x0C is for
                                                             new page
  130 000007D8 EBFFFFFE        BL               output_character ; Clear the sc
                                                            reen  
  131 000007DC         ; Seven-seg starts with a 0
  132 000007DC E3A04000        MOV              r4, #0
  133 000007E0 EBFFFFFE        BL               display_digit_on_7_seg
  134 000007E4         ; RGB LED starts as white
  135 000007E4 E3A04005        MOV              r4, #5
  136 000007E8 EBFFFFFE        BL               illuminate_RGB_LED ; Set RGB LC
                                                            D to white
  137 000007EC         ; Display intro/instructions
  138 000007EC E59F3728        LDR              r3, =INTRO
  139 000007F0 EBFFFFFE        BL               output_string
  140 000007F4         
  141 000007F4         ; Loop at intro screen until player starts a new game or
                        quits
  142 000007F4         endlessLoop
  143 000007F4 E2800000        ADD              r0, r0, #0  ; NOP
  144 000007F8 EAFFFFFD        B                endlessLoop
  145 000007FC         
  146 000007FC         newGame
  147 000007FC E92D423F        STMFD            SP!, {r0-r5, r9, lr} 
                                                            ; Save registers
  148 00000800 E3A0200C        MOV              r2, #0x0C   ; ASCII 0x0C is for
                                                             new page
  149 00000804 EBFFFFFE        BL               output_character 
                                                            ; Clear the screen
  150 00000808         
  151 00000808         ; is no longer at the game over screen
  152 00000808 E59F0710        LDR              r0, =IS_GAMEOVER_SCREEN 
                                                            ; clear variable
  153 0000080C E3A01000        MOV              r1, #0
  154 00000810 E5C01000        STRB             r1, [r0]
  155 00000814         
  156 00000814         ; set ball 1 and 2, snakeball and snake to no square
  157 00000814 E59F0708        LDR              r0, =BALL1_SQUARE
  158 00000818 E3A01000        MOV              r1, #0
  159 0000081C E5801000        STR              r1, [r0]
  160 00000820         ; set ball2 to no square
  161 00000820 E59F0700        LDR              r0, =BALL2_SQUARE
  162 00000824 E5801000        STR              r1, [r0]
  163 00000828         ; set snakeball to no square
  164 00000828 E59F06FC        LDR              r0, =SNAKEBALL_SQUARE
  165 0000082C E5801000        STR              r1, [r0]



ARM Macro Assembler    Page 15 


  166 00000830         ; set snake to no square
  167 00000830 E59F06F8        LDR              r0, =SNAKE_SQUARE
  168 00000834 E5801000        STR              r1, [r0]
  169 00000838         
  170 00000838         ; Do not continue to blink after a new game is started
  171 00000838 E59F06F4        LDR              r0, =BLINK
  172 0000083C E3A01000        MOV              r1, #0
  173 00000840 E5801000        STR              r1, [r0]
  174 00000844         
  175 00000844         ; Reset 2s spawn timer to 0
  176 00000844 E59F46EC        LDR              r4, =NUM_HALF_SECS
  177 00000848 E3A05000        MOV              r5, #0
  178 0000084C E5845000        STR              r5, [r4]
  179 00000850         
  180 00000850         ; Reset SCORE to 0
  181 00000850 E59F46E4        LDR              r4, =SCORE
  182 00000854 E3A05000        MOV              r5, #0
  183 00000858 E5845000        STR              r5, [r4]
  184 0000085C         
  185 0000085C         ; Reset NUM_BALLS to 0    
  186 0000085C E59F46DC        LDR              r4, =NUM_BALLS
  187 00000860 E3A05000        MOV              r5, #0
  188 00000864 E5845000        STR              r5, [r4]
  189 00000868         
  190 00000868         ; Reset all SQUAREs to 0
  191 00000868 EB000027        BL               resetAllSquares
  192 0000086C         
  193 0000086C         ; Reset LEVEL to 1
  194 0000086C E59F46D0        LDR              r4, =LEVEL
  195 00000870 E3A05001        MOV              r5, #1
  196 00000874 E5845000        STR              r5, [r4]
  197 00000878         
  198 00000878         ; Reset LIVES to 4
  199 00000878 E59F46C8        LDR              r4, =LIVES  ; Set the LIVES to 
                                                            4
  200 0000087C E3A05004        MOV              r5, #4
  201 00000880 E5845000        STR              r5, [r4]
  202 00000884         
  203 00000884 E3A04001        MOV              r4, #1
  204 00000888 EBFFFFFE        BL               display_digit_on_7_seg ; Displa
                                                            y current level (1)
                                                            
  205 0000088C E3A04001        MOV              r4, #1
  206 00000890 EBFFFFFE        BL               illuminate_RGB_LED ; Set RGB LC
                                                            D to green when gam
                                                            e running
  207 00000894         
  208 00000894         ; turn all four leds on
  209 00000894 E3A04000        MOV              r4, #0x00
  210 00000898 EBFFFFFE        BL               illuminateLEDs ; Set all 4 LCDs
                                                             to on
  211 0000089C         
  212 0000089C         ; Reset Q to starting position
  213 0000089C E59F46A8        LDR              r4, =Q_X_POSITION
  214 000008A0 E3A0500F        MOV              r5, #15
  215 000008A4 E5845000        STR              r5, [r4]    ; store new xPos 
  216 000008A8 E59F46A0        LDR              r4, =Q_Y_POSITION
  217 000008AC E3A05005        MOV              r5, #5
  218 000008B0 E5845000        STR              r5, [r4]    ; store new yPos



ARM Macro Assembler    Page 16 


  219 000008B4         
  220 000008B4         ; Reset Q_DIRECTION to 0 = none
  221 000008B4 E59F4698        LDR              r4, =Q_DIRECTION
  222 000008B8 E3A05000        MOV              r5, #0
  223 000008BC E5845000        STR              r5, [r4]    ; store new directi
                                                            on
  224 000008C0         
  225 000008C0         ; Display the game board
  226 000008C0 E59F3690        LDR              r3, =GAME_BOARD
  227 000008C4 EBFFFFFE        BL               output_string
  228 000008C8         
  229 000008C8         
  230 000008C8         ; Enable timer0
  231 000008C8 E59F268C        LDR              r2, =0xE000401C ; Address of Ma
                                                            tch Register 0 (MR0
                                                            )
  232 000008CC         ;LDR r0, =36864000      ; timeout period of the timer (2
                       s)
  233 000008CC         ;LDR r0, =18432000      ; timeout period of the timer (1
                       s) 
  234 000008CC E59F068C        LDR              r0, =9216000 ; timeout period o
                                                            f the timer (0.5s)
  235 000008D0         ;LDR r0, =8755200      ; timeout period of the timer (0.
                       45s)          
  236 000008D0 E5820000        STR              r0, [r2]
  237 000008D4 E59F0688        LDR              r0, =0xE0004004 ; (T0TCR) Timer
                                                             0 timer control re
                                                            g
  238 000008D8 E5901000        LDR              r1, [r0]
  239 000008DC E3811001        ORR              r1, r1, #1  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
  240 000008E0 E5801000        STR              r1, [r0]
  241 000008E4         
  242 000008E4         ; Enable timer1
  243 000008E4 E59F267C        LDR              r2, =0xE000801C ; Address of Ma
                                                            tch Register 1 (MR1
                                                            )
  244 000008E8         ;LDR r0, =36864000      ; timeout period of the timer (2
                       s)
  245 000008E8         ;LDR r0, =92160000      ; timeout period of the timer (5
                       s)
  246 000008E8 E59F067C        LDR              r0, =2211840000 ; timeout perio
                                                            d of the timer (120
                                                            s)
  247 000008EC E5820000        STR              r0, [r2]
  248 000008F0 E59F0678        LDR              r0, =0xE0008004 ; (T1TCR) Timer
                                                             1 timer control re
                                                            g
  249 000008F4 E5901000        LDR              r1, [r0]
  250 000008F8 E3811001        ORR              r1, r1, #1  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
  251 000008FC E5801000        STR              r1, [r0]
  252 00000900 EB000868        BL               interrupt_init
  253 00000904 E8BD423F        LDMFD            SP!, {r0-r5, r9, lr} 
                                                            ; Restore registers
                                                            
  254 00000908 E12FFF1E        BX               lr



ARM Macro Assembler    Page 17 


  255 0000090C         
  256 0000090C         
  257 0000090C         resetAllSquares
  258 0000090C E92D403F        STMFD            SP!, {r0-r5, lr} 
                                                            ; Save registers
  259 00000910         ; Reset all SQUAREs to 0
  260 00000910 E59F365C        LDR              r3, =SQUARE
  261 00000914 E3A05000        MOV              r5, #0
  262 00000918         resetNextSquare
  263 00000918         
  264 00000918         ; Clear SQUARE to reset   
  265 00000918 E3A02000        MOV              r2, #0
  266 0000091C E7832105        STR              r2, [r3, r5, LSL #2 ]
  267 00000920 E2855001        ADD              r5, r5, #1
  268 00000924 E3550016        CMP              r5, #22
  269 00000928 BAFFFFFA        BLT              resetNextSquare
  270 0000092C E8BD403F        LDMFD            SP!, {r0-r5, lr} 
                                                            ; Restore registers
                                                            
  271 00000930 E12FFF1E        BX               lr
  272 00000934         
  273 00000934         ;;;;; TODO PURPLE AT GAME OVER
  274 00000934         gameOver
  275 00000934 E92D400F        STMFD            SP!, {r0-r3, lr} 
                                                            ; Save registers
  276 00000938 E3A0200C        MOV              r2, #0x0C   ; ASCII 0x0C is for
                                                             new page
  277 0000093C EBFFFFFE        BL               output_character 
                                                            ; Clear the screen
  278 00000940         ; Display Game Over screen
  279 00000940 E59F3630        LDR              r3, =GAME_OVER
  280 00000944 EBFFFFFE        BL               output_string
  281 00000948         ; Update score += lives left * 25
  282 00000948 E59F05F8        LDR              r0, =LIVES
  283 0000094C E5901000        LDR              r1, [r0]
  284 00000950 E3A02019        MOV              r2, #25
  285 00000954 E0020291        MUL              r2, r1, r2
  286 00000958 E59F05DC        LDR              r0, =SCORE
  287 0000095C E5901000        LDR              r1, [r0]
  288 00000960 E0821001        ADD              r1, r2, r1
  289 00000964 E5801000        STR              r1, [r0]
  290 00000968 EB000234        BL               updateScore
  291 0000096C         ;BL interrupt_init
  292 0000096C         ; Disable timer0
  293 0000096C E59F05F0        LDR              r0, =0xE0004004 ; (T0TCR) Timer
                                                             0 timer control re
                                                            g
  294 00000970 E5901000        LDR              r1, [r0]
  295 00000974 E2011000        AND              r1, r1, #0  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
  296 00000978 E5C01000        STRB             r1, [r0]
  297 0000097C         ; Disable timer1
  298 0000097C E59F05EC        LDR              r0, =0xE0008004 ; (T1TCR) Timer
                                                             1 timer control re
                                                            g
  299 00000980 E5901000        LDR              r1, [r0]
  300 00000984 E2011000        AND              r1, r1, #0  ; set bit 0 to 1 to
                                                             enable, or 0 to di



ARM Macro Assembler    Page 18 


                                                            sable
  301 00000988 E5C01000        STRB             r1, [r0]
  302 0000098C E59F058C        LDR              r0, =IS_GAMEOVER_SCREEN ; set f
                                                            or game over screen
                                                            
  303 00000990 E3A01001        MOV              r1, #1
  304 00000994 E5C01000        STRB             r1, [r0]
  305 00000998 E8BD400F        LDMFD            SP!, {r0-r3, lr} 
                                                            ; Restore registers
                                                            
  306 0000099C E12FFF1E        BX               lr
  307 000009A0         
  308 000009A0         increaseLevel
  309 000009A0 E92D403F        STMFD            SP!, {r0-r5, lr} 
                                                            ; Save registers
  310 000009A4         ; THIS DOESNT WORK
  311 000009A4         ; pause the game while increaseing the level
  312 000009A4 E59F0574        LDR              r0, =IS_GAMEOVER_SCREEN
  313 000009A8 E3A01001        MOV              r1, #1
  314 000009AC E5C01000        STRB             r1, [r0]
  315 000009B0         ; Increase level by one and update 7-seg display
  316 000009B0 E59F058C        LDR              r0, =LEVEL
  317 000009B4 E5904000        LDR              r4, [r0]
  318 000009B8 E2844001        ADD              r4, r4, #1
  319 000009BC E5804000        STR              r4, [r0]
  320 000009C0 EBFFFFFE        BL               display_digit_on_7_seg ; Displa
                                                            y current level (ta
                                                            kes arg in r4) 
  321 000009C4         
  322 000009C4         ; Update score +100
  323 000009C4 E59F3570        LDR              r3, =SCORE
  324 000009C8 E5932000        LDR              r2, [r3]
  325 000009CC E2822064        ADD              r2, r2, #100 ; Player gets 100 
                                                            points for completi
                                                            ng a level
  326 000009D0 E5832000        STR              r2, [r3]
  327 000009D4         
  328 000009D4         ; Reset Q to starting position
  329 000009D4 E59F4570        LDR              r4, =Q_X_POSITION
  330 000009D8 E3A0500F        MOV              r5, #15
  331 000009DC E5845000        STR              r5, [r4]    ; store new xPos 
  332 000009E0 E59F4568        LDR              r4, =Q_Y_POSITION
  333 000009E4 E3A05005        MOV              r5, #5
  334 000009E8 E5845000        STR              r5, [r4]    ; store new yPos 
  335 000009EC         ; Reset Q_DIRECTION to 0 = none
  336 000009EC E59F4560        LDR              r4, =Q_DIRECTION
  337 000009F0 E3A05000        MOV              r5, #0
  338 000009F4 E5845000        STR              r5, [r4]    ; store new directi
                                                            on
  339 000009F8         ; set ball1 to no square
  340 000009F8 E59F0524        LDR              r0, =BALL1_SQUARE
  341 000009FC E3A01000        MOV              r1, #0
  342 00000A00 E5801000        STR              r1, [r0]
  343 00000A04         ; set ball2 to no square
  344 00000A04 E59F051C        LDR              r0, =BALL2_SQUARE
  345 00000A08 E5801000        STR              r1, [r0]
  346 00000A0C         
  347 00000A0C         ; Display the game board
  348 00000A0C E3A0200C        MOV              r2, #0x0C   ; ASCII 0x0C is for



ARM Macro Assembler    Page 19 


                                                             new page
  349 00000A10 EBFFFFFE        BL               output_character 
                                                            ; Clear the screen 
                                                            
  350 00000A14 E59F353C        LDR              r3, =GAME_BOARD
  351 00000A18 EBFFFFFE        BL               output_string
  352 00000A1C         
  353 00000A1C         ; Set flag to increase speed
  354 00000A1C E59F4558        LDR              r4, =INC_TIMER_FLAG
  355 00000A20 E3A05001        MOV              r5, #1
  356 00000A24 E5845000        STR              r5, [r4]
  357 00000A28         
  358 00000A28         ; TODO clear balls and snakes and rest spawns
  359 00000A28         ; Reset 2s spawn timer to 0
  360 00000A28 E59F4508        LDR              r4, =NUM_HALF_SECS
  361 00000A2C E3A05000        MOV              r5, #0
  362 00000A30 E5845000        STR              r5, [r4]
  363 00000A34         ; Number of balls -= 1
  364 00000A34 E59F4504        LDR              r4, =NUM_BALLS
  365 00000A38 E5945000        LDR              r5, [r4]
  366 00000A3C E2455001        SUB              r5, r5, #1
  367 00000A40 E5845000        STR              r5, [r4]
  368 00000A44         
  369 00000A44         ; Reset all SQUAREs to 0
  370 00000A44 EBFFFFB0        BL               resetAllSquares
  371 00000A48         
  372 00000A48         ; THIS DOESNT WORK
  373 00000A48         ; unpause the game after increasing level
  374 00000A48 E59F04D0        LDR              r0, =IS_GAMEOVER_SCREEN
  375 00000A4C E3A01000        MOV              r1, #0
  376 00000A50 E5C01000        STRB             r1, [r0]
  377 00000A54         
  378 00000A54 E8BD403F        LDMFD            SP!, {r0-r5, lr} 
                                                            ; Restore registers
                                                            
  379 00000A58 E12FFF1E        BX               lr
  380 00000A5C         
  381 00000A5C         removeQ
  382 00000A5C E92D403F        STMFD            SP!, {r0-r5, lr} 
                                                            ; Save registers
  383 00000A60 E59F44E4        LDR              r4, =Q_X_POSITION
  384 00000A64 E59F54E4        LDR              r5, =Q_Y_POSITION
  385 00000A68 E3A0201B        MOV              r2, #0x1B   ; ESC
  386 00000A6C EBFFFFFE        BL               output_character
  387 00000A70 E3A0205B        MOV              r2, #0x5B   ; [
  388 00000A74 EBFFFFFE        BL               output_character
  389 00000A78 E3A0100A        MOV              r1, #10     ; divisor
  390 00000A7C E5950000        LDR              r0, [r5]    ; dividend
  391 00000A80 EBFFFFFE        BL               div_and_mod
  392 00000A84 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
  393 00000A88 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
  394 00000A8C EBFFFFFE        BL               output_character
  395 00000A90 E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
  396 00000A94 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
  397 00000A98 EBFFFFFE        BL               output_character



ARM Macro Assembler    Page 20 


  398 00000A9C E3A0203B        MOV              r2, #0x3B   ; ;
  399 00000AA0 EBFFFFFE        BL               output_character
  400 00000AA4 E3A0100A        MOV              r1, #10     ; divisor
  401 00000AA8 E5940000        LDR              r0, [r4]    ; dividend
  402 00000AAC EBFFFFFE        BL               div_and_mod
  403 00000AB0 E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
  404 00000AB4 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
  405 00000AB8 EBFFFFFE        BL               output_character
  406 00000ABC E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
  407 00000AC0 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
  408 00000AC4 EBFFFFFE        BL               output_character
  409 00000AC8 E3A02066        MOV              r2, #0x66   ; f
  410 00000ACC EBFFFFFE        BL               output_character
  411 00000AD0 E3A02020        MOV              r2, #0x20   ; space
  412 00000AD4 EBFFFFFE        BL               output_character
  413 00000AD8 EB0007F2        BL               interrupt_init
  414 00000ADC E8BD403F        LDMFD            SP!, {r0-r5, lr} 
                                                            ; Restore registers
                                                            
  415 00000AE0 E12FFF1E        BX               lr          ; Return
  416 00000AE4         
  417 00000AE4         
  418 00000AE4         redrawQ
  419 00000AE4 E92D41FF        STMFD            SP!, {r0-r8, lr} 
                                                            ; Save registers
  420 00000AE8 E59F3464        LDR              r3, =Q_DIRECTION
  421 00000AEC E5938000        LDR              r8, [r3]
  422 00000AF0 E59F4454        LDR              r4, =Q_X_POSITION
  423 00000AF4 E5946000        LDR              r6, [r4]
  424 00000AF8 E59F5450        LDR              r5, =Q_Y_POSITION
  425 00000AFC E5957000        LDR              r7, [r5]
  426 00000B00 E3580000        CMP              r8, #0      ; direction = none
  427 00000B04 0A00000E        BEQ              savePosition
  428 00000B08 E3580001        CMP              r8, #1      ; direction = up
  429 00000B0C 02866002        ADDEQ            r6, r6, #2  ; new x = x+2
  430 00000B10 02477004        SUBEQ            r7, r7, #4  ; new y = y-4
  431 00000B14 0A00000A        BEQ              savePosition
  432 00000B18 E3580002        CMP              r8, #2      ; direction = left
  433 00000B1C 02466005        SUBEQ            r6, r6, #5  ; new x = x-5
  434 00000B20 02477002        SUBEQ            r7, r7, #2  ; new y = y-2
  435 00000B24 0A000006        BEQ              savePosition
  436 00000B28 E3580003        CMP              r8, #3      ; direction = down
  437 00000B2C 02466002        SUBEQ            r6, r6, #2  ; new x = x-2
  438 00000B30 02877004        ADDEQ            r7, r7, #4  ; new y = y+4
  439 00000B34 0A000002        BEQ              savePosition
  440 00000B38 E3580004        CMP              r8, #4      ; direction = right
                                                            
  441 00000B3C 02866005        ADDEQ            r6, r6, #5  ; new x = x+5
  442 00000B40 02877002        ADDEQ            r7, r7, #2  ; new y = y+2
  443 00000B44         savePosition
  444 00000B44 E5846000        STR              r6, [r4]    ; store new xPos
  445 00000B48 E5857000        STR              r7, [r5]    ; store new yPos
  446 00000B4C         ; draw a Q
  447 00000B4C E3A0201B        MOV              r2, #0x1B   ; ESC
  448 00000B50 EBFFFFFE        BL               output_character



ARM Macro Assembler    Page 21 


  449 00000B54 E3A0205B        MOV              r2, #0x5B   ; [
  450 00000B58 EBFFFFFE        BL               output_character
  451 00000B5C E3A0100A        MOV              r1, #10     ; divisor
  452 00000B60 E1A00007        MOV              r0, r7      ; dividend
  453 00000B64 EBFFFFFE        BL               div_and_mod
  454 00000B68 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
  455 00000B6C E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
  456 00000B70 EBFFFFFE        BL               output_character
  457 00000B74 E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
  458 00000B78 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
  459 00000B7C EBFFFFFE        BL               output_character
  460 00000B80 E3A0203B        MOV              r2, #0x3B   ; ;
  461 00000B84 EBFFFFFE        BL               output_character
  462 00000B88 E3A0100A        MOV              r1, #10     ; divisor
  463 00000B8C E1A00006        MOV              r0, r6      ; dividend
  464 00000B90 EBFFFFFE        BL               div_and_mod
  465 00000B94 E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
  466 00000B98 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
  467 00000B9C EBFFFFFE        BL               output_character
  468 00000BA0 E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
  469 00000BA4 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
  470 00000BA8 EBFFFFFE        BL               output_character
  471 00000BAC E3A02066        MOV              r2, #0x66   ; f
  472 00000BB0 EBFFFFFE        BL               output_character
  473 00000BB4 E3A02051        MOV              r2, #0x51   ; Q
  474 00000BB8 EBFFFFFE        BL               output_character
  475 00000BBC E59F0388        LDR              r0, =Q_X_POSITION
  476 00000BC0 E59F23B8        LDR              r2, =Q_SQUARE
  477 00000BC4 EB00000F        BL               updateSquare
  478 00000BC8         ; Only clear the square if player has lives left 
  479 00000BC8         ; this is to prevent spaces in game over screen
  480 00000BC8 E59F3378        LDR              r3, =LIVES
  481 00000BCC E5934000        LDR              r4, [r3]
  482 00000BD0 E3540000        CMP              r4, #0
  483 00000BD4 1B0000A1        BLNE             clearSquare
  484 00000BD8         ; Check if all spaces cleared to see if player reached n
                       ext level
  485 00000BD8 E59F3394        LDR              r3, =SQUARE
  486 00000BDC E3A05001        MOV              r5, #1      ;2
  487 00000BE0         nextSquare
  488 00000BE0 E7934105        LDR              r4, [r3, r5, LSL #2]
  489 00000BE4 E3540000        CMP              r4, #0      ; 0 if not cleared
  490 00000BE8 0A000003        BEQ              notClear
  491 00000BEC E2855001        ADD              r5, r5, #1
  492 00000BF0 E3550016        CMP              r5, #22
  493 00000BF4 BAFFFFF9        BLT              nextSquare
  494 00000BF8 EBFFFF68        BL               increaseLevel
  495 00000BFC         notClear
  496 00000BFC EB0007A9        BL               interrupt_init
  497 00000C00 E8BD41FF        LDMFD            SP!, {r0-r8, lr} 
                                                            ; Restore registers



ARM Macro Assembler    Page 22 


                                                            
  498 00000C04 E12FFF1E        BX               lr          ; Return
  499 00000C08         
  500 00000C08         ;r0=objects x position 
  501 00000C08         ;r2=objects square
  502 00000C08         updateSquare
  503 00000C08 E92D4020        STMFD            SP!, {r5, lr} ; Save registers
  504 00000C0C E5905000        LDR              r5, [r0]
  505 00000C10 E355000F        CMP              r5, #15
  506 00000C14 03A01001        MOVEQ            r1, #1
  507 00000C18 0A00003D        BEQ              doneSquare
  508 00000C1C E355000D        CMP              r5, #13
  509 00000C20 03A01002        MOVEQ            r1, #2
  510 00000C24 0A00003A        BEQ              doneSquare
  511 00000C28 E3550014        CMP              r5, #20
  512 00000C2C 03A01003        MOVEQ            r1, #3
  513 00000C30 0A000037        BEQ              doneSquare
  514 00000C34 E355000B        CMP              r5, #11
  515 00000C38 03A01004        MOVEQ            r1, #4
  516 00000C3C 0A000034        BEQ              doneSquare
  517 00000C40 E3550012        CMP              r5, #18
  518 00000C44 03A01005        MOVEQ            r1, #5
  519 00000C48 0A000031        BEQ              doneSquare
  520 00000C4C E3550019        CMP              r5, #25
  521 00000C50 03A01006        MOVEQ            r1, #6
  522 00000C54 0A00002E        BEQ              doneSquare
  523 00000C58 E3550009        CMP              r5, #9
  524 00000C5C 03A01007        MOVEQ            r1, #7
  525 00000C60 0A00002B        BEQ              doneSquare
  526 00000C64 E3550010        CMP              r5, #16
  527 00000C68 03A01008        MOVEQ            r1, #8
  528 00000C6C 0A000028        BEQ              doneSquare
  529 00000C70 E3550017        CMP              r5, #23
  530 00000C74 03A01009        MOVEQ            r1, #9
  531 00000C78 0A000025        BEQ              doneSquare
  532 00000C7C E355001E        CMP              r5, #30
  533 00000C80 03A0100A        MOVEQ            r1, #10
  534 00000C84 0A000022        BEQ              doneSquare
  535 00000C88 E3550007        CMP              r5, #7
  536 00000C8C 03A0100B        MOVEQ            r1, #11
  537 00000C90 0A00001F        BEQ              doneSquare
  538 00000C94 E355000E        CMP              r5, #14
  539 00000C98 03A0100C        MOVEQ            r1, #12
  540 00000C9C 0A00001C        BEQ              doneSquare
  541 00000CA0 E3550015        CMP              r5, #21
  542 00000CA4 03A0100D        MOVEQ            r1, #13
  543 00000CA8 0A000019        BEQ              doneSquare
  544 00000CAC E355001C        CMP              r5, #28
  545 00000CB0 03A0100E        MOVEQ            r1, #14
  546 00000CB4 0A000016        BEQ              doneSquare
  547 00000CB8 E3550023        CMP              r5, #35
  548 00000CBC 03A0100F        MOVEQ            r1, #15
  549 00000CC0 0A000013        BEQ              doneSquare
  550 00000CC4 E3550005        CMP              r5, #5
  551 00000CC8 03A01010        MOVEQ            r1, #16
  552 00000CCC 0A000010        BEQ              doneSquare
  553 00000CD0 E355000C        CMP              r5, #12
  554 00000CD4 03A01011        MOVEQ            r1, #17
  555 00000CD8 0A00000D        BEQ              doneSquare



ARM Macro Assembler    Page 23 


  556 00000CDC E3550013        CMP              r5, #19
  557 00000CE0 03A01012        MOVEQ            r1, #18
  558 00000CE4 0A00000A        BEQ              doneSquare
  559 00000CE8 E355001A        CMP              r5, #26
  560 00000CEC 03A01013        MOVEQ            r1, #19
  561 00000CF0 0A000007        BEQ              doneSquare
  562 00000CF4 E3550021        CMP              r5, #33
  563 00000CF8 03A01014        MOVEQ            r1, #20
  564 00000CFC 0A000004        BEQ              doneSquare
  565 00000D00 E3550028        CMP              r5, #40
  566 00000D04 03A01015        MOVEQ            r1, #21
  567 00000D08 0A000001        BEQ              doneSquare
  568 00000D0C EB000003        BL               fallOff     ; Q/enemy is off py
                                                            ramid if not on a s
                                                            quare
  569 00000D10 EA000000        B                offSquare
  570 00000D14         doneSquare
  571 00000D14 E5821000        STR              r1, [r2]    ; Store the new squ
                                                            are
  572 00000D18         offSquare
  573 00000D18 E8BD4020        LDMFD            SP!, {r5, lr} 
                                                            ; Restore registers
                                                            
  574 00000D1C E12FFF1E        BX               lr
  575 00000D20         
  576 00000D20         
  577 00000D20         ;r0=objects x position 
  578 00000D20         ;r2=objects square
  579 00000D20         fallOff
  580 00000D20 E92D4030        STMFD            SP!, {r4-r5, lr} 
                                                            ; Save registers
  581 00000D24         ; Check if Q, or ball fell off pyramid
  582 00000D24 E59F1220        LDR              r1, =Q_X_POSITION
  583 00000D28 E1500001        CMP              r0, r1
  584 00000D2C 0A000014        BEQ              qFell
  585 00000D30 E59F124C        LDR              r1, =SNAKEBALL_X_POSITION
  586 00000D34 E1500001        CMP              r0, r1
  587 00000D38 0A000007        BEQ              snakeBallFell
  588 00000D3C E59F1244        LDR              r1, =BALL2_X_POSITION
  589 00000D40 E1500001        CMP              r0, r1
  590 00000D44 0A000009        BEQ              ball2Fell
  591 00000D48 E59F423C        LDR              r4, =BALL1_FELL_OFF 
                                                            ; set O_FELL_OFF
  592 00000D4C E3A05001        MOV              r5, #1
  593 00000D50 E5845000        STR              r5, [r4]
  594 00000D54 EB0004E8        BL               removeBall1
  595 00000D58 EA000014        B                oFell
  596 00000D5C         snakeBallFell
  597 00000D5C E59F422C        LDR              r4, =SNAKEBALL_FELL_OFF ; set S
                                                            ANKEBALL_FELL_OFF
  598 00000D60 E3A05001        MOV              r5, #1
  599 00000D64 E5845000        STR              r5, [r4]
  600 00000D68 EB00049A        BL               removeSnakeBall
  601 00000D6C EA00000F        B                oFell
  602 00000D70         ball2Fell
  603 00000D70 E59F421C        LDR              r4, =BALL2_FELL_OFF 
                                                            ; set O_FELL_OFF
  604 00000D74 E3A05001        MOV              r5, #1
  605 00000D78 E5845000        STR              r5, [r4]



ARM Macro Assembler    Page 24 


  606 00000D7C EB000527        BL               removeBall2
  607 00000D80 EA00000A        B                oFell
  608 00000D84         qFell
  609 00000D84 EBFFFF34        BL               removeQ
  610 00000D88         ; Reset Q to starting position
  611 00000D88 E59F41BC        LDR              r4, =Q_X_POSITION
  612 00000D8C E3A0500F        MOV              r5, #15
  613 00000D90 E5845000        STR              r5, [r4]    ; store new xPos 
  614 00000D94 E59F41B4        LDR              r4, =Q_Y_POSITION
  615 00000D98 E3A05005        MOV              r5, #5
  616 00000D9C E5845000        STR              r5, [r4]    ; store new yPos
  617 00000DA0         ; Reset Q_DIRECTION to 0 = none
  618 00000DA0 E59F41AC        LDR              r4, =Q_DIRECTION
  619 00000DA4 E3A05000        MOV              r5, #0
  620 00000DA8 E5845000        STR              r5, [r4]    ; store new directi
                                                            on
  621 00000DAC EB000001        BL               removeLife
  622 00000DB0         oFell
  623 00000DB0 E8BD4030        LDMFD            SP!, {r4-r5, lr} 
                                                            ; Restore registers
                                                            
  624 00000DB4 E12FFF1E        BX               lr
  625 00000DB8         
  626 00000DB8         
  627 00000DB8         removeLife
  628 00000DB8 E92D4038        STMFD            SP!, {r3-r5, lr} 
                                                            ; Save registers
  629 00000DBC         ; Blink RGB LED red 5 times
  630 00000DBC         ; Set BLINK to 10 which will be decremented 10 times and
                        
  631 00000DBC         ; blink each time
  632 00000DBC E59F3170        LDR              r3, =BLINK
  633 00000DC0 E3A0500A        MOV              r5, #10
  634 00000DC4 E5835000        STR              r5, [r3]    ; store new BLINK
  635 00000DC8 EB000013        BL               blinkOnDeath
  636 00000DCC         ; Remove a life
  637 00000DCC E59F3174        LDR              r3, =LIVES
  638 00000DD0 E5935000        LDR              r5, [r3]
  639 00000DD4 E2455001        SUB              r5, #1
  640 00000DD8 E5835000        STR              r5, [r3]
  641 00000DDC         ; Update lives LEDs
  642 00000DDC E3550003        CMP              r5, #3
  643 00000DE0 03A04801        LDREQ            r4, =0x10000 ;turn 3 leds on
  644 00000DE4 E3550002        CMP              r5, #2
  645 00000DE8 03A04803        LDREQ            r4, =0x30000 ;turn 2 leds on
  646 00000DEC E3550001        CMP              r5, #1
  647 00000DF0 03A04807        LDREQ            r4, =0x70000 ;turn 1 leds on
  648 00000DF4 E3550000        CMP              r5, #0
  649 00000DF8 03A0480F        LDREQ            r4, =0xF0000 ;turn 0 leds on
  650 00000DFC EBFFFFFE        BL               illuminateLEDs
  651 00000E00 E3550000        CMP              r5, #0
  652 00000E04 0BFFFECA        BLEQ             gameOver
  653 00000E08 E3550000        CMP              r5, #0
  654 00000E0C 0A000000        BEQ              qDead       ; Do not need to up
                                                            date new Q position
                                                             if game over
  655 00000E10 EBFFFF33        BL               redrawQ
  656 00000E14         qDead
  657 00000E14 E8BD4038        LDMFD            SP!, {r3-r5, lr} 



ARM Macro Assembler    Page 25 


                                                            ; Restore registers
                                                            
  658 00000E18 E12FFF1E        BX               lr
  659 00000E1C         
  660 00000E1C         blinkOnDeath
  661 00000E1C E92D403F        STMFD            SP!, {r0-r5, lr} 
                                                            ; Save registers
  662 00000E20 E59F310C        LDR              r3, =BLINK  ; check if BLINK is
                                                             0
  663 00000E24 E5935000        LDR              r5, [r3]
  664 00000E28 E3550000        CMP              r5, #0
  665 00000E2C 03A04001        MOVEQ            r4, #1      ; Set RGB back to g
                                                            reen when zero
  666 00000E30 0A000007        BEQ              noBlinks    ; if BLINK is 0 do 
                                                            not blink
  667 00000E34         ; If BLINK is non-zero check if even or odd
  668 00000E34 E3A01002        MOV              r1, #2      ; divisor
  669 00000E38 E1A00005        MOV              r0, r5      ; dividend
  670 00000E3C EBFFFFFE        BL               div_and_mod
  671 00000E40 E3510000        CMP              r1, #0      ; even if remainder
                                                             = 0
  672 00000E44 03A04000        MOVEQ            r4, #0      ; SET RGB LED to re
                                                            d when even
  673 00000E48 C3A04006        MOVGT            r4, #6      ; Set RGB LED to of
                                                            f when odd
  674 00000E4C         ; Decrement BLINK
  675 00000E4C E2455001        SUB              r5, r5, #1
  676 00000E50 E5835000        STR              r5, [r3]
  677 00000E54         noBlinks
  678 00000E54 EBFFFFFE        BL               illuminate_RGB_LED
  679 00000E58 E8BD403F        LDMFD            SP!, {r0-r5, lr} 
                                                            ; Restore registers
                                                            
  680 00000E5C E12FFF1E        BX               lr
  681 00000E60         
  682 00000E60         clearSquare
  683 00000E60 E92D4038        STMFD            SP!, {r3-r5, lr} 
                                                            ; Save registers
  684 00000E64 E59F3114        LDR              r3, =Q_SQUARE
  685 00000E68 E5934000        LDR              r4, [r3]
  686 00000E6C E3540001        CMP              r4, #1
  687 00000E70 0B0000AE        BLEQ             clearLLL
  688 00000E74 E3540002        CMP              r4, #2
  689 00000E78 0B000046        BLEQ             clearLL
  690 00000E7C E3540003        CMP              r4, #3
  691 00000E80 0B000044        BLEQ             clearLL
  692 00000E84 E3540005        CMP              r4, #5
  693 00000E88 0B000042        BLEQ             clearLL
  694 00000E8C E3540004        CMP              r4, #4
  695 00000E90 0B00005C        BLEQ             clearLR
  696 00000E94 E3540007        CMP              r4, #7
  697 00000E98 0B00005A        BLEQ             clearLR
  698 00000E9C E3540008        CMP              r4, #8
  699 00000EA0 0B000058        BLEQ             clearLR
  700 00000EA4 E354000C        CMP              r4, #12
  701 00000EA8 0B000056        BLEQ             clearLR
  702 00000EAC E354000F        CMP              r4, #15
  703 00000EB0 0B000054        BLEQ             clearLR
  704 00000EB4 E3540011        CMP              r4, #17



ARM Macro Assembler    Page 26 


  705 00000EB8 0B000052        BLEQ             clearLR
  706 00000EBC E3540012        CMP              r4, #18
  707 00000EC0 0B000050        BLEQ             clearLR
  708 00000EC4 E3540014        CMP              r4, #20
  709 00000EC8 0B00004E        BLEQ             clearLR
  710 00000ECC E3540015        CMP              r4, #21
  711 00000ED0 0B00004C        BLEQ             clearLR
  712 00000ED4 E3540009        CMP              r4, #9
  713 00000ED8 0B00006E        BLEQ             clearLLR
  714 00000EDC E354000A        CMP              r4, #10
  715 00000EE0 0B00006C        BLEQ             clearLLR
  716 00000EE4 E354000B        CMP              r4, #11
  717 00000EE8 0B00006A        BLEQ             clearLLR
  718 00000EEC E354000D        CMP              r4, #13
  719 00000EF0 0B000068        BLEQ             clearLLR
  720 00000EF4 E3540010        CMP              r4, #16
  721 00000EF8 0B000066        BLEQ             clearLLR
  722 00000EFC E3540013        CMP              r4, #19
  723 00000F00 0B000064        BLEQ             clearLLR
  724 00000F04 E3540006        CMP              r4, #6
  725 00000F08 0B000088        BLEQ             clearLLL
  726 00000F0C E354000E        CMP              r4, #14
  727 00000F10 0B0000A4        BLEQ             clearLRR
  728 00000F14 E8BD4038        LDMFD            SP!, {r3-r5, lr} 
                                                            ; Restore registers
                                                            
  729 00000F18 E12FFF1E        BX               lr
  730 00000F1C 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E000401C 
              008CA000 
              E0004004 
              E000801C 
              83D60000 
              E0008004 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         LTORG                        ; Literal poop too 
                                                            distant



ARM Macro Assembler    Page 27 


  731 00000F98         
  732 00000F98         clearLL
  733 00000F98 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
  734 00000F9C         ; Check if space is already clear
  735 00000F9C E51F3030        LDR              r3, =SQUARE
  736 00000FA0 E51F4028        LDR              r4, =Q_SQUARE
  737 00000FA4 E5945000        LDR              r5, [r4]
  738 00000FA8 E1A05105        MOV              r5, r5, LSL #2
  739 00000FAC E7936005        LDR              r6, [r3, r5]
  740 00000FB0 E3560000        CMP              r6, #0      ; 0 if not cleared
  741 00000FB4 1A000011        BNE              alreadyClrLL
  742 00000FB8         ; Move curosr left 3, and write 2 spaces
  743 00000FB8 E3A0201B        MOV              r2, #0x1B   ; ESC
  744 00000FBC EBFFFFFE        BL               output_character
  745 00000FC0 E3A0205B        MOV              r2, #0x5B   ; [
  746 00000FC4 EBFFFFFE        BL               output_character
  747 00000FC8 E3A02033        MOV              r2, #0x33   ; 3
  748 00000FCC EBFFFFFE        BL               output_character
  749 00000FD0 E3A02044        MOV              r2, #0x44   ; D
  750 00000FD4 EBFFFFFE        BL               output_character
  751 00000FD8 E3A02020        MOV              r2, #0x20   ; space
  752 00000FDC EBFFFFFE        BL               output_character
  753 00000FE0 E3A02020        MOV              r2, #0x20   ; space
  754 00000FE4 EBFFFFFE        BL               output_character
  755 00000FE8         ; Set SQUARE to show its already been cleared
  756 00000FE8 E3A02001        MOV              r2, #1
  757 00000FEC E7832005        STR              r2, [r3, r5]
  758 00000FF0         ; Update SCORE
  759 00000FF0 E51F30BC        LDR              r3, =SCORE
  760 00000FF4 E5932000        LDR              r2, [r3]
  761 00000FF8 E282200A        ADD              r2, r2, #10 ; Player gets 10 po
                                                            int for unexplored 
                                                            square
  762 00000FFC E5832000        STR              r2, [r3]
  763 00001000         alreadyClrLL
  764 00001000 E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
  765 00001004 E12FFF1E        BX               lr
  766 00001008         
  767 00001008         clearLR
  768 00001008 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
  769 0000100C         ; Check if space is already clear
  770 0000100C E51F30A0        LDR              r3, =SQUARE
  771 00001010 E51F4098        LDR              r4, =Q_SQUARE
  772 00001014 E5945000        LDR              r5, [r4]
  773 00001018 E1A05105        MOV              r5, r5, LSL #2
  774 0000101C E7936005        LDR              r6, [r3, r5]
  775 00001020 E3560000        CMP              r6, #0      ; 0 if not cleared
  776 00001024 1A000019        BNE              alreadyClrLR
  777 00001028         ; Move curosr left 2, and write 1 space
  778 00001028 E3A0201B        MOV              r2, #0x1B   ; ESC
  779 0000102C EBFFFFFE        BL               output_character
  780 00001030 E3A0205B        MOV              r2, #0x5B   ; [
  781 00001034 EBFFFFFE        BL               output_character
  782 00001038 E3A02032        MOV              r2, #0x32   ; 2
  783 0000103C EBFFFFFE        BL               output_character



ARM Macro Assembler    Page 28 


  784 00001040 E3A02044        MOV              r2, #0x44   ; D
  785 00001044 EBFFFFFE        BL               output_character
  786 00001048 E3A02020        MOV              r2, #0x20   ; space
  787 0000104C EBFFFFFE        BL               output_character
  788 00001050         ; Move cursor right 1, and write 1 space
  789 00001050 E3A0201B        MOV              r2, #0x1B   ; ESC
  790 00001054 EBFFFFFE        BL               output_character
  791 00001058 E3A0205B        MOV              r2, #0x5B   ; [
  792 0000105C EBFFFFFE        BL               output_character
  793 00001060 E3A02031        MOV              r2, #0x31   ; 1
  794 00001064 EBFFFFFE        BL               output_character
  795 00001068 E3A02043        MOV              r2, #0x43   ; C
  796 0000106C EBFFFFFE        BL               output_character
  797 00001070 E3A02020        MOV              r2, #0x20   ; space
  798 00001074 EBFFFFFE        BL               output_character
  799 00001078         ; Set SQUARE to show its already been cleared
  800 00001078 E3A02001        MOV              r2, #1
  801 0000107C E7832005        STR              r2, [r3, r5]
  802 00001080         ; Update SCORE
  803 00001080 E51F314C        LDR              r3, =SCORE
  804 00001084 E5932000        LDR              r2, [r3]
  805 00001088 E282200A        ADD              r2, r2, #10 ; Player gets 10 po
                                                            int for unexplored 
                                                            square
  806 0000108C E5832000        STR              r2, [r3]
  807 00001090         alreadyClrLR
  808 00001090 E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
  809 00001094 E12FFF1E        BX               lr
  810 00001098         
  811 00001098         clearLLR
  812 00001098 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
  813 0000109C E51F3130        LDR              r3, =SQUARE
  814 000010A0 E51F4128        LDR              r4, =Q_SQUARE
  815 000010A4 E5945000        LDR              r5, [r4]
  816 000010A8 E1A05105        MOV              r5, r5, LSL #2
  817 000010AC E7936005        LDR              r6, [r3, r5]
  818 000010B0 E3560000        CMP              r6, #0      ; 0 if not cleared
  819 000010B4 1A00001B        BNE              alreadyClrLLR
  820 000010B8         ; Move curosr left 3, and write 2 spaces
  821 000010B8 E3A0201B        MOV              r2, #0x1B   ; ESC
  822 000010BC EBFFFFFE        BL               output_character
  823 000010C0 E3A0205B        MOV              r2, #0x5B   ; [
  824 000010C4 EBFFFFFE        BL               output_character
  825 000010C8 E3A02033        MOV              r2, #0x33   ; 3
  826 000010CC EBFFFFFE        BL               output_character
  827 000010D0 E3A02044        MOV              r2, #0x44   ; D
  828 000010D4 EBFFFFFE        BL               output_character
  829 000010D8 E3A02020        MOV              r2, #0x20   ; space
  830 000010DC EBFFFFFE        BL               output_character
  831 000010E0 E3A02020        MOV              r2, #0x20   ; space
  832 000010E4 EBFFFFFE        BL               output_character
  833 000010E8         ; Move cursor right 1, and write 1 space
  834 000010E8 E3A0201B        MOV              r2, #0x1B   ; ESC
  835 000010EC EBFFFFFE        BL               output_character
  836 000010F0 E3A0205B        MOV              r2, #0x5B   ; [
  837 000010F4 EBFFFFFE        BL               output_character



ARM Macro Assembler    Page 29 


  838 000010F8 E3A02031        MOV              r2, #0x31   ; 1
  839 000010FC EBFFFFFE        BL               output_character
  840 00001100 E3A02043        MOV              r2, #0x43   ; C
  841 00001104 EBFFFFFE        BL               output_character
  842 00001108 E3A02020        MOV              r2, #0x20   ; space
  843 0000110C EBFFFFFE        BL               output_character
  844 00001110         ; Set SQUARE to show its already been cleared
  845 00001110 E3A02001        MOV              r2, #1
  846 00001114 E7832005        STR              r2, [r3, r5]
  847 00001118         ; Update SCORE
  848 00001118 E51F31E4        LDR              r3, =SCORE
  849 0000111C E5932000        LDR              r2, [r3]
  850 00001120 E282200A        ADD              r2, r2, #10 ; Player gets 10 po
                                                            int for unexplored 
                                                            square
  851 00001124 E5832000        STR              r2, [r3]
  852 00001128         alreadyClrLLR
  853 00001128 E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
  854 0000112C E12FFF1E        BX               lr
  855 00001130         
  856 00001130         clearLLL
  857 00001130 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
  858 00001134 E51F31C8        LDR              r3, =SQUARE
  859 00001138 E51F41C0        LDR              r4, =Q_SQUARE
  860 0000113C E5945000        LDR              r5, [r4]
  861 00001140 E1A05105        MOV              r5, r5, LSL #2
  862 00001144 E7936005        LDR              r6, [r3, r5]
  863 00001148 E3560000        CMP              r6, #0      ; 0 if not cleared
  864 0000114C 1A000013        BNE              alreadyClrLLL
  865 00001150         ; Move curosr left 4, and write 3 spaces
  866 00001150 E3A0201B        MOV              r2, #0x1B   ; ESC
  867 00001154 EBFFFFFE        BL               output_character
  868 00001158 E3A0205B        MOV              r2, #0x5B   ; [
  869 0000115C EBFFFFFE        BL               output_character
  870 00001160 E3A02034        MOV              r2, #0x34   ; 4
  871 00001164 EBFFFFFE        BL               output_character
  872 00001168 E3A02044        MOV              r2, #0x44   ; D
  873 0000116C EBFFFFFE        BL               output_character
  874 00001170 E3A02020        MOV              r2, #0x20   ; space
  875 00001174 EBFFFFFE        BL               output_character
  876 00001178 E3A02020        MOV              r2, #0x20   ; space
  877 0000117C EBFFFFFE        BL               output_character
  878 00001180 E3A02020        MOV              r2, #0x20   ; space
  879 00001184 EBFFFFFE        BL               output_character
  880 00001188         ; Set SQUARE to show its already been cleared
  881 00001188 E3A02001        MOV              r2, #1
  882 0000118C E7832005        STR              r2, [r3, r5]
  883 00001190         ; Update SCORE
  884 00001190 E51F325C        LDR              r3, =SCORE
  885 00001194 E5932000        LDR              r2, [r3]
  886 00001198 E282200A        ADD              r2, r2, #10 ; Player gets 10 po
                                                            int for unexplored 
                                                            square
  887 0000119C E5832000        STR              r2, [r3]
  888 000011A0         alreadyClrLLL
  889 000011A0 E8BD407C        LDMFD            SP!, {r2-r6, lr} 



ARM Macro Assembler    Page 30 


                                                            ; Restore registers
                                                            
  890 000011A4 E12FFF1E        BX               lr
  891 000011A8         
  892 000011A8         clearLRR
  893 000011A8 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
  894 000011AC E51F3240        LDR              r3, =SQUARE
  895 000011B0 E51F4238        LDR              r4, =Q_SQUARE
  896 000011B4 E5945000        LDR              r5, [r4]
  897 000011B8 E1A05105        MOV              r5, r5, LSL #2
  898 000011BC E7936005        LDR              r6, [r3, r5]
  899 000011C0 E3560000        CMP              r6, #0      ; 0 if not cleared
  900 000011C4 1A00001B        BNE              alreadyClrLRR
  901 000011C8         ; Move curosr left 2, and write 1 spaces
  902 000011C8 E3A0201B        MOV              r2, #0x1B   ; ESC
  903 000011CC EBFFFFFE        BL               output_character
  904 000011D0 E3A0205B        MOV              r2, #0x5B   ; [
  905 000011D4 EBFFFFFE        BL               output_character
  906 000011D8 E3A02032        MOV              r2, #0x32   ; 2
  907 000011DC EBFFFFFE        BL               output_character
  908 000011E0 E3A02044        MOV              r2, #0x44   ; D
  909 000011E4 EBFFFFFE        BL               output_character
  910 000011E8 E3A02020        MOV              r2, #0x20   ; space
  911 000011EC EBFFFFFE        BL               output_character
  912 000011F0         ; Move cursor right 1, and write 2 space
  913 000011F0 E3A0201B        MOV              r2, #0x1B   ; ESC
  914 000011F4 EBFFFFFE        BL               output_character
  915 000011F8 E3A0205B        MOV              r2, #0x5B   ; [
  916 000011FC EBFFFFFE        BL               output_character
  917 00001200 E3A02031        MOV              r2, #0x31   ; 1
  918 00001204 EBFFFFFE        BL               output_character
  919 00001208 E3A02043        MOV              r2, #0x43   ; C
  920 0000120C EBFFFFFE        BL               output_character
  921 00001210 E3A02020        MOV              r2, #0x20   ; space
  922 00001214 EBFFFFFE        BL               output_character
  923 00001218 E3A02020        MOV              r2, #0x20   ; space
  924 0000121C EBFFFFFE        BL               output_character
  925 00001220         ; Set SQUARE to show its already been cleared
  926 00001220 E3A02001        MOV              r2, #1
  927 00001224 E7832005        STR              r2, [r3, r5]
  928 00001228         ; Update SCORE
  929 00001228 E51F32F4        LDR              r3, =SCORE
  930 0000122C E5932000        LDR              r2, [r3]
  931 00001230 E282200A        ADD              r2, r2, #10 ; Player gets 10 po
                                                            int for unexplored 
                                                            square
  932 00001234 E5832000        STR              r2, [r3]
  933 00001238         alreadyClrLRR
  934 00001238 E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
  935 0000123C E12FFF1E        BX               lr
  936 00001240         
  937 00001240         updateScore
  938 00001240 E92D401C        STMFD            SP!, {r2-r4, lr} 
                                                            ; Save registers
  939 00001244 E3A0201B        MOV              r2, #0x1B   ; ESC
  940 00001248 EBFFFFFE        BL               output_character



ARM Macro Assembler    Page 31 


  941 0000124C E3A0205B        MOV              r2, #0x5B   ; [
  942 00001250 EBFFFFFE        BL               output_character
  943 00001254 E3A02001        MOV              r2, #1      ; move to line 1   
                                                             
  944 00001258 EBFFFFFE        BL               output_character
  945 0000125C E3A0203B        MOV              r2, #0x3B   ; ;
  946 00001260 EBFFFFFE        BL               output_character
  947 00001264 E3A02033        MOV              r2, #0x33   ; move to column 39
                                                               
  948 00001268 EBFFFFFE        BL               output_character
  949 0000126C E3A02039        MOV              r2, #0x39
  950 00001270 EBFFFFFE        BL               output_character
  951 00001274 E3A02066        MOV              r2, #0x66   ; f
  952 00001278 EBFFFFFE        BL               output_character
  953 0000127C         ; Redraw SCORE
  954 0000127C E51F3348        LDR              r3, =SCORE
  955 00001280 E5934000        LDR              r4, [r3]
  956 00001284 E3A01FFA        MOV              r1, #1000   ; divisor
  957 00001288 E1A00004        MOV              r0, r4      ; dividend
  958 0000128C EBFFFFFE        BL               div_and_mod
  959 00001290 E1A02000        MOV              r2, r0      ; quotient = thousa
                                                            nds digit
  960 00001294 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
  961 00001298 EBFFFFFE        BL               output_character
  962 0000129C E1A00001        MOV              r0, r1      ; Move remainder to
                                                             dividend
  963 000012A0 E3A01064        MOV              r1, #100    ; divisor
  964 000012A4 EBFFFFFE        BL               div_and_mod
  965 000012A8 E1A02000        MOV              r2, r0      ; quotient = hundre
                                                            ds digit
  966 000012AC E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
  967 000012B0 EBFFFFFE        BL               output_character
  968 000012B4 E1A00001        MOV              r0, r1      ; Move remainder to
                                                             dividend
  969 000012B8 E3A0100A        MOV              r1, #10     ; divisor
  970 000012BC EBFFFFFE        BL               div_and_mod
  971 000012C0 E1A02000        MOV              r2, r0      ; quotient = tens d
                                                            igit
  972 000012C4 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
  973 000012C8 EBFFFFFE        BL               output_character
  974 000012CC E1A02001        MOV              r2, r1      ; remiander = ones 
                                                            digit
  975 000012D0 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
  976 000012D4 EBFFFFFE        BL               output_character
  977 000012D8 E8BD401C        LDMFD            SP!, {r2-r4, lr} 
                                                            ; Restore registers
                                                            
  978 000012DC E12FFF1E        BX               lr
  979 000012E0         
  980 000012E0         
  981 000012E0         spawnEnemy
  982 000012E0 E92D401C        STMFD            SP!, {r2-r4, lr} 
                                                            ; Save registers
  983 000012E4         ; dont spawn an enemy if one is currently at square 2 or
                        3



ARM Macro Assembler    Page 32 


  984 000012E4 E51F23C8        LDR              r2, =BALL1_SQUARE
  985 000012E8 E5921000        LDR              r1, [r2]
  986 000012EC E3510002        CMP              r1, #2
  987 000012F0 0A000098        BEQ              noSpawn
  988 000012F4 E3510003        CMP              r1, #3
  989 000012F8 0A000096        BEQ              noSpawn
  990 000012FC E51F23DC        LDR              r2, =BALL2_SQUARE
  991 00001300 E5921000        LDR              r1, [r2]
  992 00001304 E3510002        CMP              r1, #2
  993 00001308 0A000092        BEQ              noSpawn
  994 0000130C E3510003        CMP              r1, #3
  995 00001310 0A000090        BEQ              noSpawn
  996 00001314 E51F23F0        LDR              r2, =SNAKEBALL_SQUARE
  997 00001318 E5921000        LDR              r1, [r2]
  998 0000131C E3510002        CMP              r1, #2
  999 00001320 0A00008C        BEQ              noSpawn
 1000 00001324 E3510003        CMP              r1, #3
 1001 00001328 0A00008A        BEQ              noSpawn
 1002 0000132C         ; 1 in 4 chance to spawn enemy (called every 0.5s)
 1003 0000132C E3A03004        MOV              r3, #4      ;8
 1004 00001330 EB000403        BL               randomNum
 1005 00001334 E3510000        CMP              r1, #0
 1006 00001338 1A000086        BNE              noSpawn
 1007 0000133C         ; otherwise spawn enemy
 1008 0000133C E51F3404        LDR              r3, =NUM_BALLS
 1009 00001340 E5932000        LDR              r2, [r3]
 1010 00001344 E2822001        ADD              r2, r2, #1  ; Increase number o
                                                            f balls by 1
 1011 00001348 E5832000        STR              r2, [r3]
 1012 0000134C         ; pick random number (r1=0 or r1=1) 
 1013 0000134C E3A03002        MOV              r3, #2
 1014 00001350 EB0003FB        BL               randomNum
 1015 00001354 E3510001        CMP              r1, #1
 1016 00001358 0A000041        BEQ              square3
 1017 0000135C         ; add ball to square 2 on pyramid
 1018 0000135C E3A0201B        MOV              r2, #0x1B   ; ESC
 1019 00001360 EBFFFFFE        BL               output_character
 1020 00001364 E3A0205B        MOV              r2, #0x5B   ; [
 1021 00001368 EBFFFFFE        BL               output_character
 1022 0000136C E3A02039        MOV              r2, #0x39   ; move to line 9   
                                                             
 1023 00001370 EBFFFFFE        BL               output_character
 1024 00001374 E3A0203B        MOV              r2, #0x3B   ; ;
 1025 00001378 EBFFFFFE        BL               output_character
 1026 0000137C E3A02031        MOV              r2, #0x31   ; move to column 13
                                                               
 1027 00001380 EBFFFFFE        BL               output_character
 1028 00001384 E3A02033        MOV              r2, #0x33
 1029 00001388 EBFFFFFE        BL               output_character
 1030 0000138C E3A02066        MOV              r2, #0x66   ; f
 1031 00001390 EBFFFFFE        BL               output_character
 1032 00001394         ;MOV r2, #0x6F    ; o
 1033 00001394         ;BL output_character
 1034 00001394         ; Check which ball to spawn
 1035 00001394 E51F246C        LDR              r2, =SNAKE_SQUARE
 1036 00001398 E5921000        LDR              r1, [r2]
 1037 0000139C E3510000        CMP              r1, #0      ; do not spawn snak
                                                            eball if snake spaw
                                                            ned



ARM Macro Assembler    Page 33 


 1038 000013A0 CA000013        BGT              checkBall1
 1039 000013A4 E51F2480        LDR              r2, =SNAKEBALL_SQUARE
 1040 000013A8 E5921000        LDR              r1, [r2]
 1041 000013AC E3510000        CMP              r1, #0      ; if snakeball squa
                                                            re is 0, chance to 
                                                            spawn
 1042 000013B0 1A00000F        BNE              checkBall1
 1043 000013B4         ; 1-8 chance for snake ball
 1044 000013B4 E3A03002        MOV              r3, #2      ;;;;;;;;;8;;;;;;;;;
                                                            ;;;;;;;;;;;;;;;;;;;
                                                            ;;;
 1045 000013B8 EB0003E1        BL               randomNum
 1046 000013BC E3510000        CMP              r1, #0
 1047 000013C0 1A00000B        BNE              checkBall1
 1048 000013C4         ; Set ball x and y position
 1049 000013C4 E3A02043        MOV              r2, #0x43   ; C
 1050 000013C8 EBFFFFFE        BL               output_character
 1051 000013CC E51F3450        LDR              r3, =SNAKEBALL_X_POSITION
 1052 000013D0 E3A0200D        MOV              r2, #13
 1053 000013D4 E5832000        STR              r2, [r3]
 1054 000013D8 E59F3308        LDR              r3, =SNAKEBALL_Y_POSITION
 1055 000013DC E3A02009        MOV              r2, #9
 1056 000013E0 E5832000        STR              r2, [r3]
 1057 000013E4 E51F24C0        LDR              r2, =SNAKEBALL_SQUARE 
                                                            ; ball's square = 
 1058 000013E8 E3A01002        MOV              r1, #2
 1059 000013EC E5C21000        STRB             r1, [r2]
 1060 000013F0 EB000058        BL               square2
 1061 000013F4         checkBall1
 1062 000013F4 E51F24D8        LDR              r2, =BALL1_SQUARE
 1063 000013F8 E5921000        LDR              r1, [r2]
 1064 000013FC E3510000        CMP              r1, #0      ; if ball1 square i
                                                            s 0, spawn ball1
 1065 00001400 1A00000B        BNE              spawnBall2at2 ; otherwise spawn
                                                             ball2
 1066 00001404         ; Set ball x and y position
 1067 00001404 E3A0206F        MOV              r2, #0x6F   ; o
 1068 00001408 EBFFFFFE        BL               output_character
 1069 0000140C E59F32D8        LDR              r3, =BALL1_X_POSITION
 1070 00001410 E3A0200D        MOV              r2, #13
 1071 00001414 E5832000        STR              r2, [r3]
 1072 00001418 E59F32D0        LDR              r3, =BALL1_Y_POSITION
 1073 0000141C E3A02009        MOV              r2, #9
 1074 00001420 E5832000        STR              r2, [r3]
 1075 00001424 E51F2508        LDR              r2, =BALL1_SQUARE 
                                                            ; ball's square = 
 1076 00001428 E3A01002        MOV              r1, #2
 1077 0000142C E5C21000        STRB             r1, [r2]
 1078 00001430 EB000048        BL               square2
 1079 00001434         spawnBall2at2
 1080 00001434 E3A0206F        MOV              r2, #0x6F   ; o
 1081 00001438 EBFFFFFE        BL               output_character
 1082 0000143C E51F34BC        LDR              r3, =BALL2_X_POSITION
 1083 00001440 E3A0200D        MOV              r2, #13
 1084 00001444 E5832000        STR              r2, [r3]
 1085 00001448 E59F32A4        LDR              r3, =BALL2_Y_POSITION
 1086 0000144C E3A02009        MOV              r2, #9
 1087 00001450 E5832000        STR              r2, [r3]
 1088 00001454 E51F2534        LDR              r2, =BALL2_SQUARE 



ARM Macro Assembler    Page 34 


                                                            ; ball's square = 
 1089 00001458 E3A01002        MOV              r1, #2
 1090 0000145C E5C21000        STRB             r1, [r2]
 1091 00001460 EB00003C        BL               square2
 1092 00001464         square3
 1093 00001464         ; add ball to square 3 on pyramid
 1094 00001464 E3A0201B        MOV              r2, #0x1B   ; ESC
 1095 00001468 EBFFFFFE        BL               output_character
 1096 0000146C E3A0205B        MOV              r2, #0x5B   ; [
 1097 00001470 EBFFFFFE        BL               output_character
 1098 00001474 E3A02037        MOV              r2, #0x37   ; move to line 7   
                                                             
 1099 00001478 EBFFFFFE        BL               output_character
 1100 0000147C E3A0203B        MOV              r2, #0x3B   ; ;
 1101 00001480 EBFFFFFE        BL               output_character
 1102 00001484 E3A02032        MOV              r2, #0x32   ; move to column 20
                                                               
 1103 00001488 EBFFFFFE        BL               output_character
 1104 0000148C E3A02030        MOV              r2, #0x30
 1105 00001490 EBFFFFFE        BL               output_character
 1106 00001494 E3A02066        MOV              r2, #0x66   ; f
 1107 00001498 EBFFFFFE        BL               output_character
 1108 0000149C         ;MOV r2, #0x6F    ; o
 1109 0000149C         ;BL output_character
 1110 0000149C         ; Check which ball to spawn
 1111 0000149C E51F2578        LDR              r2, =SNAKEBALL_SQUARE
 1112 000014A0 E5921000        LDR              r1, [r2]
 1113 000014A4 E3510000        CMP              r1, #0      ; if snakeball squa
                                                            re is 0, chance to 
                                                            spawn
 1114 000014A8 1A00000F        BNE              checkBall1Sqr3
 1115 000014AC         ; 1-8 chance for snake ball
 1116 000014AC E3A03008        MOV              r3, #8
 1117 000014B0 EB0003A3        BL               randomNum
 1118 000014B4 E3510000        CMP              r1, #0
 1119 000014B8 1A00000B        BNE              checkBall1Sqr3
 1120 000014BC         ; Set ball x and y position
 1121 000014BC E3A02043        MOV              r2, #0x43   ; C
 1122 000014C0 EBFFFFFE        BL               output_character
 1123 000014C4 E51F3548        LDR              r3, =SNAKEBALL_X_POSITION
 1124 000014C8 E3A02014        MOV              r2, #20
 1125 000014CC E5832000        STR              r2, [r3]
 1126 000014D0 E59F3210        LDR              r3, =SNAKEBALL_Y_POSITION
 1127 000014D4 E3A02007        MOV              r2, #7
 1128 000014D8 E5832000        STR              r2, [r3]
 1129 000014DC E51F25B8        LDR              r2, =SNAKEBALL_SQUARE 
                                                            ; ball's square = 
 1130 000014E0 E3A01003        MOV              r1, #3
 1131 000014E4 E5C21000        STRB             r1, [r2]
 1132 000014E8 EB00001A        BL               square2
 1133 000014EC         checkBall1Sqr3
 1134 000014EC E51F25D0        LDR              r2, =BALL1_SQUARE
 1135 000014F0 E5921000        LDR              r1, [r2]
 1136 000014F4 E3510000        CMP              r1, #0      ; if ball1 square i
                                                            s 0, spawn ball1
 1137 000014F8 1A00000B        BNE              spawnBall2at3 ; otherwise spawn
                                                             ball2
 1138 000014FC         ; Set ball x and y position
 1139 000014FC E3A0206F        MOV              r2, #0x6F   ; o



ARM Macro Assembler    Page 35 


 1140 00001500 EBFFFFFE        BL               output_character
 1141 00001504 E59F31E0        LDR              r3, =BALL1_X_POSITION
 1142 00001508 E3A02014        MOV              r2, #20
 1143 0000150C E5832000        STR              r2, [r3]
 1144 00001510 E59F31D8        LDR              r3, =BALL1_Y_POSITION
 1145 00001514 E3A02007        MOV              r2, #7
 1146 00001518 E5832000        STR              r2, [r3]
 1147 0000151C E51F2600        LDR              r2, =BALL1_SQUARE
 1148 00001520 E3A01003        MOV              r1, #3
 1149 00001524 E5C21000        STRB             r1, [r2]
 1150 00001528 EB00000A        BL               square2
 1151 0000152C         spawnBall2at3
 1152 0000152C E3A0206F        MOV              r2, #0x6F   ; o
 1153 00001530 EBFFFFFE        BL               output_character
 1154 00001534 E51F35B4        LDR              r3, =BALL2_X_POSITION
 1155 00001538 E3A02014        MOV              r2, #20
 1156 0000153C E5832000        STR              r2, [r3]
 1157 00001540 E59F31AC        LDR              r3, =BALL2_Y_POSITION
 1158 00001544 E3A02007        MOV              r2, #7
 1159 00001548 E5832000        STR              r2, [r3]
 1160 0000154C E51F262C        LDR              r2, =BALL2_SQUARE 
                                                            ; ball's square = 
 1161 00001550 E3A01003        MOV              r1, #3
 1162 00001554 E5C21000        STRB             r1, [r2]
 1163 00001558         noSpawn
 1164 00001558         square2
 1165 00001558 E8BD401C        LDMFD            SP!, {r2-r4, lr} 
                                                            ; Restore registers
                                                            
 1166 0000155C E12FFF1E        BX               lr
 1167 00001560         
 1168 00001560         spawnSnake
 1169 00001560 E92D40FF        STMFD            SP!, {r0-r7, lr} 
                                                            ; Save registers
 1170 00001564 E59F618C        LDR              r6, =SNAKE_X_POSITION ; r6 = sn
                                                            ake x position addr
                                                            ess
 1171 00001568 E5963000        LDR              r3, [r6]    ; r3 = snake x posi
                                                            tion
 1172 0000156C E59F7188        LDR              r7, =SNAKE_Y_POSITION ; r7 = sn
                                                            ake y position addr
                                                            ess
 1173 00001570 E5974000        LDR              r4, [r7]
 1174 00001574         ; draw a S
 1175 00001574 E3A0201B        MOV              r2, #0x1B   ; ESC
 1176 00001578 EBFFFFFE        BL               output_character
 1177 0000157C E3A0205B        MOV              r2, #0x5B   ; [
 1178 00001580 EBFFFFFE        BL               output_character
 1179 00001584 E3A0100A        MOV              r1, #10     ; divisor
 1180 00001588 E1A00004        MOV              r0, r4      ; dividend
 1181 0000158C EBFFFFFE        BL               div_and_mod
 1182 00001590 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 1183 00001594 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1184 00001598 EBFFFFFE        BL               output_character
 1185 0000159C E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 1186 000015A0 E2822030        ADD              r2, r2, #0x30 



ARM Macro Assembler    Page 36 


                                                            ; convert to ascii
 1187 000015A4 EBFFFFFE        BL               output_character
 1188 000015A8 E3A0203B        MOV              r2, #0x3B   ; ;
 1189 000015AC EBFFFFFE        BL               output_character
 1190 000015B0 E3A0100A        MOV              r1, #10     ; divisor
 1191 000015B4 E1A00003        MOV              r0, r3      ; dividend
 1192 000015B8 EBFFFFFE        BL               div_and_mod
 1193 000015BC E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 1194 000015C0 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1195 000015C4 EBFFFFFE        BL               output_character
 1196 000015C8 E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 1197 000015CC E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1198 000015D0 EBFFFFFE        BL               output_character
 1199 000015D4 E3A02066        MOV              r2, #0x66   ; f
 1200 000015D8 EBFFFFFE        BL               output_character
 1201 000015DC E3A02053        MOV              r2, #0x53   ; S
 1202 000015E0 EBFFFFFE        BL               output_character
 1203 000015E4 E8BD40FF        LDMFD            SP!, {r0-r7, lr} 
                                                            ; Restore registers
                                                            
 1204 000015E8 E12FFF1E        BX               lr
 1205 000015EC         
 1206 000015EC         
 1207 000015EC         removeSnake
 1208 000015EC E92D403F        STMFD            SP!, {r0-r5, lr} 
                                                            ; Save registers
 1209 000015F0 E59F4100        LDR              r4, =SNAKE_X_POSITION
 1210 000015F4 E59F5100        LDR              r5, =SNAKE_Y_POSITION
 1211 000015F8 E3A0201B        MOV              r2, #0x1B   ; ESC
 1212 000015FC EBFFFFFE        BL               output_character
 1213 00001600 E3A0205B        MOV              r2, #0x5B   ; [
 1214 00001604 EBFFFFFE        BL               output_character
 1215 00001608 E3A0100A        MOV              r1, #10     ; divisor
 1216 0000160C E5950000        LDR              r0, [r5]    ; dividend
 1217 00001610 EBFFFFFE        BL               div_and_mod
 1218 00001614 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 1219 00001618 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1220 0000161C EBFFFFFE        BL               output_character
 1221 00001620 E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 1222 00001624 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1223 00001628 EBFFFFFE        BL               output_character
 1224 0000162C E3A0203B        MOV              r2, #0x3B   ; ;
 1225 00001630 EBFFFFFE        BL               output_character
 1226 00001634 E3A0100A        MOV              r1, #10     ; divisor
 1227 00001638 E5940000        LDR              r0, [r4]    ; dividend
 1228 0000163C EBFFFFFE        BL               div_and_mod
 1229 00001640 E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 1230 00001644 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1231 00001648 EBFFFFFE        BL               output_character



ARM Macro Assembler    Page 37 


 1232 0000164C E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 1233 00001650 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1234 00001654 EBFFFFFE        BL               output_character
 1235 00001658 E3A02066        MOV              r2, #0x66   ; f
 1236 0000165C EBFFFFFE        BL               output_character
 1237 00001660         sOnPyramid
 1238 00001660 E51F06E8        LDR              r0, =Q_SQUARE
 1239 00001664 E5901000        LDR              r1, [r0]    ; r1 = q x pos
 1240 00001668 E51F4740        LDR              r4, =SNAKE_SQUARE
 1241 0000166C E5942000        LDR              r2, [r4]    ; r2 = snake x pos
 1242 00001670 E1510002        CMP              r1, r2
 1243 00001674 0A00000C        BEQ              qOnSquareS
 1244 00001678         ; Check if square has been cleared
 1245 00001678 E51F370C        LDR              r3, =SQUARE
 1246 0000167C E51F4754        LDR              r4, =SNAKE_SQUARE
 1247 00001680 E5945000        LDR              r5, [r4]
 1248 00001684 E1A05105        MOV              r5, r5, LSL #2
 1249 00001688 E7936005        LDR              r6, [r3, r5]
 1250 0000168C E3560000        CMP              r6, #0      ; 0 if not cleared
 1251 00001690 1A000002        BNE              alreadyClrS
 1252 00001694 E3A0202F        MOV              r2, #0x2F   ; forward slash
 1253 00001698 EBFFFFFE        BL               output_character
 1254 0000169C EA00000E        B                allDoneS
 1255 000016A0         alreadyClrS
 1256 000016A0 E3A02020        MOV              r2, #0x20   ; space
 1257 000016A4 EBFFFFFE        BL               output_character
 1258 000016A8 EA0002D9        b                allDone
 1259 000016AC         qOnSquareS
 1260 000016AC E3A02051        MOV              r2, #0x51   ; Q
 1261 000016B0 EBFFFFFE        BL               output_character
 1262 000016B4         ; set snake to no square
 1263 000016B4 E51F078C        LDR              r0, =SNAKE_SQUARE
 1264 000016B8 E3A01000        MOV              r1, #0
 1265 000016BC E5801000        STR              r1, [r0]
 1266 000016C0         ; Remove/Reset ball and keep Q displayed on the square.
 1267 000016C0 E51F4788        LDR              r4, =NUM_BALLS ; number of ball
                                                            s -= 1
 1268 000016C4 E5945000        LDR              r5, [r4]
 1269 000016C8 E2455001        SUB              r5, r5, #1
 1270 000016CC E5845000        STR              r5, [r4]
 1271 000016D0         ; Reset 2s spawn timer to 0 so new ball doesnt spawn rig
                       ht away
 1272 000016D0 E51F47A0        LDR              r4, =NUM_HALF_SECS
 1273 000016D4 E3A05000        MOV              r5, #0
 1274 000016D8 E5845000        STR              r5, [r4]
 1275 000016DC         allDoneS
 1276 000016DC EB0004F1        BL               interrupt_init
 1277 000016E0 E8BD403F        LDMFD            SP!, {r0-r5, lr} 
                                                            ; Restore registers
                                                            
 1278 000016E4 E12FFF1E        BX               lr
 1279 000016E8 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         LTORG



ARM Macro Assembler    Page 38 


 1280 00001700         
 1281 00001700         moveSnake
 1282 00001700 E92D40FF        STMFD            SP!, {r0-r7, lr} 
                                                            ; Save registers
 1283 00001704 EBFFFFB8        BL               removeSnake ; remove old S posi
                                                            tion
 1284 00001708         ;Check player's Q positon 
 1285 00001708 E51F0790        LDR              r0, =Q_SQUARE
 1286 0000170C E5901000        LDR              r1, [r0]    ; r1 = Q Square
 1287 00001710 E51F07CC        LDR              r0, =Q_X_POSITION
 1288 00001714 E5908000        LDR              r8, [r0]    ; r8 = Q x pos
 1289 00001718 E51F07D0        LDR              r0, =Q_Y_POSITION
 1290 0000171C E5909000        LDR              r9, [r0]    ; r9 = Q y pos
 1291 00001720 E51F57F8        LDR              r5, =SNAKE_SQUARE ; r5 = snake 
                                                            square address
 1292 00001724 E5952000        LDR              r2, [r5]    ; r2 = Snake Square
                                                            
 1293 00001728 E51F6038        LDR              r6, =SNAKE_X_POSITION ; r6 = sn
                                                            ake x position addr
                                                            ess
 1294 0000172C E5963000        LDR              r3, [r6]    ; r3 = snake x posi
                                                            tion
 1295 00001730 E51F703C        LDR              r7, =SNAKE_Y_POSITION ; r7 = sn
                                                            ake y position addr
                                                            ess
 1296 00001734 E5974000        LDR              r4, [r7]    ; r4 = snake y posi
                                                            tion
 1297 00001738 E3520010        CMP              r2, #16     ; Can only move up 
                                                            form sq 16
 1298 0000173C 02833002        ADDEQ            r3, r3, #2  ; new x = x+2
 1299 00001740 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1300 00001744 0A000150        BEQ              saveSnakePosition
 1301 00001748 E3520015        CMP              r2, #21     ; Can only move lef
                                                            t form sq 21 
 1302 0000174C 02433005        SUBEQ            r3, r3, #5  ; new x = x-5
 1303 00001750 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1304 00001754 0A00014C        BEQ              saveSnakePosition
 1305 00001758 E3520011        CMP              r2, #17
 1306 0000175C 1A00000A        BNE              square18
 1307 00001760 E351000B        CMP              r1, #11
 1308 00001764 02433005        SUBEQ            r3, r3, #5  ; new x = x-5  left
                                                            
 1309 00001768 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1310 0000176C 0A000146        BEQ              saveSnakePosition
 1311 00001770 E3510010        CMP              r1, #16
 1312 00001774 02433005        SUBEQ            r3, r3, #5  ; new x = x-5 left
 1313 00001778 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1314 0000177C 0A000142        BEQ              saveSnakePosition
 1315 00001780 E2833002        ADD              r3, r3, #2  ; new x = x+2  up
 1316 00001784 E2444004        SUB              r4, r4, #4  ; new y = y-4
 1317 00001788 EA00013F        B                saveSnakePosition
 1318 0000178C         square18
 1319 0000178C E3520012        CMP              r2, #18
 1320 00001790 1A000012        BNE              square19
 1321 00001794 E3510001        CMP              r1, #1
 1322 00001798 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1323 0000179C 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1324 000017A0 0A000139        BEQ              saveSnakePosition
 1325 000017A4 E3510002        CMP              r1, #2



ARM Macro Assembler    Page 39 


 1326 000017A8 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1327 000017AC 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1328 000017B0 0A000135        BEQ              saveSnakePosition
 1329 000017B4 E3510003        CMP              r1, #3
 1330 000017B8 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1331 000017BC 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1332 000017C0 0A000131        BEQ              saveSnakePosition
 1333 000017C4 E3580011        CMP              r8, #17
 1334 000017C8 B2433005        SUBLT            r3, r3, #5  ; new x = x-5 left
 1335 000017CC B2444002        SUBLT            r4, r4, #2  ; new y = y-2
 1336 000017D0 BA00012D        BLT              saveSnakePosition
 1337 000017D4 E2833002        ADD              r3, r3, #2  ; new x = x+2  up
 1338 000017D8 E2444004        SUB              r4, r4, #4  ; new y = y-4
 1339 000017DC EA00012A        B                saveSnakePosition
 1340 000017E0         square19
 1341 000017E0 E3520013        CMP              r2, #19
 1342 000017E4 1A000006        BNE              square20
 1343 000017E8 E3580018        CMP              r8, #24
 1344 000017EC B2433005        SUBLT            r3, r3, #5  ; new x = x-5 left
 1345 000017F0 B2444002        SUBLT            r4, r4, #2  ; new y = y-2
 1346 000017F4 BA000124        BLT              saveSnakePosition
 1347 000017F8 E2833002        ADD              r3, r3, #2  ; new x = x+2  up
 1348 000017FC E2444004        SUB              r4, r4, #4  ; new y = y-4
 1349 00001800 EA000121        B                saveSnakePosition
 1350 00001804         square20
 1351 00001804 E3520014        CMP              r2, #20
 1352 00001808 1A00000A        BNE              square11
 1353 0000180C E351000F        CMP              r1, #15
 1354 00001810 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1355 00001814 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1356 00001818 0A00011B        BEQ              saveSnakePosition
 1357 0000181C E3510015        CMP              r1, #21
 1358 00001820 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1359 00001824 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1360 00001828 0A000117        BEQ              saveSnakePosition
 1361 0000182C E2433005        SUB              r3, r3, #5  ; new x = x-5 left
 1362 00001830 E2444002        SUB              r4, r4, #2  ; new y = y-2
 1363 00001834 EA000114        B                saveSnakePosition
 1364 00001838         square11
 1365 00001838 E3520014        CMP              r2, #20
 1366 0000183C 1A000006        BNE              square12
 1367 00001840 E3590010        CMP              r9, #16     ; if q y > 16
 1368 00001844 B2833002        ADDLT            r3, r3, #2  ; new x = x+2  up
 1369 00001848 B2444004        SUBLT            r4, r4, #4  ; new y = y-4
 1370 0000184C BA00010E        BLT              saveSnakePosition
 1371 00001850 E2833005        ADD              r3, r3, #5  ; new x = x+5 right
                                                            
 1372 00001854 E2844002        ADD              r4, r4, #2  ; new y = y+2
 1373 00001858 EA00010B        B                saveSnakePosition
 1374 0000185C         square12
 1375 0000185C E352000C        CMP              r2, #12
 1376 00001860 1A00000E        BNE              square13
 1377 00001864 E3510011        CMP              r1, #17
 1378 00001868 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1379 0000186C 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1380 00001870 0AFFFCB3        BEQ              savePosition
 1381 00001874 E3510008        CMP              r1, #8
 1382 00001878 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up



ARM Macro Assembler    Page 40 


 1383 0000187C 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1384 00001880 0A000101        BEQ              saveSnakePosition
 1385 00001884 E1530008        CMP              r3, r8
 1386 00001888 C2433005        SUBGT            r3, r3, #5  ; new x = x-5 left
 1387 0000188C C2444002        SUBGT            r4, r4, #2  ; new y = y-2
 1388 00001890 CA0000FD        BGT              saveSnakePosition
 1389 00001894 B2833005        ADDLT            r3, r3, #5  ; new x = x+5 right
                                                            
 1390 00001898 B2844002        ADDLT            r4, r4, #2  ; new y = y+2
 1391 0000189C BA0000FA        BLT              saveSnakePosition
 1392 000018A0         square13
 1393 000018A0 E352000D        CMP              r2, #13
 1394 000018A4 1A00000E        BNE              square14
 1395 000018A8 E3510012        CMP              r1, #18
 1396 000018AC 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1397 000018B0 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1398 000018B4 0AFFFCA2        BEQ              savePosition
 1399 000018B8 E3510009        CMP              r1, #9
 1400 000018BC 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1401 000018C0 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1402 000018C4 0A0000F0        BEQ              saveSnakePosition
 1403 000018C8 E1530008        CMP              r3, r8
 1404 000018CC C2433005        SUBGT            r3, r3, #5  ; new x = x-5 left
 1405 000018D0 C2444002        SUBGT            r4, r4, #2  ; new y = y-2
 1406 000018D4 CA0000EC        BGT              saveSnakePosition
 1407 000018D8 B2833005        ADDLT            r3, r3, #5  ; new x = x+5 right
                                                            
 1408 000018DC B2844002        ADDLT            r4, r4, #2  ; new y = y+2
 1409 000018E0 BA0000E9        BLT              saveSnakePosition
 1410 000018E4         square14
 1411 000018E4 E352000E        CMP              r2, #14
 1412 000018E8 1A00000E        BNE              square15
 1413 000018EC E3510013        CMP              r1, #19
 1414 000018F0 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1415 000018F4 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1416 000018F8 0AFFFC91        BEQ              savePosition
 1417 000018FC E351000A        CMP              r1, #10
 1418 00001900 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1419 00001904 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1420 00001908 0A0000DF        BEQ              saveSnakePosition
 1421 0000190C E1530008        CMP              r3, r8
 1422 00001910 C2433005        SUBGT            r3, r3, #5  ; new x = x-5 left
 1423 00001914 C2444002        SUBGT            r4, r4, #2  ; new y = y-2
 1424 00001918 CA0000DB        BGT              saveSnakePosition
 1425 0000191C B2833005        ADDLT            r3, r3, #5  ; new x = x+5 right
                                                            
 1426 00001920 B2844002        ADDLT            r4, r4, #2  ; new y = y+2
 1427 00001924 BA0000D8        BLT              saveSnakePosition
 1428 00001928         square15
 1429 00001928 E352000F        CMP              r2, #15
 1430 0000192C 1A00000A        BNE              square7
 1431 00001930 E3510014        CMP              r1, #20
 1432 00001934 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1433 00001938 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1434 0000193C 0AFFFC80        BEQ              savePosition
 1435 00001940 E3510015        CMP              r1, #21



ARM Macro Assembler    Page 41 


 1436 00001944 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1437 00001948 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1438 0000194C 0A0000CE        BEQ              saveSnakePosition
 1439 00001950 E2433005        SUB              r3, r3, #5  ; new x = x-5 left
 1440 00001954 E2444002        SUB              r4, r4, #2  ; new y = y-2
 1441 00001958 EA0000CB        B                saveSnakePosition
 1442 0000195C         square7
 1443 0000195C E3520007        CMP              r2, #7
 1444 00001960 1A00000E        BNE              square8
 1445 00001964 E351000B        CMP              r1, #11
 1446 00001968 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1447 0000196C 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1448 00001970 0AFFFC73        BEQ              savePosition
 1449 00001974 E3510004        CMP              r1, #4
 1450 00001978 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1451 0000197C 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1452 00001980 0A0000C1        BEQ              saveSnakePosition
 1453 00001984 E351000C        CMP              r1, #12
 1454 00001988 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1455 0000198C 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1456 00001990 0A0000BD        BEQ              saveSnakePosition
 1457 00001994 E2833005        ADD              r3, r3, #5  ; new x = x+5  righ
                                                            t
 1458 00001998 E2844002        ADD              r4, r4, #2  ; new y = y+2
 1459 0000199C EA0000BA        B                saveSnakePosition
 1460 000019A0         square8
 1461 000019A0 E3520008        CMP              r2, #8
 1462 000019A4 1A000016        BNE              square9
 1463 000019A8 E351000C        CMP              r1, #12
 1464 000019AC 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1465 000019B0 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1466 000019B4 0AFFFC62        BEQ              savePosition
 1467 000019B8 E3510005        CMP              r1, #5
 1468 000019BC 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1469 000019C0 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1470 000019C4 0A0000B0        BEQ              saveSnakePosition
 1471 000019C8 E351000D        CMP              r1, #13
 1472 000019CC 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1473 000019D0 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1474 000019D4 0A0000AC        BEQ              saveSnakePosition
 1475 000019D8 E3510004        CMP              r1, #4
 1476 000019DC 02433005        SUBEQ            r3, r3, #5  ; new x = x-5 left
 1477 000019E0 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1478 000019E4 0A0000A8        BEQ              saveSnakePosition
 1479 000019E8 E1530008        CMP              r3, r8
 1480 000019EC C2433005        SUBGT            r3, r3, #5  ; new x = x-5 left
 1481 000019F0 C2444002        SUBGT            r4, r4, #2  ; new y = y-2
 1482 000019F4 CA0000A4        BGT              saveSnakePosition
 1483 000019F8 B2833005        ADDLT            r3, r3, #5  ; new x = x+5 right
                                                            
 1484 000019FC B2844002        ADDLT            r4, r4, #2  ; new y = y+2
 1485 00001A00 BA0000A1        BLT              saveSnakePosition
 1486 00001A04         square9
 1487 00001A04 E3520009        CMP              r2, #9



ARM Macro Assembler    Page 42 


 1488 00001A08 1A000016        BNE              square10
 1489 00001A0C E351000D        CMP              r1, #13
 1490 00001A10 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1491 00001A14 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1492 00001A18 0AFFFC49        BEQ              savePosition
 1493 00001A1C E3510006        CMP              r1, #6
 1494 00001A20 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1495 00001A24 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1496 00001A28 0A000097        BEQ              saveSnakePosition
 1497 00001A2C E351000E        CMP              r1, #14
 1498 00001A30 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1499 00001A34 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1500 00001A38 0A000093        BEQ              saveSnakePosition
 1501 00001A3C E3510005        CMP              r1, #5
 1502 00001A40 02433005        SUBEQ            r3, r3, #5  ; new x = x-5 left
 1503 00001A44 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1504 00001A48 0A00008F        BEQ              saveSnakePosition
 1505 00001A4C E1530008        CMP              r3, r8
 1506 00001A50 C2433005        SUBGT            r3, r3, #5  ; new x = x-5 left
 1507 00001A54 C2444002        SUBGT            r4, r4, #2  ; new y = y-2
 1508 00001A58 CA00008B        BGT              saveSnakePosition
 1509 00001A5C B2833005        ADDLT            r3, r3, #5  ; new x = x+5 right
                                                            
 1510 00001A60 B2844002        ADDLT            r4, r4, #2  ; new y = y+2
 1511 00001A64 BA000088        BLT              saveSnakePosition
 1512 00001A68         square10
 1513 00001A68 E352000A        CMP              r2, #10
 1514 00001A6C 1A000012        BNE              square4
 1515 00001A70 E351000E        CMP              r1, #14
 1516 00001A74 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1517 00001A78 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1518 00001A7C 0AFFFC30        BEQ              savePosition
 1519 00001A80 E351000F        CMP              r1, #15
 1520 00001A84 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1521 00001A88 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1522 00001A8C 0A00007E        BEQ              saveSnakePosition
 1523 00001A90 E3510006        CMP              r1, #6
 1524 00001A94 02433005        SUBEQ            r3, r3, #5  ; new x = x-5 left
 1525 00001A98 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1526 00001A9C 0A00007A        BEQ              saveSnakePosition
 1527 00001AA0 E1530008        CMP              r3, r8
 1528 00001AA4 C2433005        SUBGT            r3, r3, #5  ; new x = x-5 left
 1529 00001AA8 C2444002        SUBGT            r4, r4, #2  ; new y = y-2
 1530 00001AAC CA000076        BGT              saveSnakePosition
 1531 00001AB0 B2833005        ADDLT            r3, r3, #5  ; new x = x+5 right
                                                            
 1532 00001AB4 B2844002        ADDLT            r4, r4, #2  ; new y = y+2
 1533 00001AB8 BA000073        BLT              saveSnakePosition
 1534 00001ABC         square4
 1535 00001ABC E3520004        CMP              r2, #4
 1536 00001AC0 1A00000E        BNE              square5
 1537 00001AC4 E3510007        CMP              r1, #7
 1538 00001AC8 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1539 00001ACC 02844004        ADDEQ            r4, r4, #4  ; new y = y+4



ARM Macro Assembler    Page 43 


 1540 00001AD0 0AFFFC1B        BEQ              savePosition
 1541 00001AD4 E3510002        CMP              r1, #2
 1542 00001AD8 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1543 00001ADC 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1544 00001AE0 0A000069        BEQ              saveSnakePosition
 1545 00001AE4 E3510001        CMP              r1, #1
 1546 00001AE8 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1547 00001AEC 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1548 00001AF0 0A000065        BEQ              saveSnakePosition
 1549 00001AF4 E2833005        ADD              r3, r3, #5  ; new x = x+5 right
                                                            
 1550 00001AF8 E2844002        ADD              r4, r4, #2  ; new y = y+2
 1551 00001AFC EA000062        B                saveSnakePosition
 1552 00001B00         square5
 1553 00001B00 E3520005        CMP              r2, #5
 1554 00001B04 1A00001E        BNE              square6
 1555 00001B08 E3510006        CMP              r1, #6
 1556 00001B0C 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1557 00001B10 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1558 00001B14 0AFFFC0A        BEQ              savePosition
 1559 00001B18 E3510003        CMP              r1, #3
 1560 00001B1C 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1561 00001B20 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1562 00001B24 0A000058        BEQ              saveSnakePosition
 1563 00001B28 E3510001        CMP              r1, #1
 1564 00001B2C 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1565 00001B30 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1566 00001B34 0A000054        BEQ              saveSnakePosition
 1567 00001B38 E3510009        CMP              r1, #9
 1568 00001B3C 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1569 00001B40 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1570 00001B44 0A000050        BEQ              saveSnakePosition
 1571 00001B48 E3510006        CMP              r1, #6
 1572 00001B4C 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1573 00001B50 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1574 00001B54 0A00004C        BEQ              saveSnakePosition
 1575 00001B58 E3510002        CMP              r1, #2
 1576 00001B5C 02433005        SUBEQ            r3, r3, #5  ; new x = x-5 left
 1577 00001B60 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1578 00001B64 0A000048        BEQ              saveSnakePosition
 1579 00001B68 E1530008        CMP              r3, r8
 1580 00001B6C C2433005        SUBGT            r3, r3, #5  ; new x = x-5 left
 1581 00001B70 C2444002        SUBGT            r4, r4, #2  ; new y = y-2
 1582 00001B74 CA000044        BGT              saveSnakePosition
 1583 00001B78 B2833005        ADDLT            r3, r3, #5  ; new x = x+5 right
                                                            
 1584 00001B7C B2844002        ADDLT            r4, r4, #2  ; new y = y+2
 1585 00001B80 BA000041        BLT              saveSnakePosition
 1586 00001B84         square6
 1587 00001B84 E3520006        CMP              r2, #6
 1588 00001B88 1A000012        BNE              square2_
 1589 00001B8C E3510009        CMP              r1, #9
 1590 00001B90 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1591 00001B94 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1592 00001B98 0AFFFBE9        BEQ              savePosition



ARM Macro Assembler    Page 44 


 1593 00001B9C E351000A        CMP              r1, #10
 1594 00001BA0 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1595 00001BA4 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1596 00001BA8 0A000037        BEQ              saveSnakePosition
 1597 00001BAC E3510003        CMP              r1, #3
 1598 00001BB0 02433005        SUBEQ            r3, r3, #5  ; new x = x-5 left
 1599 00001BB4 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1600 00001BB8 0A000033        BEQ              saveSnakePosition
 1601 00001BBC E1530008        CMP              r3, r8
 1602 00001BC0 C2433005        SUBGT            r3, r3, #5  ; new x = x-5 left
 1603 00001BC4 C2444002        SUBGT            r4, r4, #2  ; new y = y-2
 1604 00001BC8 CA00002F        BGT              saveSnakePosition
 1605 00001BCC B2833005        ADDLT            r3, r3, #5  ; new x = x+5 right
                                                            
 1606 00001BD0 B2844002        ADDLT            r4, r4, #2  ; new y = y+2
 1607 00001BD4 BA00002C        BLT              saveSnakePosition
 1608 00001BD8         square2_
 1609 00001BD8 E3520002        CMP              r2, #2
 1610 00001BDC 1A00000E        BNE              square3_
 1611 00001BE0 E3510004        CMP              r1, #4
 1612 00001BE4 02433002        SUBEQ            r3, r3, #2  ; new x = x-2  down
                                                            
 1613 00001BE8 02844004        ADDEQ            r4, r4, #4  ; new y = y+4
 1614 00001BEC 0AFFFBD4        BEQ              savePosition
 1615 00001BF0 E3510001        CMP              r1, #1
 1616 00001BF4 02833002        ADDEQ            r3, r3, #2  ; new x = x+2  up
 1617 00001BF8 02444004        SUBEQ            r4, r4, #4  ; new y = y-4
 1618 00001BFC 0A000022        BEQ              saveSnakePosition
 1619 00001C00 E358000F        CMP              r8, #15
 1620 00001C04 C2833005        ADDGT            r3, r3, #5  ; new x = x+5 right
                                                            
 1621 00001C08 C2844002        ADDGT            r4, r4, #2  ; new y = y+2
 1622 00001C0C CA00001E        BGT              saveSnakePosition
 1623 00001C10 E2433002        SUB              r3, r3, #2  ; new x = x-2  down
                                                            
 1624 00001C14 E2844004        ADD              r4, r4, #4  ; new y = y+4
 1625 00001C18 EAFFFBC9        B                savePosition
 1626 00001C1C         square3_
 1627 00001C1C E3520003        CMP              r2, #3
 1628 00001C20 1A00000E        BNE              square1
 1629 00001C24 E3510006        CMP              r1, #6
 1630 00001C28 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1631 00001C2C 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1632 00001C30 0A000015        BEQ              saveSnakePosition
 1633 00001C34 E3510001        CMP              r1, #1
 1634 00001C38 02433005        SUBEQ            r3, r3, #5  ; new x = x-5 left
 1635 00001C3C 02444002        SUBEQ            r4, r4, #2  ; new y = y-2
 1636 00001C40 0A000011        BEQ              saveSnakePosition
 1637 00001C44 E359000D        CMP              r9, #13
 1638 00001C48 C2433002        SUBGT            r3, r3, #2  ; new x = x-2  down
                                                            
 1639 00001C4C C2844004        ADDGT            r4, r4, #4  ; new y = y+4
 1640 00001C50 CAFFFBBB        BGT              savePosition
 1641 00001C54 E2833005        ADD              r3, r3, #5  ; new x = x+5 right
                                                            
 1642 00001C58 E2844002        ADD              r4, r4, #2  ; new y = y+2
 1643 00001C5C EA00000A        B                saveSnakePosition



ARM Macro Assembler    Page 45 


 1644 00001C60         square1
 1645 00001C60 E3510003        CMP              r1, #3
 1646 00001C64 02833005        ADDEQ            r3, r3, #5  ; new x = x+5 right
                                                            
 1647 00001C68 02844002        ADDEQ            r4, r4, #2  ; new y = y+2
 1648 00001C6C 0A000006        BEQ              saveSnakePosition
 1649 00001C70 E358001F        CMP              r8, #31
 1650 00001C74 C2833005        ADDGT            r3, r3, #5  ; new x = x+5 right
                                                            
 1651 00001C78 C2844002        ADDGT            r4, r4, #2  ; new y = y+2
 1652 00001C7C CA000002        BGT              saveSnakePosition
 1653 00001C80 E2433002        SUB              r3, r3, #2  ; new x = x-2  down
                                                            
 1654 00001C84 E2844004        ADD              r4, r4, #4  ; new y = y+4
 1655 00001C88 EAFFFBAD        B                savePosition
 1656 00001C8C         
 1657 00001C8C         
 1658 00001C8C         saveSnakePosition
 1659 00001C8C E5863000        STR              r3, [r6]    ; store new xPos
 1660 00001C90 E5874000        STR              r4, [r7]    ; store new yPos
 1661 00001C94         ; draw a S
 1662 00001C94 E3A0201B        MOV              r2, #0x1B   ; ESC
 1663 00001C98 EBFFFFFE        BL               output_character
 1664 00001C9C E3A0205B        MOV              r2, #0x5B   ; [
 1665 00001CA0 EBFFFFFE        BL               output_character
 1666 00001CA4 E3A0100A        MOV              r1, #10     ; divisor
 1667 00001CA8 E1A00004        MOV              r0, r4      ; dividend
 1668 00001CAC EBFFFFFE        BL               div_and_mod
 1669 00001CB0 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 1670 00001CB4 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1671 00001CB8 EBFFFFFE        BL               output_character
 1672 00001CBC E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 1673 00001CC0 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1674 00001CC4 EBFFFFFE        BL               output_character
 1675 00001CC8 E3A0203B        MOV              r2, #0x3B   ; ;
 1676 00001CCC EBFFFFFE        BL               output_character
 1677 00001CD0 E3A0100A        MOV              r1, #10     ; divisor
 1678 00001CD4 E1A00003        MOV              r0, r3      ; dividend
 1679 00001CD8 EBFFFFFE        BL               div_and_mod
 1680 00001CDC E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 1681 00001CE0 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1682 00001CE4 EBFFFFFE        BL               output_character
 1683 00001CE8 E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 1684 00001CEC E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1685 00001CF0 EBFFFFFE        BL               output_character
 1686 00001CF4 E3A02066        MOV              r2, #0x66   ; f
 1687 00001CF8 EBFFFFFE        BL               output_character
 1688 00001CFC E3A02053        MOV              r2, #0x53   ; S
 1689 00001D00 EBFFFFFE        BL               output_character
 1690 00001D04 E51F0614        LDR              r0, =SNAKE_X_POSITION ; store s
                                                            nakes new position



ARM Macro Assembler    Page 46 


 1691 00001D08 E51F2DE0        LDR              r2, =SNAKE_SQUARE
 1692 00001D0C EBFFFBBD        BL               updateSquare
 1693 00001D10 E8BD40FF        LDMFD            SP!, {r0-r7, lr} 
                                                            ; Restore registers
                                                            
 1694 00001D14 E12FFF1E        BX               lr
 1695 00001D18         
 1696 00001D18         moveSnakeBall
 1697 00001D18 E92D40FF        STMFD            SP!, {r0-r7, lr} 
                                                            ; Save registers
 1698 00001D1C EB0000AD        BL               removeSnakeBall ; remove old C 
                                                            position
 1699 00001D20         ; Check if snake ball is on bottom of pyramid
 1700 00001D20 E51F4DFC        LDR              r4, =SNAKEBALL_SQUARE
 1701 00001D24 E5940000        LDR              r0, [r4]
 1702 00001D28 E3500010        CMP              r0, #16     ; if snake ball is 
                                                            on square 2-15 move
                                                             normal
 1703 00001D2C BA000015        BLT              normalMove
 1704 00001D30         ; remove snake ball and set snake starting position     
                          
 1705 00001D30 E51F0DB4        LDR              r0, =SNAKEBALL_X_POSITION
 1706 00001D34 E51F2644        LDR              r2, =SNAKE_X_POSITION
 1707 00001D38 E5903000        LDR              r3, [r0]
 1708 00001D3C E5823000        STR              r3, [r2]    ; snake x pos = sna
                                                            keball x pos 
 1709 00001D40 E3A01000        MOV              r1, #0
 1710 00001D44 E5801000        STR              r1, [r0]    ; clear snakeball x
                                                             pos
 1711 00001D48 E51F0668        LDR              r0, =SNAKEBALL_Y_POSITION
 1712 00001D4C E51F2658        LDR              r2, =SNAKE_Y_POSITION
 1713 00001D50 E5903000        LDR              r3, [r0]
 1714 00001D54 E5823000        STR              r3, [r2]    ; snake y pos = sna
                                                            keball y pos 
 1715 00001D58 E5801000        STR              r1, [r0]    ; clear snakeball y
                                                             pos
 1716 00001D5C E51F0E38        LDR              r0, =SNAKEBALL_SQUARE
 1717 00001D60 E51F2E38        LDR              r2, =SNAKE_SQUARE
 1718 00001D64 E5903000        LDR              r3, [r0]
 1719 00001D68 E5823000        STR              r3, [r2]    ; snake square = sn
                                                            akeball square    
 1720 00001D6C E5801000        STR              r1, [r0]    ; clear snakeball s
                                                            quare
 1721 00001D70         ; Remove/Reset ball and keep Q displayed on the square.
 1722 00001D70 E51F4E38        LDR              r4, =NUM_BALLS ; number of ball
                                                            s -= 1
 1723 00001D74 E5945000        LDR              r5, [r4]
 1724 00001D78 E2455001        SUB              r5, r5, #1
 1725 00001D7C E5845000        STR              r5, [r4]
 1726 00001D80 EBFFFDF6        BL               spawnSnake
 1727 00001D84 EA00002D        B                snakeSpawned
 1728 00001D88         normalMove
 1729 00001D88         ; pick random number (r1=0 or r1=1) 
 1730 00001D88 E3A03002        MOV              r3, #2
 1731 00001D8C EB00016C        BL               randomNum
 1732 00001D90 E51F4E14        LDR              r4, =SNAKEBALL_X_POSITION
 1733 00001D94 E5946000        LDR              r6, [r4]
 1734 00001D98 E51F56B8        LDR              r5, =SNAKEBALL_Y_POSITION
 1735 00001D9C E5957000        LDR              r7, [r5]



ARM Macro Assembler    Page 47 


 1736 00001DA0 E3510000        CMP              r1, #0      ; direction = down
 1737 00001DA4 02466002        SUBEQ            r6, r6, #2  ; new x = x-2
 1738 00001DA8 02877004        ADDEQ            r7, r7, #4  ; new y = y+4
 1739 00001DAC 0A000002        BEQ              saveSBallPosition
 1740 00001DB0 E3510001        CMP              r1, #1      ; direction = right
                                                            
 1741 00001DB4 02866005        ADDEQ            r6, r6, #5  ; new x = x+5
 1742 00001DB8 02877002        ADDEQ            r7, r7, #2  ; new y = y+2
 1743 00001DBC         saveSBallPosition
 1744 00001DBC E5846000        STR              r6, [r4]    ; store new xPos
 1745 00001DC0 E5857000        STR              r7, [r5]    ; store new yPos
 1746 00001DC4         ; draw a C
 1747 00001DC4 E3A0201B        MOV              r2, #0x1B   ; ESC
 1748 00001DC8 EBFFFFFE        BL               output_character
 1749 00001DCC E3A0205B        MOV              r2, #0x5B   ; [
 1750 00001DD0 EBFFFFFE        BL               output_character
 1751 00001DD4 E3A0100A        MOV              r1, #10     ; divisor
 1752 00001DD8 E1A00007        MOV              r0, r7      ; dividend
 1753 00001DDC EBFFFFFE        BL               div_and_mod
 1754 00001DE0 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 1755 00001DE4 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1756 00001DE8 EBFFFFFE        BL               output_character
 1757 00001DEC E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 1758 00001DF0 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1759 00001DF4 EBFFFFFE        BL               output_character
 1760 00001DF8 E3A0203B        MOV              r2, #0x3B   ; ;
 1761 00001DFC EBFFFFFE        BL               output_character
 1762 00001E00 E3A0100A        MOV              r1, #10     ; divisor
 1763 00001E04 E1A00006        MOV              r0, r6      ; dividend
 1764 00001E08 EBFFFFFE        BL               div_and_mod
 1765 00001E0C E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 1766 00001E10 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1767 00001E14 EBFFFFFE        BL               output_character
 1768 00001E18 E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 1769 00001E1C E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1770 00001E20 EBFFFFFE        BL               output_character
 1771 00001E24 E3A02066        MOV              r2, #0x66   ; f
 1772 00001E28 EBFFFFFE        BL               output_character
 1773 00001E2C E3A02043        MOV              r2, #0x43   ; C
 1774 00001E30 EBFFFFFE        BL               output_character
 1775 00001E34 E51F0EB8        LDR              r0, =SNAKEBALL_X_POSITION
 1776 00001E38 E51F2F14        LDR              r2, =SNAKEBALL_SQUARE
 1777 00001E3C EBFFFB71        BL               updateSquare
 1778 00001E40         snakeSpawned
 1779 00001E40 E8BD40FF        LDMFD            SP!, {r0-r7, lr} 
                                                            ; Restore registers
                                                            
 1780 00001E44 E12FFF1E        BX               lr
 1781 00001E48         
 1782 00001E48         
 1783 00001E48         moveBall1



ARM Macro Assembler    Page 48 


 1784 00001E48 E92D40FF        STMFD            SP!, {r0-r7, lr} 
                                                            ; Save registers
 1785 00001E4C EB0000AA        BL               removeBall1 ; remove old o posi
                                                            tion
 1786 00001E50         ;BL removeBall2
 1787 00001E50         ; pick random number (r1=0 or r1=1) 
 1788 00001E50 E3A03002        MOV              r3, #2
 1789 00001E54 EB00013A        BL               randomNum
 1790 00001E58 E51F4774        LDR              r4, =BALL1_X_POSITION
 1791 00001E5C E5946000        LDR              r6, [r4]
 1792 00001E60 E51F5778        LDR              r5, =BALL1_Y_POSITION
 1793 00001E64 E5957000        LDR              r7, [r5]
 1794 00001E68 E3510000        CMP              r1, #0      ; direction = down
 1795 00001E6C 02466002        SUBEQ            r6, r6, #2  ; new x = x-2
 1796 00001E70 02877004        ADDEQ            r7, r7, #4  ; new y = y+4
 1797 00001E74 0A000002        BEQ              saveBallPosition
 1798 00001E78 E3510001        CMP              r1, #1      ; direction = right
                                                            
 1799 00001E7C 02866005        ADDEQ            r6, r6, #5  ; new x = x+5
 1800 00001E80 02877002        ADDEQ            r7, r7, #2  ; new y = y+2
 1801 00001E84         saveBallPosition
 1802 00001E84 E5846000        STR              r6, [r4]    ; store new xPos
 1803 00001E88 E5857000        STR              r7, [r5]    ; store new yPos
 1804 00001E8C         ; draw a o
 1805 00001E8C E3A0201B        MOV              r2, #0x1B   ; ESC
 1806 00001E90 EBFFFFFE        BL               output_character
 1807 00001E94 E3A0205B        MOV              r2, #0x5B   ; [
 1808 00001E98 EBFFFFFE        BL               output_character
 1809 00001E9C E3A0100A        MOV              r1, #10     ; divisor
 1810 00001EA0 E1A00007        MOV              r0, r7      ; dividend
 1811 00001EA4 EBFFFFFE        BL               div_and_mod
 1812 00001EA8 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 1813 00001EAC E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1814 00001EB0 EBFFFFFE        BL               output_character
 1815 00001EB4 E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 1816 00001EB8 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1817 00001EBC EBFFFFFE        BL               output_character
 1818 00001EC0 E3A0203B        MOV              r2, #0x3B   ; ;
 1819 00001EC4 EBFFFFFE        BL               output_character
 1820 00001EC8 E3A0100A        MOV              r1, #10     ; divisor
 1821 00001ECC E1A00006        MOV              r0, r6      ; dividend
 1822 00001ED0 EBFFFFFE        BL               div_and_mod
 1823 00001ED4 E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 1824 00001ED8 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1825 00001EDC EBFFFFFE        BL               output_character
 1826 00001EE0 E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 1827 00001EE4 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1828 00001EE8 EBFFFFFE        BL               output_character
 1829 00001EEC E3A02066        MOV              r2, #0x66   ; f
 1830 00001EF0 EBFFFFFE        BL               output_character
 1831 00001EF4 E3A0206F        MOV              r2, #0x6F   ; o



ARM Macro Assembler    Page 49 


 1832 00001EF8 EBFFFFFE        BL               output_character
 1833 00001EFC E51F0818        LDR              r0, =BALL1_X_POSITION
 1834 00001F00 E51F2FE4        LDR              r2, =BALL1_SQUARE
 1835 00001F04 EBFFFB3F        BL               updateSquare
 1836 00001F08 E8BD40FF        LDMFD            SP!, {r0-r7, lr} 
                                                            ; Restore registers
                                                            
 1837 00001F0C E12FFF1E        BX               lr
 1838 00001F10         
 1839 00001F10         moveBall2
 1840 00001F10 E92D40FF        STMFD            SP!, {r0-r7, lr} 
                                                            ; Save registers
 1841 00001F14 EB0000C1        BL               removeBall2
 1842 00001F18         ; pick random number (r1=0 or r1=1) 
 1843 00001F18 E3A03002        MOV              r3, #2
 1844 00001F1C EB000108        BL               randomNum
 1845 00001F20 E51F4FA0        LDR              r4, =BALL2_X_POSITION
 1846 00001F24 E5946000        LDR              r6, [r4]
 1847 00001F28 E51F583C        LDR              r5, =BALL2_Y_POSITION
 1848 00001F2C E5957000        LDR              r7, [r5]
 1849 00001F30 E3510000        CMP              r1, #0      ; direction = down
 1850 00001F34 02466002        SUBEQ            r6, r6, #2  ; new x = x-2
 1851 00001F38 02877004        ADDEQ            r7, r7, #4  ; new y = y+4
 1852 00001F3C 0A000002        BEQ              saveBall2Position
 1853 00001F40 E3510001        CMP              r1, #1      ; direction = right
                                                            
 1854 00001F44 02866005        ADDEQ            r6, r6, #5  ; new x = x+5
 1855 00001F48 02877002        ADDEQ            r7, r7, #2  ; new y = y+2
 1856 00001F4C         saveBall2Position
 1857 00001F4C E5846000        STR              r6, [r4]    ; store new xPos
 1858 00001F50 E5857000        STR              r7, [r5]    ; store new yPos
 1859 00001F54         ; draw a o
 1860 00001F54 E3A0201B        MOV              r2, #0x1B   ; ESC
 1861 00001F58 EBFFFFFE        BL               output_character
 1862 00001F5C E3A0205B        MOV              r2, #0x5B   ; [
 1863 00001F60 EBFFFFFE        BL               output_character
 1864 00001F64 E3A0100A        MOV              r1, #10     ; divisor
 1865 00001F68 E1A00007        MOV              r0, r7      ; dividend
 1866 00001F6C EBFFFFFE        BL               div_and_mod
 1867 00001F70 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 1868 00001F74 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1869 00001F78 EBFFFFFE        BL               output_character
 1870 00001F7C E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 1871 00001F80 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1872 00001F84 EBFFFFFE        BL               output_character
 1873 00001F88 E3A0203B        MOV              r2, #0x3B   ; ;
 1874 00001F8C EBFFFFFE        BL               output_character
 1875 00001F90 E3A0100A        MOV              r1, #10     ; divisor
 1876 00001F94 E1A00006        MOV              r0, r6      ; dividend
 1877 00001F98 EBFFFFFE        BL               div_and_mod
 1878 00001F9C E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 1879 00001FA0 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1880 00001FA4 EBFFFFFE        BL               output_character



ARM Macro Assembler    Page 50 


 1881 00001FA8 E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 1882 00001FAC E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1883 00001FB0 EBFFFFFE        BL               output_character
 1884 00001FB4 E3A02066        MOV              r2, #0x66   ; f
 1885 00001FB8 EBFFFFFE        BL               output_character
 1886 00001FBC E3A0206F        MOV              r2, #0x6F   ; o
 1887 00001FC0 EBFFFFFE        BL               output_character
 1888 00001FC4 E59F0720        LDR              r0, =BALL2_X_POSITION
 1889 00001FC8 E59F2720        LDR              r2, =BALL2_SQUARE
 1890 00001FCC EBFFFB0D        BL               updateSquare
 1891 00001FD0 E8BD40FF        LDMFD            SP!, {r0-r7, lr} 
                                                            ; Restore registers
                                                            
 1892 00001FD4 E12FFF1E        BX               lr
 1893 00001FD8         
 1894 00001FD8         
 1895 00001FD8         removeSnakeBall
 1896 00001FD8 E92D403F        STMFD            SP!, {r0-r5, lr} 
                                                            ; Save registers
 1897 00001FDC E59F4710        LDR              r4, =SNAKEBALL_X_POSITION
 1898 00001FE0 E51F5900        LDR              r5, =SNAKEBALL_Y_POSITION
 1899 00001FE4 E3A0201B        MOV              r2, #0x1B   ; ESC
 1900 00001FE8 EBFFFFFE        BL               output_character
 1901 00001FEC E3A0205B        MOV              r2, #0x5B   ; [
 1902 00001FF0 EBFFFFFE        BL               output_character
 1903 00001FF4 E3A0100A        MOV              r1, #10     ; divisor
 1904 00001FF8 E5950000        LDR              r0, [r5]    ; dividend
 1905 00001FFC EBFFFFFE        BL               div_and_mod
 1906 00002000 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 1907 00002004 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1908 00002008 EBFFFFFE        BL               output_character
 1909 0000200C E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 1910 00002010 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1911 00002014 EBFFFFFE        BL               output_character
 1912 00002018 E3A0203B        MOV              r2, #0x3B   ; ;
 1913 0000201C EBFFFFFE        BL               output_character
 1914 00002020 E3A0100A        MOV              r1, #10     ; divisor
 1915 00002024 E5940000        LDR              r0, [r4]    ; dividend
 1916 00002028 EBFFFFFE        BL               div_and_mod
 1917 0000202C E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 1918 00002030 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1919 00002034 EBFFFFFE        BL               output_character
 1920 00002038 E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 1921 0000203C E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1922 00002040 EBFFFFFE        BL               output_character
 1923 00002044 E3A02066        MOV              r2, #0x66   ; f
 1924 00002048 EBFFFFFE        BL               output_character
 1925 0000204C         ; Check if C is off the pyramid
 1926 0000204C E59F46A4        LDR              r4, =SNAKEBALL_FELL_OFF



ARM Macro Assembler    Page 51 


 1927 00002050 E5D45000        LDRB             r5, [r4]
 1928 00002054 E3550001        CMP              r5, #1
 1929 00002058 1A000002        BNE              cOnPyramid
 1930 0000205C E3A02020        MOV              r2, #0x20   ; space
 1931 00002060 EBFFFFFE        BL               output_character
 1932 00002064 EA000014        B                resetSBall
 1933 00002068         cOnPyramid
 1934 00002068 E59F068C        LDR              r0, =Q_SQUARE
 1935 0000206C E5901000        LDR              r1, [r0]    ; r1 = q x pos
 1936 00002070 E59F4688        LDR              r4, =SNAKEBALL_SQUARE
 1937 00002074 E5942000        LDR              r2, [r4]    ; r2 = ball x pos
 1938 00002078 E1510002        CMP              r1, r2
 1939 0000207C 0A00000C        BEQ              qOnSquareC
 1940 00002080         ; Check if square has been cleared
 1941 00002080 E59F367C        LDR              r3, =SQUARE
 1942 00002084 E59F4674        LDR              r4, =SNAKEBALL_SQUARE
 1943 00002088 E5945000        LDR              r5, [r4]
 1944 0000208C E1A05105        MOV              r5, r5, LSL #2
 1945 00002090 E7936005        LDR              r6, [r3, r5]
 1946 00002094 E3560000        CMP              r6, #0      ; 0 if not cleared
 1947 00002098 1A000002        BNE              alreadyClrC
 1948 0000209C E3A0202F        MOV              r2, #0x2F   ; forward slash
 1949 000020A0 EBFFFFFE        BL               output_character
 1950 000020A4 EA000011        B                allDoneC
 1951 000020A8         alreadyClrC
 1952 000020A8 E3A02020        MOV              r2, #0x20   ; space
 1953 000020AC EBFFFFFE        BL               output_character
 1954 000020B0 EA000057        b                allDone
 1955 000020B4         qOnSquareC
 1956 000020B4 E3A02051        MOV              r2, #0x51   ; Q
 1957 000020B8 EBFFFFFE        BL               output_character
 1958 000020BC         resetSBall
 1959 000020BC         ; set ball to no square
 1960 000020BC E59F063C        LDR              r0, =SNAKEBALL_SQUARE
 1961 000020C0 E3A01000        MOV              r1, #0
 1962 000020C4 E5801000        STR              r1, [r0]
 1963 000020C8 E59F4628        LDR              r4, =SNAKEBALL_FELL_OFF 
                                                            ; clear O_FELL_OFF
 1964 000020CC E3A05000        MOV              r5, #0
 1965 000020D0 E5845000        STR              r5, [r4]
 1966 000020D4         ; Remove/Reset ball and keep Q displayed on the square.
 1967 000020D4 E59F462C        LDR              r4, =NUM_BALLS ; number of ball
                                                            s -= 1
 1968 000020D8 E5945000        LDR              r5, [r4]
 1969 000020DC E2455001        SUB              r5, r5, #1
 1970 000020E0 E5845000        STR              r5, [r4]
 1971 000020E4         ; Reset 2s spawn timer to 0 so new ball doesnt spawn rig
                       ht away
 1972 000020E4 E59F4620        LDR              r4, =NUM_HALF_SECS
 1973 000020E8 E3A05000        MOV              r5, #0
 1974 000020EC E5845000        STR              r5, [r4]
 1975 000020F0         allDoneC
 1976 000020F0 EB00026C        BL               interrupt_init
 1977 000020F4 E8BD403F        LDMFD            SP!, {r0-r5, lr} 
                                                            ; Restore registers
                                                            
 1978 000020F8 E12FFF1E        BX               lr
 1979 000020FC         
 1980 000020FC         



ARM Macro Assembler    Page 52 


 1981 000020FC         removeBall1
 1982 000020FC E92D403F        STMFD            SP!, {r0-r5, lr} 
                                                            ; Save registers
 1983 00002100 E51F4A1C        LDR              r4, =BALL1_X_POSITION
 1984 00002104 E51F5A1C        LDR              r5, =BALL1_Y_POSITION
 1985 00002108 E3A0201B        MOV              r2, #0x1B   ; ESC
 1986 0000210C EBFFFFFE        BL               output_character
 1987 00002110 E3A0205B        MOV              r2, #0x5B   ; [
 1988 00002114 EBFFFFFE        BL               output_character
 1989 00002118 E3A0100A        MOV              r1, #10     ; divisor
 1990 0000211C E5950000        LDR              r0, [r5]    ; dividend
 1991 00002120 EBFFFFFE        BL               div_and_mod
 1992 00002124 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 1993 00002128 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 1994 0000212C EBFFFFFE        BL               output_character
 1995 00002130 E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 1996 00002134 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 1997 00002138 EBFFFFFE        BL               output_character
 1998 0000213C E3A0203B        MOV              r2, #0x3B   ; ;
 1999 00002140 EBFFFFFE        BL               output_character
 2000 00002144 E3A0100A        MOV              r1, #10     ; divisor
 2001 00002148 E5940000        LDR              r0, [r4]    ; dividend
 2002 0000214C EBFFFFFE        BL               div_and_mod
 2003 00002150 E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 2004 00002154 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 2005 00002158 EBFFFFFE        BL               output_character
 2006 0000215C E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 2007 00002160 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 2008 00002164 EBFFFFFE        BL               output_character
 2009 00002168 E3A02066        MOV              r2, #0x66   ; f
 2010 0000216C EBFFFFFE        BL               output_character
 2011 00002170         
 2012 00002170         ; Check if o is off the pyramid
 2013 00002170 E59F4598        LDR              r4, =BALL1_FELL_OFF
 2014 00002174 E5D45000        LDRB             r5, [r4]
 2015 00002178 E3550001        CMP              r5, #1
 2016 0000217C 1A000002        BNE              oOnPyramid
 2017 00002180 E3A02020        MOV              r2, #0x20   ; space
 2018 00002184 EBFFFFFE        BL               output_character
 2019 00002188 EA000014        B                resetBall
 2020 0000218C         
 2021 0000218C         oOnPyramid
 2022 0000218C E59F0568        LDR              r0, =Q_SQUARE
 2023 00002190 E5901000        LDR              r1, [r0]    ; r1 = q x pos
 2024 00002194 E59F4578        LDR              r4, =BALL1_SQUARE
 2025 00002198 E5942000        LDR              r2, [r4]    ; r2 = ball x pos
 2026 0000219C E1510002        CMP              r1, r2
 2027 000021A0 0A00000C        BEQ              qOnSquare
 2028 000021A4         
 2029 000021A4         ; Check if square has been cleared
 2030 000021A4 E59F3558        LDR              r3, =SQUARE



ARM Macro Assembler    Page 53 


 2031 000021A8 E59F4564        LDR              r4, =BALL1_SQUARE
 2032 000021AC E5945000        LDR              r5, [r4]
 2033 000021B0 E1A05105        MOV              r5, r5, LSL #2
 2034 000021B4 E7936005        LDR              r6, [r3, r5]
 2035 000021B8 E3560000        CMP              r6, #0      ; 0 if not cleared
 2036 000021BC 1A000002        BNE              alreadyClr
 2037 000021C0 E3A0202F        MOV              r2, #0x2F   ; forward slash
 2038 000021C4 EBFFFFFE        BL               output_character
 2039 000021C8 EA000011        B                allDone
 2040 000021CC         
 2041 000021CC         alreadyClr
 2042 000021CC E3A02020        MOV              r2, #0x20   ; space
 2043 000021D0 EBFFFFFE        BL               output_character
 2044 000021D4 EA00000E        b                allDone
 2045 000021D8         
 2046 000021D8         qOnSquare
 2047 000021D8 E3A02051        MOV              r2, #0x51   ; Q
 2048 000021DC EBFFFFFE        BL               output_character
 2049 000021E0         
 2050 000021E0         resetBall
 2051 000021E0         ; set ball to no square
 2052 000021E0 E59F052C        LDR              r0, =BALL1_SQUARE
 2053 000021E4 E3A01000        MOV              r1, #0
 2054 000021E8 E5801000        STR              r1, [r0]
 2055 000021EC E59F451C        LDR              r4, =BALL1_FELL_OFF 
                                                            ; clear O_FELL_OFF
 2056 000021F0 E3A05000        MOV              r5, #0
 2057 000021F4 E5845000        STR              r5, [r4]
 2058 000021F8         ; Remove/Reset ball and keep Q displayed on the square.
 2059 000021F8 E59F4508        LDR              r4, =NUM_BALLS ; number of ball
                                                            s -= 1
 2060 000021FC E5945000        LDR              r5, [r4]
 2061 00002200 E2455001        SUB              r5, r5, #1
 2062 00002204 E5845000        STR              r5, [r4]
 2063 00002208         ; Reset 2s spawn timer to 0 so new ball doesnt spawn rig
                       ht away
 2064 00002208 E59F44FC        LDR              r4, =NUM_HALF_SECS
 2065 0000220C E3A05000        MOV              r5, #0
 2066 00002210 E5845000        STR              r5, [r4]
 2067 00002214         
 2068 00002214         allDone
 2069 00002214 EB000223        BL               interrupt_init
 2070 00002218 E8BD403F        LDMFD            SP!, {r0-r5, lr} 
                                                            ; Restore registers
                                                            
 2071 0000221C E12FFF1E        BX               lr
 2072 00002220         
 2073 00002220         removeBall2
 2074 00002220 E92D403F        STMFD            SP!, {r0-r5, lr} 
                                                            ; Save registers
 2075 00002224 E59F44C0        LDR              r4, =BALL2_X_POSITION
 2076 00002228 E51F5B3C        LDR              r5, =BALL2_Y_POSITION
 2077 0000222C E3A0201B        MOV              r2, #0x1B   ; ESC
 2078 00002230 EBFFFFFE        BL               output_character
 2079 00002234 E3A0205B        MOV              r2, #0x5B   ; [
 2080 00002238 EBFFFFFE        BL               output_character
 2081 0000223C E3A0100A        MOV              r1, #10     ; divisor
 2082 00002240 E5950000        LDR              r0, [r5]    ; dividend
 2083 00002244 EBFFFFFE        BL               div_and_mod



ARM Macro Assembler    Page 54 


 2084 00002248 E1A02000        MOV              r2, r0      ; quotient = xPos t
                                                            ens digit
 2085 0000224C E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 2086 00002250 EBFFFFFE        BL               output_character
 2087 00002254 E1A02001        MOV              r2, r1      ; remiander = xPos 
                                                            ones digit
 2088 00002258 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 2089 0000225C EBFFFFFE        BL               output_character
 2090 00002260 E3A0203B        MOV              r2, #0x3B   ; ;
 2091 00002264 EBFFFFFE        BL               output_character
 2092 00002268 E3A0100A        MOV              r1, #10     ; divisor
 2093 0000226C E5940000        LDR              r0, [r4]    ; dividend
 2094 00002270 EBFFFFFE        BL               div_and_mod
 2095 00002274 E1A02000        MOV              r2, r0      ; quotient = yPos t
                                                            ens digit
 2096 00002278 E2822030        ADD              r2, r2, #0x30 ; convert to asci
                                                            i    
 2097 0000227C EBFFFFFE        BL               output_character
 2098 00002280 E1A02001        MOV              r2, r1      ; remiander = yPos 
                                                            ones digit
 2099 00002284 E2822030        ADD              r2, r2, #0x30 
                                                            ; convert to ascii
 2100 00002288 EBFFFFFE        BL               output_character
 2101 0000228C E3A02066        MOV              r2, #0x66   ; f
 2102 00002290 EBFFFFFE        BL               output_character
 2103 00002294         
 2104 00002294         ; Check if o is off the pyramid
 2105 00002294 E59F447C        LDR              r4, =BALL2_FELL_OFF
 2106 00002298 E5D45000        LDRB             r5, [r4]
 2107 0000229C E3550001        CMP              r5, #1
 2108 000022A0 1A000002        BNE              o2OnPyramid
 2109 000022A4 E3A02020        MOV              r2, #0x20   ; space
 2110 000022A8 EBFFFFFE        BL               output_character
 2111 000022AC EA000014        B                resetBall2
 2112 000022B0         
 2113 000022B0         o2OnPyramid
 2114 000022B0 E59F0444        LDR              r0, =Q_SQUARE
 2115 000022B4 E5901000        LDR              r1, [r0]    ; r1 = q x pos
 2116 000022B8 E59F4430        LDR              r4, =BALL2_SQUARE
 2117 000022BC E5942000        LDR              r2, [r4]    ; r2 = ball x pos
 2118 000022C0 E1510002        CMP              r1, r2
 2119 000022C4 0A00000C        BEQ              qOnSquare2
 2120 000022C8         
 2121 000022C8         ; Check if square has been cleared
 2122 000022C8 E59F3434        LDR              r3, =SQUARE
 2123 000022CC E59F441C        LDR              r4, =BALL2_SQUARE
 2124 000022D0 E5945000        LDR              r5, [r4]
 2125 000022D4 E1A05105        MOV              r5, r5, LSL #2
 2126 000022D8 E7936005        LDR              r6, [r3, r5]
 2127 000022DC E3560000        CMP              r6, #0      ; 0 if not cleared
 2128 000022E0 1A000002        BNE              alreadyClr2
 2129 000022E4 E3A0202F        MOV              r2, #0x2F   ; forward slash
 2130 000022E8 EBFFFFFE        BL               output_character
 2131 000022EC EAFFFFC8        B                allDone
 2132 000022F0         
 2133 000022F0         alreadyClr2
 2134 000022F0 E3A02020        MOV              r2, #0x20   ; space



ARM Macro Assembler    Page 55 


 2135 000022F4 EBFFFFFE        BL               output_character
 2136 000022F8 EAFFFFC5        b                allDone
 2137 000022FC         
 2138 000022FC         qOnSquare2
 2139 000022FC E3A02051        MOV              r2, #0x51   ; Q
 2140 00002300 EBFFFFFE        BL               output_character
 2141 00002304         
 2142 00002304         resetBall2
 2143 00002304         ; set ball to no square
 2144 00002304 E59F03E4        LDR              r0, =BALL2_SQUARE
 2145 00002308 E3A01000        MOV              r1, #0
 2146 0000230C E5801000        STR              r1, [r0]
 2147 00002310 E59F4400        LDR              r4, =BALL2_FELL_OFF 
                                                            ; clear O_FELL_OFF
 2148 00002314 E3A05000        MOV              r5, #0
 2149 00002318 E5845000        STR              r5, [r4]
 2150 0000231C         ; Remove/Reset ball and keep Q displayed on the square.
 2151 0000231C E59F43E4        LDR              r4, =NUM_BALLS ; number of ball
                                                            s -= 1
 2152 00002320 E5945000        LDR              r5, [r4]
 2153 00002324 E2455001        SUB              r5, r5, #1
 2154 00002328 E5845000        STR              r5, [r4]
 2155 0000232C         ; Reset 2s spawn timer to 0 so new ball doesnt spawn rig
                       ht away
 2156 0000232C E59F43D8        LDR              r4, =NUM_HALF_SECS
 2157 00002330 E3A05000        MOV              r5, #0
 2158 00002334 E5845000        STR              r5, [r4]
 2159 00002338         
 2160 00002338         allDone2
 2161 00002338 EB0001DA        BL               interrupt_init
 2162 0000233C E8BD403F        LDMFD            SP!, {r0-r5, lr} 
                                                            ; Restore registers
                                                            
 2163 00002340 E12FFF1E        BX               lr
 2164 00002344         
 2165 00002344         
 2166 00002344         ; return a random 0 or 1 in r1 (remainder)
 2167 00002344         ; r3 = 1-r3 random number returned in r0
 2168 00002344         randomNum
 2169 00002344 E92D4008        STMFD            SP!, {r3, lr} ; Save registers
 2170 00002348 E59F23CC        LDR              r2, =0xE0008008 ; Load Timer1 (
                                                            T1TC) address
 2171 0000234C         ; Load least sig byte from current time into r0
 2172 0000234C E5D20000        LDRB             r0, [r2]    ; dividend
 2173 00002350         ; Randomize the dividend more
 2174 00002350 E59F23A4        LDR              r2, =Q_SQUARE
 2175 00002354 E5D21000        LDRB             r1, [r2]
 2176 00002358 E0800001        ADD              r0, r0, r1
 2177 0000235C E59F23BC        LDR              r2, =Q_X_POSITION
 2178 00002360 E5D21000        LDRB             r1, [r2]
 2179 00002364 E0800001        ADD              r0, r0, r1
 2180 00002368 E59F23B4        LDR              r2, =Q_Y_POSITION
 2181 0000236C E5D21000        LDRB             r1, [r2]
 2182 00002370 E0800001        ADD              r0, r0, r1
 2183 00002374 E59F23AC        LDR              r2, =LIVES
 2184 00002378 E5D21000        LDRB             r1, [r2]
 2185 0000237C E0800001        ADD              r0, r0, r1
 2186 00002380 E1A01003        MOV              r1, r3
 2187 00002384         ;MOV r1, #2     ; divisor



ARM Macro Assembler    Page 56 


 2188 00002384 EBFFFFFE        BL               div_and_mod
 2189 00002388 E8BD4008        LDMFD            SP!, {r3, lr} 
                                                            ; Restore registers
                                                            
 2190 0000238C E12FFF1E        BX               lr
 2191 00002390         
 2192 00002390         setAllSqrsTo0
 2193 00002390 E92D4003        STMFD            SP!, {r0, r1, lr} 
                                                            ; Save registers
 2194 00002394         ; set ball 1 and 2, snakeball and snake to no square
 2195 00002394 E59F0378        LDR              r0, =BALL1_SQUARE
 2196 00002398 E3A01000        MOV              r1, #0
 2197 0000239C E5801000        STR              r1, [r0]
 2198 000023A0         ; set ball2 to no square
 2199 000023A0 E59F0348        LDR              r0, =BALL2_SQUARE
 2200 000023A4 E5801000        STR              r1, [r0]
 2201 000023A8         ; set snakeball to no square
 2202 000023A8 E59F0350        LDR              r0, =SNAKEBALL_SQUARE
 2203 000023AC E5801000        STR              r1, [r0]
 2204 000023B0         ; set snake to no square
 2205 000023B0 E59F0374        LDR              r0, =SNAKE_SQUARE
 2206 000023B4 E5801000        STR              r1, [r0]
 2207 000023B8 E59F0348        LDR              r0, =NUM_BALLS
 2208 000023BC E3A01000        MOV              r1, #0
 2209 000023C0 E5801000        STR              r1, [r0]
 2210 000023C4 E8BD4003        LDMFD            SP!, {r0, r1, lr} 
                                                            ; Restore registers
                                                            
 2211 000023C8 E12FFF1E        BX               lr
 2212 000023CC         
 2213 000023CC         ; check if Q x position = 0 x position
 2214 000023CC         didoHitQ
 2215 000023CC E92D4000        STMFD            SP!, {lr}   ; Save registers
 2216 000023D0 E59F0358        LDR              r0, =Q_DIRECTION
 2217 000023D4 E3A01000        MOV              r1, #0
 2218 000023D8 E5801000        STR              r1, [r0]
 2219 000023DC E59F0318        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2220 000023E0 E5901000        LDR              r1, [r0]
 2221 000023E4 E59F0340        LDR              r0, =SNAKE_SQUARE
 2222 000023E8 E5902000        LDR              r2, [r0]    ; r2 = snake x pos
 2223 000023EC E1510002        CMP              r1, r2
 2224 000023F0 0BFFFA70        BLEQ             removeLife
 2225 000023F4 E59F0300        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2226 000023F8 E5901000        LDR              r1, [r0]
 2227 000023FC E59F0328        LDR              r0, =SNAKE_SQUARE
 2228 00002400 E5902000        LDR              r2, [r0]    ; r2 = snake x pos
 2229 00002404 E1510002        CMP              r1, r2
 2230 00002408 0B000088        BLEQ             qCurse
 2231 0000240C E59F02E8        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2232 00002410 E5901000        LDR              r1, [r0]
 2233 00002414 E59F0310        LDR              r0, =SNAKE_SQUARE
 2234 00002418 E5902000        LDR              r2, [r0]    ; r2 = snake x pos
 2235 0000241C E1510002        CMP              r1, r2
 2236 00002420 0BFFFEEC        BLEQ             removeSnakeBall
 2237 00002424 E59F02D0        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2238 00002428 E5901000        LDR              r1, [r0]
 2239 0000242C E59F02F8        LDR              r0, =SNAKE_SQUARE
 2240 00002430 E5902000        LDR              r2, [r0]    ; r2 = snake x pos
 2241 00002434 E1510002        CMP              r1, r2



ARM Macro Assembler    Page 57 


 2242 00002438 0BFFFF2F        BLEQ             removeBall1
 2243 0000243C E59F02B8        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2244 00002440 E5901000        LDR              r1, [r0]
 2245 00002444 E59F02E0        LDR              r0, =SNAKE_SQUARE
 2246 00002448 E5902000        LDR              r2, [r0]    ; r2 = snake x pos
 2247 0000244C E1510002        CMP              r1, r2
 2248 00002450 0BFFFF72        BLEQ             removeBall2
 2249 00002454 E59F02A0        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2250 00002458 E5901000        LDR              r1, [r0]
 2251 0000245C E59F02C8        LDR              r0, =SNAKE_SQUARE
 2252 00002460 E5902000        LDR              r2, [r0]    ; r2 = snake x pos
 2253 00002464 E1510002        CMP              r1, r2
 2254 00002468 0BFFFC5F        BLEQ             removeSnake
 2255 0000246C         ; BEQ setAllSqrsTo0
 2256 0000246C 0A00006D        BEQ              doneHit
 2257 00002470         
 2258 00002470 E59F0284        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2259 00002474 E5901000        LDR              r1, [r0]
 2260 00002478 E59F0280        LDR              r0, =SNAKEBALL_SQUARE
 2261 0000247C E5902000        LDR              r2, [r0]    ; r2 = snakeball x 
                                                            pos
 2262 00002480 E1510002        CMP              r1, r2
 2263 00002484 0BFFFA4B        BLEQ             removeLife
 2264 00002488         ;BLEQ removeSnakeBall
 2265 00002488 E59F026C        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2266 0000248C E5901000        LDR              r1, [r0]
 2267 00002490 E59F0268        LDR              r0, =SNAKEBALL_SQUARE
 2268 00002494 E5902000        LDR              r2, [r0]    ; r2 = snakeball x 
                                                            pos
 2269 00002498 E1510002        CMP              r1, r2
 2270 0000249C 0B000063        BLEQ             qCurse
 2271 000024A0 E59F0254        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2272 000024A4 E5901000        LDR              r1, [r0]
 2273 000024A8 E59F0250        LDR              r0, =SNAKEBALL_SQUARE
 2274 000024AC E5902000        LDR              r2, [r0]    ; r2 = snakeball x 
                                                            pos
 2275 000024B0 E1510002        CMP              r1, r2
 2276 000024B4 0BFFFC4C        BLEQ             removeSnake
 2277 000024B8 E59F023C        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2278 000024BC E5901000        LDR              r1, [r0]
 2279 000024C0 E59F0238        LDR              r0, =SNAKEBALL_SQUARE
 2280 000024C4 E5902000        LDR              r2, [r0]    ; r2 = snakeball x 
                                                            pos
 2281 000024C8 E1510002        CMP              r1, r2
 2282 000024CC 0BFFFF0A        BLEQ             removeBall1
 2283 000024D0 E59F0224        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2284 000024D4 E5901000        LDR              r1, [r0]
 2285 000024D8 E59F0220        LDR              r0, =SNAKEBALL_SQUARE
 2286 000024DC E5902000        LDR              r2, [r0]    ; r2 = snakeball x 
                                                            pos
 2287 000024E0 E1510002        CMP              r1, r2
 2288 000024E4 0BFFFF4D        BLEQ             removeBall2
 2289 000024E8 E59F020C        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2290 000024EC E5901000        LDR              r1, [r0]
 2291 000024F0 E59F0208        LDR              r0, =SNAKEBALL_SQUARE
 2292 000024F4 E5902000        LDR              r2, [r0]    ; r2 = snakeball x 
                                                            pos
 2293 000024F8 E1510002        CMP              r1, r2
 2294 000024FC 0BFFFEB5        BLEQ             removeSnakeBall



ARM Macro Assembler    Page 58 


 2295 00002500         ;BEQ setAllSqrsTo0
 2296 00002500 0A000048        BEQ              doneHit
 2297 00002504         
 2298 00002504 E59F01F0        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2299 00002508 E5901000        LDR              r1, [r0]
 2300 0000250C E59F0200        LDR              r0, =BALL1_SQUARE
 2301 00002510 E5902000        LDR              r2, [r0]    ; r2 = ball1 x pos
 2302 00002514 E1510002        CMP              r1, r2
 2303 00002518 0BFFFA26        BLEQ             removeLife
 2304 0000251C         ;BLEQ removeBall1
 2305 0000251C E59F01D8        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2306 00002520 E5901000        LDR              r1, [r0]
 2307 00002524 E59F01E8        LDR              r0, =BALL1_SQUARE
 2308 00002528 E5902000        LDR              r2, [r0]    ; r2 = ball1 x pos
 2309 0000252C E1510002        CMP              r1, r2
 2310 00002530 0B00003E        BLEQ             qCurse
 2311 00002534 E59F01C0        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2312 00002538 E5901000        LDR              r1, [r0]
 2313 0000253C E59F01D0        LDR              r0, =BALL1_SQUARE
 2314 00002540 E5902000        LDR              r2, [r0]    ; r2 = ball1 x pos
 2315 00002544 E1510002        CMP              r1, r2
 2316 00002548 0BFFFC27        BLEQ             removeSnake
 2317 0000254C E59F01A8        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2318 00002550 E5901000        LDR              r1, [r0]
 2319 00002554 E59F01B8        LDR              r0, =BALL1_SQUARE
 2320 00002558 E5902000        LDR              r2, [r0]    ; r2 = ball1 x pos
 2321 0000255C E1510002        CMP              r1, r2
 2322 00002560 0BFFFE9C        BLEQ             removeSnakeBall
 2323 00002564 E59F0190        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2324 00002568 E5901000        LDR              r1, [r0]
 2325 0000256C E59F01A0        LDR              r0, =BALL1_SQUARE
 2326 00002570 E5902000        LDR              r2, [r0]    ; r2 = ball1 x pos
 2327 00002574 E1510002        CMP              r1, r2
 2328 00002578 0BFFFF28        BLEQ             removeBall2
 2329 0000257C E59F0178        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2330 00002580 E5901000        LDR              r1, [r0]
 2331 00002584 E59F0188        LDR              r0, =BALL1_SQUARE
 2332 00002588 E5902000        LDR              r2, [r0]    ; r2 = ball1 x pos
 2333 0000258C E1510002        CMP              r1, r2
 2334 00002590 0BFFFED9        BLEQ             removeBall1
 2335 00002594         ;BEQ setAllSqrsTo0
 2336 00002594 0A000023        BEQ              doneHit
 2337 00002598         
 2338 00002598 E59F015C        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2339 0000259C E5901000        LDR              r1, [r0]
 2340 000025A0 E59F0148        LDR              r0, =BALL2_SQUARE
 2341 000025A4 E5902000        LDR              r2, [r0]    ; r2 = ball2 x pos
 2342 000025A8 E1510002        CMP              r1, r2
 2343 000025AC 0BFFFA01        BLEQ             removeLife
 2344 000025B0         ;BLEQ removeBall2
 2345 000025B0 E59F0144        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2346 000025B4 E5901000        LDR              r1, [r0]
 2347 000025B8 E59F0130        LDR              r0, =BALL2_SQUARE
 2348 000025BC E5902000        LDR              r2, [r0]    ; r2 = ball2 x pos
 2349 000025C0 E1510002        CMP              r1, r2
 2350 000025C4 0B000019        BLEQ             qCurse
 2351 000025C8 E59F012C        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2352 000025CC E5901000        LDR              r1, [r0]
 2353 000025D0 E59F0118        LDR              r0, =BALL2_SQUARE



ARM Macro Assembler    Page 59 


 2354 000025D4 E5902000        LDR              r2, [r0]    ; r2 = ball2 x pos
 2355 000025D8 E1510002        CMP              r1, r2
 2356 000025DC 0BFFFC02        BLEQ             removeSnake
 2357 000025E0 E59F0114        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2358 000025E4 E5901000        LDR              r1, [r0]
 2359 000025E8 E59F0100        LDR              r0, =BALL2_SQUARE
 2360 000025EC E5902000        LDR              r2, [r0]    ; r2 = ball2 x pos
 2361 000025F0 E1510002        CMP              r1, r2
 2362 000025F4 0BFFFE77        BLEQ             removeSnakeBall
 2363 000025F8 E59F00FC        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2364 000025FC E5901000        LDR              r1, [r0]
 2365 00002600 E59F00E8        LDR              r0, =BALL2_SQUARE
 2366 00002604 E5902000        LDR              r2, [r0]    ; r2 = ball2 x pos
 2367 00002608 E1510002        CMP              r1, r2
 2368 0000260C 0BFFFEBA        BLEQ             removeBall1
 2369 00002610 E59F00E4        LDR              r0, =Q_SQUARE ; r1 = q x pos
 2370 00002614 E5901000        LDR              r1, [r0]
 2371 00002618 E59F00D0        LDR              r0, =BALL2_SQUARE
 2372 0000261C E5902000        LDR              r2, [r0]    ; r2 = ball2 x pos
 2373 00002620 E1510002        CMP              r1, r2
 2374 00002624 0BFFFEFD        BLEQ             removeBall2
 2375 00002628         ;BEQ setAllSqrsTo0
 2376 00002628         doneHit
 2377 00002628 E8BD4000        LDMFD            SP!, {lr}   ; Restore registers
                                                            
 2378 0000262C E12FFF1E        BX               lr
 2379 00002630         
 2380 00002630         ;Q'bert curses when hit by ball
 2381 00002630         qCurse
 2382 00002630 E92D4038        STMFD            SP!, {r3-r5, lr} 
                                                            ; Save registers
 2383 00002634 E59F30C0        LDR              r3, =Q_SQUARE
 2384 00002638 E5934000        LDR              r4, [r3]
 2385 0000263C E3540001        CMP              r4, #1
 2386 00002640 0B0000BE        BLEQ             curseLLL
 2387 00002644 E3540002        CMP              r4, #2
 2388 00002648 0B000039        BLEQ             curseLL
 2389 0000264C E3540003        CMP              r4, #3
 2390 00002650 0B000037        BLEQ             curseLL
 2391 00002654 E3540005        CMP              r4, #5
 2392 00002658 0B000035        BLEQ             curseLL
 2393 0000265C E3540004        CMP              r4, #4
 2394 00002660 0B000058        BLEQ             curseLR
 2395 00002664 E3540007        CMP              r4, #7
 2396 00002668 0B000056        BLEQ             curseLR
 2397 0000266C E3540008        CMP              r4, #8
 2398 00002670 0B000054        BLEQ             curseLR
 2399 00002674 E354000C        CMP              r4, #12
 2400 00002678 0B000052        BLEQ             curseLR
 2401 0000267C E354000F        CMP              r4, #15
 2402 00002680 0B000050        BLEQ             curseLR
 2403 00002684 E3540011        CMP              r4, #17
 2404 00002688 0B00004E        BLEQ             curseLR
 2405 0000268C E3540012        CMP              r4, #18
 2406 00002690 0B00004C        BLEQ             curseLR
 2407 00002694 E3540014        CMP              r4, #20
 2408 00002698 0B00004A        BLEQ             curseLR
 2409 0000269C E3540015        CMP              r4, #21
 2410 000026A0 0B000048        BLEQ             curseLR



ARM Macro Assembler    Page 60 


 2411 000026A4 E3540009        CMP              r4, #9
 2412 000026A8 0B000073        BLEQ             curseLLR
 2413 000026AC E354000A        CMP              r4, #10
 2414 000026B0 0B000071        BLEQ             curseLLR
 2415 000026B4 E354000B        CMP              r4, #11
 2416 000026B8 0B00006F        BLEQ             curseLLR
 2417 000026BC E354000D        CMP              r4, #13
 2418 000026C0 0B00006D        BLEQ             curseLLR
 2419 000026C4 E3540010        CMP              r4, #16
 2420 000026C8 0B00006B        BLEQ             curseLLR
 2421 000026CC E3540013        CMP              r4, #19
 2422 000026D0 0B000069        BLEQ             curseLLR
 2423 000026D4 E3540006        CMP              r4, #6
 2424 000026D8 0B000098        BLEQ             curseLLL
 2425 000026DC E354000E        CMP              r4, #14
 2426 000026E0 0B0000BF        BLEQ             curseLRR
 2427 000026E4 E8BD4038        LDMFD            SP!, {r3-r5, lr} 
                                                            ; Restore registers
                                                            
 2428 000026E8 E12FFF1E        BX               lr
 2429 000026EC 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E0008008 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         LTORG                        ; Literal poop too 
                                                            distant
 2430 00002734         
 2431 00002734         curseLL
 2432 00002734 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
 2433 00002738         ; Move curosr left 3
 2434 00002738 E3A0201B        MOV              r2, #0x1B   ; ESC
 2435 0000273C EBFFFFFE        BL               output_character
 2436 00002740 E3A0205B        MOV              r2, #0x5B   ; [
 2437 00002744 EBFFFFFE        BL               output_character
 2438 00002748 E3A02033        MOV              r2, #0x33   ; 3
 2439 0000274C EBFFFFFE        BL               output_character
 2440 00002750 E3A02044        MOV              r2, #0x44   ; D
 2441 00002754 EBFFFFFE        BL               output_character
 2442 00002758         ; Check if write curse or clear curse
 2443 00002758 E59F0874        LDR              r0, =DISPLAY_CURSE
 2444 0000275C E5901000        LDR              r1, [r0]
 2445 00002760 E3510000        CMP              r1, #0
 2446 00002764 0A000009        BEQ              writeCurseLL
 2447 00002768         ; Write 3 spaces
 2448 00002768 E3A02020        MOV              r2, #0x20   ; space



ARM Macro Assembler    Page 61 


 2449 0000276C EBFFFFFE        BL               output_character
 2450 00002770 E3A02020        MOV              r2, #0x20   ; space
 2451 00002774 EBFFFFFE        BL               output_character
 2452 00002778 E3A02020        MOV              r2, #0x20   ; space
 2453 0000277C EBFFFFFE        BL               output_character
 2454 00002780 E59F084C        LDR              r0, =DISPLAY_CURSE
 2455 00002784 E3A01000        MOV              r1, #0
 2456 00002788 E5801000        STR              r1, [r0]
 2457 0000278C EA00000B        B                doneLL
 2458 00002790         writeCurseLL
 2459 00002790 E3A02021        MOV              r2, #0x21   ; !
 2460 00002794 EBFFFFFE        BL               output_character
 2461 00002798 E3A02040        MOV              r2, #0x40   ; @
 2462 0000279C EBFFFFFE        BL               output_character
 2463 000027A0 E3A02023        MOV              r2, #0x23   ; #
 2464 000027A4 EBFFFFFE        BL               output_character
 2465 000027A8         ; pause game for 4 cycles to display curse
 2466 000027A8 E59F0828        LDR              r0, =Q_RECENTLY_HIT
 2467 000027AC E3A01001        MOV              r1, #1
 2468 000027B0 E5C01000        STRB             r1, [r0]
 2469 000027B4 E59F0818        LDR              r0, =DISPLAY_CURSE
 2470 000027B8 E3A01001        MOV              r1, #1
 2471 000027BC E5C01000        STRB             r1, [r0]
 2472 000027C0         doneLL
 2473 000027C0 E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
 2474 000027C4 E12FFF1E        BX               lr
 2475 000027C8         
 2476 000027C8         curseLR
 2477 000027C8 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
 2478 000027CC         ; Check if write curse or clear curse
 2479 000027CC E59F0800        LDR              r0, =DISPLAY_CURSE
 2480 000027D0 E5901000        LDR              r1, [r0]
 2481 000027D4 E3510000        CMP              r1, #0
 2482 000027D8 0A000011        BEQ              writeCurseLR
 2483 000027DC         ; Move curosr left 3
 2484 000027DC E3A0201B        MOV              r2, #0x1B   ; ESC
 2485 000027E0 EBFFFFFE        BL               output_character
 2486 000027E4 E3A0205B        MOV              r2, #0x5B   ; [
 2487 000027E8 EBFFFFFE        BL               output_character
 2488 000027EC E3A02032        MOV              r2, #0x32   ; 2
 2489 000027F0 EBFFFFFE        BL               output_character
 2490 000027F4 E3A02044        MOV              r2, #0x44   ; D
 2491 000027F8 EBFFFFFE        BL               output_character
 2492 000027FC         ; Write 3 spaces
 2493 000027FC E3A02020        MOV              r2, #0x20   ; space
 2494 00002800 EBFFFFFE        BL               output_character
 2495 00002804 E3A02020        MOV              r2, #0x20   ; space
 2496 00002808 EBFFFFFE        BL               output_character
 2497 0000280C E3A02020        MOV              r2, #0x20   ; space
 2498 00002810 EBFFFFFE        BL               output_character
 2499 00002814 E59F07B8        LDR              r0, =DISPLAY_CURSE
 2500 00002818 E3A01000        MOV              r1, #0
 2501 0000281C E5801000        STR              r1, [r0]
 2502 00002820 EA000013        B                doneLR
 2503 00002824         writeCurseLR
 2504 00002824         ; Move curosr left 2



ARM Macro Assembler    Page 62 


 2505 00002824 E3A0201B        MOV              r2, #0x1B   ; ESC
 2506 00002828 EBFFFFFE        BL               output_character
 2507 0000282C E3A0205B        MOV              r2, #0x5B   ; [
 2508 00002830 EBFFFFFE        BL               output_character
 2509 00002834 E3A02032        MOV              r2, #0x32   ; 2
 2510 00002838 EBFFFFFE        BL               output_character
 2511 0000283C E3A02044        MOV              r2, #0x44   ; D
 2512 00002840 EBFFFFFE        BL               output_character
 2513 00002844 E3A02021        MOV              r2, #0x21   ; !
 2514 00002848 EBFFFFFE        BL               output_character
 2515 0000284C E3A02040        MOV              r2, #0x40   ; @
 2516 00002850 EBFFFFFE        BL               output_character
 2517 00002854 E3A02023        MOV              r2, #0x23   ; #
 2518 00002858 EBFFFFFE        BL               output_character
 2519 0000285C         ; pause game for 4 cycles to display curse
 2520 0000285C E59F0774        LDR              r0, =Q_RECENTLY_HIT
 2521 00002860 E3A01001        MOV              r1, #1
 2522 00002864 E5C01000        STRB             r1, [r0]
 2523 00002868 E59F0764        LDR              r0, =DISPLAY_CURSE
 2524 0000286C E3A01001        MOV              r1, #1
 2525 00002870 E5C01000        STRB             r1, [r0]
 2526 00002874         doneLR
 2527 00002874 E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
 2528 00002878 E12FFF1E        BX               lr
 2529 0000287C         
 2530 0000287C         curseLLR
 2531 0000287C E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
 2532 00002880         ; Check if write curse or clear curse
 2533 00002880 E59F074C        LDR              r0, =DISPLAY_CURSE
 2534 00002884 E5901000        LDR              r1, [r0]
 2535 00002888 E3510000        CMP              r1, #0
 2536 0000288C 0A000013        BEQ              writeCurseLLR
 2537 00002890         ; Move curosr left 3
 2538 00002890 E3A0201B        MOV              r2, #0x1B   ; ESC
 2539 00002894 EBFFFFFE        BL               output_character
 2540 00002898 E3A0205B        MOV              r2, #0x5B   ; [
 2541 0000289C EBFFFFFE        BL               output_character
 2542 000028A0 E3A02033        MOV              r2, #0x33   ; 3
 2543 000028A4 EBFFFFFE        BL               output_character
 2544 000028A8 E3A02044        MOV              r2, #0x44   ; D
 2545 000028AC EBFFFFFE        BL               output_character
 2546 000028B0         ; Write 4 spaces
 2547 000028B0 E3A02020        MOV              r2, #0x20   ; space
 2548 000028B4 EBFFFFFE        BL               output_character
 2549 000028B8 E3A02020        MOV              r2, #0x20   ; space
 2550 000028BC EBFFFFFE        BL               output_character
 2551 000028C0 E3A02020        MOV              r2, #0x20   ; space
 2552 000028C4 EBFFFFFE        BL               output_character
 2553 000028C8 E3A02020        MOV              r2, #0x20   ; space
 2554 000028CC EBFFFFFE        BL               output_character
 2555 000028D0 E59F06FC        LDR              r0, =DISPLAY_CURSE
 2556 000028D4 E3A01000        MOV              r1, #0
 2557 000028D8 E5801000        STR              r1, [r0]
 2558 000028DC EA000015        B                doneLLR
 2559 000028E0         writeCurseLLR
 2560 000028E0         ; Move curosr left 3



ARM Macro Assembler    Page 63 


 2561 000028E0 E3A0201B        MOV              r2, #0x1B   ; ESC
 2562 000028E4 EBFFFFFE        BL               output_character
 2563 000028E8 E3A0205B        MOV              r2, #0x5B   ; [
 2564 000028EC EBFFFFFE        BL               output_character
 2565 000028F0 E3A02033        MOV              r2, #0x33   ; 3
 2566 000028F4 EBFFFFFE        BL               output_character
 2567 000028F8 E3A02044        MOV              r2, #0x44   ; D
 2568 000028FC EBFFFFFE        BL               output_character
 2569 00002900 E3A02021        MOV              r2, #0x21   ; !
 2570 00002904 EBFFFFFE        BL               output_character
 2571 00002908 E3A02040        MOV              r2, #0x40   ; @
 2572 0000290C EBFFFFFE        BL               output_character
 2573 00002910 E3A02023        MOV              r2, #0x23   ; #
 2574 00002914 EBFFFFFE        BL               output_character
 2575 00002918 E3A02024        MOV              r2, #0x24   ; $
 2576 0000291C EBFFFFFE        BL               output_character
 2577 00002920         ; pause game for 4 cycles to display curse
 2578 00002920 E59F06B0        LDR              r0, =Q_RECENTLY_HIT
 2579 00002924 E3A01001        MOV              r1, #1
 2580 00002928 E5C01000        STRB             r1, [r0]
 2581 0000292C E59F06A0        LDR              r0, =DISPLAY_CURSE
 2582 00002930 E3A01001        MOV              r1, #1
 2583 00002934 E5C01000        STRB             r1, [r0]
 2584 00002938         doneLLR
 2585 00002938 E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
 2586 0000293C E12FFF1E        BX               lr
 2587 00002940         
 2588 00002940         curseLLL
 2589 00002940 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
 2590 00002944         ; Move curosr left 4
 2591 00002944 E3A0201B        MOV              r2, #0x1B   ; ESC
 2592 00002948 EBFFFFFE        BL               output_character
 2593 0000294C E3A0205B        MOV              r2, #0x5B   ; [
 2594 00002950 EBFFFFFE        BL               output_character
 2595 00002954 E3A02034        MOV              r2, #0x34   ; 4
 2596 00002958 EBFFFFFE        BL               output_character
 2597 0000295C E3A02044        MOV              r2, #0x44   ; D
 2598 00002960 EBFFFFFE        BL               output_character
 2599 00002964         ; Check if write curse or clear curse
 2600 00002964 E59F0668        LDR              r0, =DISPLAY_CURSE
 2601 00002968 E5901000        LDR              r1, [r0]
 2602 0000296C E3510000        CMP              r1, #0
 2603 00002970 0A00000B        BEQ              writeCurseLLL
 2604 00002974         ; Write 4 spaces
 2605 00002974 E3A02020        MOV              r2, #0x20   ; space
 2606 00002978 EBFFFFFE        BL               output_character
 2607 0000297C E3A02020        MOV              r2, #0x20   ; space
 2608 00002980 EBFFFFFE        BL               output_character
 2609 00002984 E3A02020        MOV              r2, #0x20   ; space
 2610 00002988 EBFFFFFE        BL               output_character
 2611 0000298C E3A02020        MOV              r2, #0x20   ; space
 2612 00002990 EBFFFFFE        BL               output_character
 2613 00002994 E59F0638        LDR              r0, =DISPLAY_CURSE
 2614 00002998 E3A01000        MOV              r1, #0
 2615 0000299C E5801000        STR              r1, [r0]
 2616 000029A0 EA00000D        B                doneLLL



ARM Macro Assembler    Page 64 


 2617 000029A4         writeCurseLLL
 2618 000029A4 E3A02021        MOV              r2, #0x21   ; !
 2619 000029A8 EBFFFFFE        BL               output_character
 2620 000029AC E3A02040        MOV              r2, #0x40   ; @
 2621 000029B0 EBFFFFFE        BL               output_character
 2622 000029B4 E3A02023        MOV              r2, #0x23   ; #
 2623 000029B8 EBFFFFFE        BL               output_character
 2624 000029BC E3A02024        MOV              r2, #0x24   ; $
 2625 000029C0 EBFFFFFE        BL               output_character
 2626 000029C4         ; pause game for 4 cycles to display curse
 2627 000029C4 E59F060C        LDR              r0, =Q_RECENTLY_HIT
 2628 000029C8 E3A01001        MOV              r1, #1
 2629 000029CC E5C01000        STRB             r1, [r0]
 2630 000029D0 E59F05FC        LDR              r0, =DISPLAY_CURSE
 2631 000029D4 E3A01001        MOV              r1, #1
 2632 000029D8 E5C01000        STRB             r1, [r0]
 2633 000029DC         doneLLL
 2634 000029DC E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
 2635 000029E0 E12FFF1E        BX               lr
 2636 000029E4         
 2637 000029E4         curseLRR
 2638 000029E4 E92D407C        STMFD            SP!, {r2-r6, lr} 
                                                            ; Save registers
 2639 000029E8         
 2640 000029E8         ; Check if write curse or clear curse
 2641 000029E8 E59F05E4        LDR              r0, =DISPLAY_CURSE
 2642 000029EC E5901000        LDR              r1, [r0]
 2643 000029F0 E3510000        CMP              r1, #0
 2644 000029F4 0A000013        BEQ              writeCurseLRR
 2645 000029F8         ; Move curosr left 3
 2646 000029F8 E3A0201B        MOV              r2, #0x1B   ; ESC
 2647 000029FC EBFFFFFE        BL               output_character
 2648 00002A00 E3A0205B        MOV              r2, #0x5B   ; [
 2649 00002A04 EBFFFFFE        BL               output_character
 2650 00002A08 E3A02032        MOV              r2, #0x32   ; 2
 2651 00002A0C EBFFFFFE        BL               output_character
 2652 00002A10 E3A02044        MOV              r2, #0x44   ; D
 2653 00002A14 EBFFFFFE        BL               output_character
 2654 00002A18         ; Write 4 spaces
 2655 00002A18 E3A02020        MOV              r2, #0x20   ; space
 2656 00002A1C EBFFFFFE        BL               output_character
 2657 00002A20 E3A02020        MOV              r2, #0x20   ; space
 2658 00002A24 EBFFFFFE        BL               output_character
 2659 00002A28 E3A02020        MOV              r2, #0x20   ; space
 2660 00002A2C EBFFFFFE        BL               output_character
 2661 00002A30 E3A02020        MOV              r2, #0x20   ; space
 2662 00002A34 EBFFFFFE        BL               output_character
 2663 00002A38 E59F0594        LDR              r0, =DISPLAY_CURSE
 2664 00002A3C E3A01000        MOV              r1, #0
 2665 00002A40 E5801000        STR              r1, [r0]
 2666 00002A44 EA000015        B                doneLRR
 2667 00002A48         writeCurseLRR
 2668 00002A48         ; Move curosr left 2
 2669 00002A48 E3A0201B        MOV              r2, #0x1B   ; ESC
 2670 00002A4C EBFFFFFE        BL               output_character
 2671 00002A50 E3A0205B        MOV              r2, #0x5B   ; [
 2672 00002A54 EBFFFFFE        BL               output_character



ARM Macro Assembler    Page 65 


 2673 00002A58 E3A02032        MOV              r2, #0x32   ; 2
 2674 00002A5C EBFFFFFE        BL               output_character
 2675 00002A60 E3A02044        MOV              r2, #0x44   ; D
 2676 00002A64 EBFFFFFE        BL               output_character
 2677 00002A68 E3A02021        MOV              r2, #0x21   ; !
 2678 00002A6C EBFFFFFE        BL               output_character
 2679 00002A70 E3A02040        MOV              r2, #0x40   ; @
 2680 00002A74 EBFFFFFE        BL               output_character
 2681 00002A78 E3A02023        MOV              r2, #0x23   ; #
 2682 00002A7C EBFFFFFE        BL               output_character
 2683 00002A80 E3A02024        MOV              r2, #0x24   ; $
 2684 00002A84 EBFFFFFE        BL               output_character
 2685 00002A88         ; pause game for 4 cycles to display curse
 2686 00002A88 E59F0548        LDR              r0, =Q_RECENTLY_HIT
 2687 00002A8C E3A01001        MOV              r1, #1
 2688 00002A90 E5C01000        STRB             r1, [r0]
 2689 00002A94 E59F0538        LDR              r0, =DISPLAY_CURSE
 2690 00002A98 E3A01001        MOV              r1, #1
 2691 00002A9C E5C01000        STRB             r1, [r0]
 2692 00002AA0         doneLRR
 2693 00002AA0 E8BD407C        LDMFD            SP!, {r2-r6, lr} 
                                                            ; Restore registers
                                                            
 2694 00002AA4 E12FFF1E        BX               lr
 2695 00002AA8         
 2696 00002AA8         
 2697 00002AA8         
 2698 00002AA8         interrupt_init
 2699 00002AA8 E92D4003        STMFD            SP!, {r0-r1, lr} 
                                                            ; Save registers 
 2700 00002AAC         
 2701 00002AAC         ; Push button setup   
 2702 00002AAC E59F0528        LDR              r0, =0xE002C000
 2703 00002AB0 E5901000        LDR              r1, [r0]
 2704 00002AB4 E3811202        ORR              r1, r1, #0x20000000
 2705 00002AB8 E3C11201        BIC              r1, r1, #0x10000000
 2706 00002ABC E5801000        STR              r1, [r0]    ; PINSEL0 bits 29:2
                                                            8 = 10
 2707 00002AC0         
 2708 00002AC0         ; Classify sources as IRQ or FIQ    
 2709 00002AC0 E59F0518        LDR              r0, =0xFFFFF000
 2710 00002AC4 E590100C        LDR              r1, [r0, #0xC]
 2711 00002AC8 E3811902        ORR              r1, r1, #0x8000 ; External Inte
                                                            rrupt 1
 2712 00002ACC E3811040        ORR              r1, r1, #0x40 ; uart0 interrupt
                                                            
 2713 00002AD0 E3811030        ORR              r1, r1, #0x30 ; Timer0 and Time
                                                            r1 interrupt bits 4
                                                            -5
 2714 00002AD4 E580100C        STR              r1, [r0, #0xC]
 2715 00002AD8         
 2716 00002AD8         ; Enable Interrupts
 2717 00002AD8 E59F0500        LDR              r0, =0xFFFFF000
 2718 00002ADC E5901010        LDR              r1, [r0, #0x10]
 2719 00002AE0 E3811902        ORR              r1, r1, #0x8000 ; External Inte
                                                            rrupt 1
 2720 00002AE4 E3811040        ORR              r1, r1, #0x40 ; uart0 interrupt
                                                            
 2721 00002AE8 E3811030        ORR              r1, r1, #0x30 ; Timer0 and Time



ARM Macro Assembler    Page 66 


                                                            r1 interrupt bits 4
                                                            -5
 2722 00002AEC E5801010        STR              r1, [r0, #0x10]
 2723 00002AF0         
 2724 00002AF0         ; External Interrupt 1 setup for edge sensitive
 2725 00002AF0 E59F04EC        LDR              r0, =0xE01FC148
 2726 00002AF4 E5901000        LDR              r1, [r0]
 2727 00002AF8 E3811002        ORR              r1, r1, #2  ; EINT1 = Edge Sens
                                                            itive
 2728 00002AFC E5801000        STR              r1, [r0]
 2729 00002B00         
 2730 00002B00         ; UART0 Interrupt setup
 2731 00002B00 E59F04E0        LDR              r0, =0xe000C004
 2732 00002B04 E5901000        LDR              r1, [r0]
 2733 00002B08 E3811001        ORR              r1, r1, #1
 2734 00002B0C E5801000        STR              r1, [r0]
 2735 00002B10         
 2736 00002B10         ; Timer0 Interrupt setup
 2737 00002B10 E59F04D4        LDR              r0, =0xE0004014 ; T0MCR
 2738 00002B14 E5901000        LDR              r1, [r0]
 2739 00002B18         ; bit 3 set to 1 generates an interrupt when MR1 = TC
 2740 00002B18         ; bit 4 set to 1 resets the TC when MR1 = TC
 2741 00002B18         ; bit 5 set to 1 stops the timer when MR1 = TC
 2742 00002B18 E3811038        ORR              r1, r1, #0x38 ;18
 2743 00002B1C E5801000        STR              r1, [r0]
 2744 00002B20         
 2745 00002B20         ; TODO Timer1 interrupt setup
 2746 00002B20 E59F04C8        LDR              r0, =0xE0008014 ; T1MCR
 2747 00002B24 E5901000        LDR              r1, [r0]
 2748 00002B28         ; bit 3 set to 1 generates an interrupt when MR1 = TC
 2749 00002B28         ; bit 4 set to 1 resets the TC when MR1 = TC
 2750 00002B28         ; bit 5 set to 1 stops the timer when MR1 = TC
 2751 00002B28 E3811038        ORR              r1, r1, #0x38 ;18
 2752 00002B2C E5801000        STR              r1, [r0]
 2753 00002B30         
 2754 00002B30         ; Enable FIQ's, Disable IRQ's
 2755 00002B30 E10F0000        MRS              r0, CPSR
 2756 00002B34 E3C00040        BIC              r0, r0, #0x40
 2757 00002B38 E3800080        ORR              r0, r0, #0x80
 2758 00002B3C E121F000        MSR              CPSR_c, r0
 2759 00002B40         
 2760 00002B40 E8BD4003        LDMFD            SP!, {r0-r1, lr} 
                                                            ; Restore registers
                                                            
 2761 00002B44 E12FFF1E        BX               lr          ; Return
 2762 00002B48         
 2763 00002B48         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;
 2764 00002B48         ;;   FIQ HANDLER           ;;
 2765 00002B48         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;
 2766 00002B48         FIQ_Handler
 2767 00002B48 E92D47FF        STMFD            SP!, {r0-r10, lr} 
                                                            ; Save registers
 2768 00002B4C         ; check if at game over screen
 2769 00002B4C         ;LDR r0, =IS_GAMEOVER_SCREEN
 2770 00002B4C         ;LDR r1, [r0]
 2771 00002B4C         ;CMP r1, #1      ; set = at game over screen
 2772 00002B4C         ;BEQ checkKBinterrupt  ; only check for new game and qui



ARM Macro Assembler    Page 67 


                       t keys
 2773 00002B4C         
 2774 00002B4C         EINT1                                ; Check for EINT1 i
                                                            nterrupt
 2775 00002B4C E59F04A0        LDR              r0, =0xE01FC140 ; push button
 2776 00002B50 E5901000        LDR              r1, [r0]
 2777 00002B54 E3110002        TST              r1, #2      ; check if 3 bit is
                                                             1   
 2778 00002B58 0A000058        BEQ              timer0Interrupt
 2779 00002B5C         
 2780 00002B5C E3811002        ORR              r1, r1, #2  ; Clear Interrupt
 2781 00002B60 E5801000        STR              r1, [r0]
 2782 00002B64         
 2783 00002B64         ; check if at game over screen
 2784 00002B64 E59F048C        LDR              r0, =IS_GAMEOVER_SCREEN
 2785 00002B68 E5901000        LDR              r1, [r0]
 2786 00002B6C E3510001        CMP              r1, #1      ; set = at game ove
                                                            r screen
 2787 00002B70 0A000052        BEQ              timer0Interrupt ; only check fo
                                                            r new game and quit
                                                             keys
 2788 00002B74         ; check if Q recently hit
 2789 00002B74 E59F045C        LDR              r0, =Q_RECENTLY_HIT
 2790 00002B78 E5901000        LDR              r1, [r0]
 2791 00002B7C E3510001        CMP              r1, #1      ; set = at game ove
                                                            r screen
 2792 00002B80 0A00004E        BEQ              timer0Interrupt ; only check fo
                                                            r new game and quit
                                                             keys
 2793 00002B84         
 2794 00002B84         ; Push button EINT1 Handling Code
 2795 00002B84         ; Check if game is currently paused
 2796 00002B84 E59F3470        LDR              r3, =IS_PAUSED
 2797 00002B88 E5D34000        LDRB             r4, [r3]
 2798 00002B8C E3540001        CMP              r4, #1
 2799 00002B90 0A000024        BEQ              unpause
 2800 00002B94         ; Pause timer0
 2801 00002B94 E59F0464        LDR              r0, =0xE0004004 ; (T0TCR) Timer
                                                             0 timer control re
                                                            g
 2802 00002B98 E5901000        LDR              r1, [r0]
 2803 00002B9C E2011000        AND              r1, r1, #0  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
 2804 00002BA0 E5801000        STR              r1, [r0]
 2805 00002BA4         ; Pause timer1
 2806 00002BA4 E59F0458        LDR              r0, =0xE0008004 ; (T1TCR) Timer
                                                             1 timer control re
                                                            g
 2807 00002BA8 E5901000        LDR              r1, [r0]
 2808 00002BAC E2011000        AND              r1, r1, #0  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
 2809 00002BB0 E5801000        STR              r1, [r0]
 2810 00002BB4         ; Set pause flag
 2811 00002BB4 E3A00001        MOV              r0, #1
 2812 00002BB8 E5C30000        STRB             r0, [r3]
 2813 00002BBC         ; Set RGB to blue while paused
 2814 00002BBC E3A04002        MOV              r4, #2



ARM Macro Assembler    Page 68 


 2815 00002BC0 EBFFFFFE        BL               illuminate_RGB_LED
 2816 00002BC4         ; Write "PAUSED" to the game
 2817 00002BC4 E3A0201B        MOV              r2, #0x1B   ; ESC
 2818 00002BC8 EBFFFFFE        BL               output_character
 2819 00002BCC E3A0205B        MOV              r2, #0x5B   ; [
 2820 00002BD0 EBFFFFFE        BL               output_character
 2821 00002BD4 E3A02031        MOV              r2, #0x31   ; move to line 1   
                                                             
 2822 00002BD8 EBFFFFFE        BL               output_character
 2823 00002BDC E3A0203B        MOV              r2, #0x3B   ; ;
 2824 00002BE0 EBFFFFFE        BL               output_character
 2825 00002BE4 E3A02031        MOV              r2, #0x31   ; move to column 12
                                                               
 2826 00002BE8 EBFFFFFE        BL               output_character
 2827 00002BEC E3A02032        MOV              r2, #0x32
 2828 00002BF0 EBFFFFFE        BL               output_character
 2829 00002BF4 E3A02066        MOV              r2, #0x66   ; f
 2830 00002BF8 EBFFFFFE        BL               output_character
 2831 00002BFC E3A02050        MOV              r2, #0x50   ; P
 2832 00002C00 EBFFFFFE        BL               output_character
 2833 00002C04 E3A02041        MOV              r2, #0x41   ; A
 2834 00002C08 EBFFFFFE        BL               output_character
 2835 00002C0C E3A02055        MOV              r2, #0x55   ; U
 2836 00002C10 EBFFFFFE        BL               output_character
 2837 00002C14 E3A02053        MOV              r2, #0x53   ; S
 2838 00002C18 EBFFFFFE        BL               output_character
 2839 00002C1C E3A02045        MOV              r2, #0x45   ; E
 2840 00002C20 EBFFFFFE        BL               output_character
 2841 00002C24 EA0000DE        B                pausedFIQExit
 2842 00002C28         unpause
 2843 00002C28         ; Clear pause flag
 2844 00002C28 E59F33CC        LDR              r3, =IS_PAUSED
 2845 00002C2C E3A00000        MOV              r0, #0
 2846 00002C30 E5C30000        STRB             r0, [r3]
 2847 00002C34         ; Unpause timer0
 2848 00002C34 E59F03C4        LDR              r0, =0xE0004004 ; (T0TCR) Timer
                                                             0 timer control re
                                                            g
 2849 00002C38 E5901000        LDR              r1, [r0]
 2850 00002C3C E3811001        ORR              r1, r1, #1  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
 2851 00002C40 E5801000        STR              r1, [r0]
 2852 00002C44         ; Unpause timer1
 2853 00002C44 E59F03B8        LDR              r0, =0xE0008004 ; (T1TCR) Timer
                                                             1 timer control re
                                                            g
 2854 00002C48 E5901000        LDR              r1, [r0]
 2855 00002C4C E3811001        ORR              r1, r1, #1  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
 2856 00002C50 E5801000        STR              r1, [r0]
 2857 00002C54         ; Set RGB to green when unpasued
 2858 00002C54 E3A04001        MOV              r4, #1
 2859 00002C58 EBFFFFFE        BL               illuminate_RGB_LED
 2860 00002C5C         ; Write "     " to the game
 2861 00002C5C E3A0201B        MOV              r2, #0x1B   ; ESC
 2862 00002C60 EBFFFFFE        BL               output_character
 2863 00002C64 E3A0205B        MOV              r2, #0x5B   ; [



ARM Macro Assembler    Page 69 


 2864 00002C68 EBFFFFFE        BL               output_character
 2865 00002C6C E3A02031        MOV              r2, #0x31   ; move to line 1   
                                                             
 2866 00002C70 EBFFFFFE        BL               output_character
 2867 00002C74 E3A0203B        MOV              r2, #0x3B   ; ;
 2868 00002C78 EBFFFFFE        BL               output_character
 2869 00002C7C E3A02031        MOV              r2, #0x31   ; move to column 12
                                                               
 2870 00002C80 EBFFFFFE        BL               output_character
 2871 00002C84 E3A02032        MOV              r2, #0x32
 2872 00002C88 EBFFFFFE        BL               output_character
 2873 00002C8C E3A02066        MOV              r2, #0x66   ; f
 2874 00002C90 EBFFFFFE        BL               output_character
 2875 00002C94 E3A02020        MOV              r2, #0x20   ; space
 2876 00002C98 EBFFFFFE        BL               output_character
 2877 00002C9C E3A02020        MOV              r2, #0x20   ; space
 2878 00002CA0 EBFFFFFE        BL               output_character
 2879 00002CA4 E3A02020        MOV              r2, #0x20   ; space
 2880 00002CA8 EBFFFFFE        BL               output_character
 2881 00002CAC E3A02020        MOV              r2, #0x20   ; space
 2882 00002CB0 EBFFFFFE        BL               output_character
 2883 00002CB4 E3A02020        MOV              r2, #0x20   ; space
 2884 00002CB8 EBFFFFFE        BL               output_character
 2885 00002CBC EA00009C        B                FIQ_Exit
 2886 00002CC0         
 2887 00002CC0         
 2888 00002CC0         timer0Interrupt                      ; Check if timer0 i
                                                            nterrupt
 2889 00002CC0         
 2890 00002CC0 E59F0340        LDR              r0, =0xE0004000 
                                                            ; Timer 0 (T0IR)
 2891 00002CC4 E5901000        LDR              r1, [r0]
 2892 00002CC8         ; bit 3 is set if timer interrupt
 2893 00002CC8 E3110002        TST              r1, #2
 2894 00002CCC 0A000055        BEQ              timer1Interrupt
 2895 00002CD0         ; Clear Interrupt by writing 1 to bit 1
 2896 00002CD0 E3811002        ORR              r1, r1, #2
 2897 00002CD4 E5801000        STR              r1, [r0]
 2898 00002CD8         ; Timer 0 Handling Code
 2899 00002CD8         ; check if at game over screen
 2900 00002CD8 E59F0318        LDR              r0, =IS_GAMEOVER_SCREEN
 2901 00002CDC E5901000        LDR              r1, [r0]
 2902 00002CE0 E3510001        CMP              r1, #1      ; set = at game ove
                                                            r screen
 2903 00002CE4 0A00002E        BEQ              allowDurGamOvr ; only check for
                                                             new game and quit 
                                                            keys
 2904 00002CE8         ; check if Q recently hit
 2905 00002CE8 E59F02E8        LDR              r0, =Q_RECENTLY_HIT
 2906 00002CEC E5901000        LDR              r1, [r0]
 2907 00002CF0 E3510001        CMP              r1, #1      ; set = at game ove
                                                            r screen
 2908 00002CF4 0A00002A        BEQ              allowDurGamOvr ; only check for
                                                             new game and quit 
                                                            keys
 2909 00002CF8         ; Check if game is currently paused
 2910 00002CF8 E59F32FC        LDR              r3, =IS_PAUSED
 2911 00002CFC E5D34000        LDRB             r4, [r3]
 2912 00002D00 E3540001        CMP              r4, #1



ARM Macro Assembler    Page 70 


 2913 00002D04 0A0000A6        BEQ              pausedFIQExit
 2914 00002D08         ; Spawn an enemy if time is > 2s and NUMENEMIES < 2
 2915 00002D08 E51F3604        LDR              r3, =NUM_HALF_SECS
 2916 00002D0C E5934000        LDR              r4, [r3]
 2917 00002D10 E2844001        ADD              r4, r4, #1
 2918 00002D14 E5834000        STR              r4, [r3]
 2919 00002D18 E3540004        CMP              r4, #4
 2920 00002D1C BA00001D        BLT              not2Secs
 2921 00002D20 E51F3620        LDR              r3, =NUM_BALLS
 2922 00002D24 E5934000        LDR              r4, [r3]
 2923 00002D28 E3540002        CMP              r4, #2      ; Check if there ar
                                                            e 2 balls already
 2924 00002D2C BBFFF96B        BLLT             spawnEnemy
 2925 00002D30         ; Move enemy 1 every 2 cycles 
 2926 00002D30 E51F362C        LDR              r3, =NUM_HALF_SECS
 2927 00002D34 E5930000        LDR              r0, [r3]
 2928 00002D38 E3500004        CMP              r0, #4
 2929 00002D3C 0A000015        BEQ              not2Secs    ; dont move o on fi
                                                            rst itteration (4 0
                                                            .5s)
 2930 00002D40         
 2931 00002D40         checkOthers
 2932 00002D40 E3A01002        MOV              r1, #2      ; divisor
 2933 00002D44 EBFFFFFE        BL               div_and_mod
 2934 00002D48 E1A06001        MOV              r6, r1
 2935 00002D4C E3560000        CMP              r6, #0      ; check if remainde
                                                            r is 0 (otherwise 1
                                                            )
 2936 00002D50 1A00000F        BNE              notSpawning
 2937 00002D54         ;Check if enemy is spawned and move it if true 1move/sec
                       
 2938 00002D54 E51F0630        LDR              r0, =SNAKE_SQUARE
 2939 00002D58 E5901000        LDR              r1, [r0]
 2940 00002D5C E3510000        CMP              r1, #0
 2941 00002D60 1BFFFA66        BLNE             moveSnake
 2942 00002D64 E51F0658        LDR              r0, =BALL1_SQUARE
 2943 00002D68 E5901000        LDR              r1, [r0]
 2944 00002D6C E3510000        CMP              r1, #0
 2945 00002D70 1BFFFC34        BLNE             moveBall1   ; Move enemy once e
                                                            very 2s if spawned
 2946 00002D74 E51F068C        LDR              r0, =BALL2_SQUARE
 2947 00002D78 E5901000        LDR              r1, [r0]
 2948 00002D7C E3510000        CMP              r1, #0
 2949 00002D80 1BFFFC62        BLNE             moveBall2
 2950 00002D84 E51F068C        LDR              r0, =SNAKEBALL_SQUARE
 2951 00002D88 E5901000        LDR              r1, [r0]
 2952 00002D8C E3510000        CMP              r1, #0
 2953 00002D90 1BFFFBE0        BLNE             moveSnakeBall
 2954 00002D94         
 2955 00002D94         notSpawning
 2956 00002D94 EBFFFD8C        BL               didoHitQ
 2957 00002D98         
 2958 00002D98         not2Secs                             ; no enemies spawne
                                                            d in first 2 second
                                                            s  
 2959 00002D98         ; Reset Q_MOVES  so q can move twice again during next t
                       urn
 2960 00002D98 E59F326C        LDR              r3, =Q_MOVES
 2961 00002D9C E3A04001        MOV              r4, #1



ARM Macro Assembler    Page 71 


 2962 00002DA0 E5834000        STR              r4, [r3]
 2963 00002DA4         
 2964 00002DA4         allowDurGamOvr
 2965 00002DA4         ; Blink if recently died
 2966 00002DA4 EBFFF81C        BL               blinkOnDeath
 2967 00002DA8         
 2968 00002DA8         ; Check if displaying curse
 2969 00002DA8 E59F0224        LDR              r0, =DISPLAY_CURSE
 2970 00002DAC E5901000        LDR              r1, [r0]
 2971 00002DB0 E3510000        CMP              r1, #0
 2972 00002DB4 0A00000E        BEQ              notCurse    ; 0 = no curse curr
                                                            ently displayed
 2973 00002DB8 E3510004        CMP              r1, #4
 2974 00002DBC 0A000002        BEQ              removeCurse ; check if curse ha
                                                            s been displayed fo
                                                            r 2 secs
 2975 00002DC0 E2811001        ADD              r1, r1, #1
 2976 00002DC4 E5801000        STR              r1, [r0]    ; increment count b
                                                            y 1 if not and exit
                                                            
 2977 00002DC8 EA000059        B                FIQ_Exit
 2978 00002DCC         removeCurse
 2979 00002DCC E59F0204        LDR              r0, =Q_RECENTLY_HIT
 2980 00002DD0 E5801000        STR              r1, [r0]    ; clear game over s
                                                            tatus
 2981 00002DD4 EBFFFE15        BL               qCurse      ; remove the curse
 2982 00002DD8 E51F06B0        LDR              r0, =Q_DIRECTION
 2983 00002DDC E3A01000        MOV              r1, #0
 2984 00002DE0 E5801000        STR              r1, [r0]
 2985 00002DE4         ; TODO check which ball
 2986 00002DE4 E51F06D8        LDR              r0, =BALL1_SQUARE ; set ball to
                                                             no square
 2987 00002DE8 E3A01000        MOV              r1, #0
 2988 00002DEC E5801000        STR              r1, [r0]
 2989 00002DF0 EBFFF73B        BL               redrawQ
 2990 00002DF4         
 2991 00002DF4         
 2992 00002DF4         notCurse
 2993 00002DF4 E3A02000        MOV              r2, #0      ; increment by 1 wh
                                                            en 0 LIVES or 0 BLI
                                                            NK
 2994 00002DF8         ; Check if Game Over, and set RGB to purple if yes
 2995 00002DF8 E59F01F8        LDR              r0, =IS_GAMEOVER_SCREEN
 2996 00002DFC E5901000        LDR              r1, [r0]
 2997 00002E00 E3510001        CMP              r1, #1
 2998 00002E04 02822001        ADDEQ            r2, #1
 2999 00002E08         ; Check if BLINK is zero
 3000 00002E08 E59F3200        LDR              r3, =BLINK
 3001 00002E0C E5934000        LDR              r4, [r3]
 3002 00002E10 E3540000        CMP              r4, #0
 3003 00002E14 02822001        ADDEQ            r2, #1
 3004 00002E18         ; If both zero, set RGB to purple for game over
 3005 00002E18 E3520002        CMP              r2, #2
 3006 00002E1C 03A04003        MOVEQ            r4, #3
 3007 00002E20 0BFFFFFE        BLEQ             illuminate_RGB_LED
 3008 00002E24         
 3009 00002E24 EA000042        B                FIQ_Exit
 3010 00002E28         
 3011 00002E28         



ARM Macro Assembler    Page 72 


 3012 00002E28         
 3013 00002E28         timer1Interrupt                      ; Check if timer1 i
                                                            nterrupt
 3014 00002E28 E59F01C8        LDR              r0, =IS_GAMEOVER_SCREEN
 3015 00002E2C E5901000        LDR              r1, [r0]
 3016 00002E30 E3510001        CMP              r1, #1      ; set = at game ove
                                                            r screen
 3017 00002E34 0A00000F        BEQ              checkKBinterrupt ; only check f
                                                            or new game and qui
                                                            t keys
 3018 00002E38         ; check if Q recently hit
 3019 00002E38 E59F0198        LDR              r0, =Q_RECENTLY_HIT
 3020 00002E3C E5901000        LDR              r1, [r0]
 3021 00002E40 E3510001        CMP              r1, #1      ; set = at game ove
                                                            r screen
 3022 00002E44 0A00000B        BEQ              checkKBinterrupt ; only check f
                                                            or new game and qui
                                                            t keys
 3023 00002E48         
 3024 00002E48 E59F01C4        LDR              r0, =0xE0008000 
                                                            ; Timer 1 (T1IR)
 3025 00002E4C E5901000        LDR              r1, [r0]
 3026 00002E50         ; bit 2 is set if timer interrupt
 3027 00002E50 E3110002        TST              r1, #2
 3028 00002E54 0A000007        BEQ              checkKBinterrupt
 3029 00002E58         ; Clear Interrupt by writing 1 to bit 1
 3030 00002E58 E3811002        ORR              r1, r1, #2
 3031 00002E5C E5801000        STR              r1, [r0]
 3032 00002E60         ; Check if game is currently paused
 3033 00002E60 E59F3194        LDR              r3, =IS_PAUSED
 3034 00002E64 E5D34000        LDRB             r4, [r3]
 3035 00002E68 E3540001        CMP              r4, #1
 3036 00002E6C 0A00004C        BEQ              pausedFIQExit
 3037 00002E70         ; Timer 1 Handling Code
 3038 00002E70 EBFFF6AF        BL               gameOver    ; Game over when ti
                                                            mer reaches 2 mins
 3039 00002E74 EA00004A        B                pausedFIQExit ; dont restart ti
                                                            mers on FIQ exit
 3040 00002E78         
 3041 00002E78         
 3042 00002E78         ;EINT1 ; Check for EINT1 interrupt
 3043 00002E78         
 3044 00002E78         
 3045 00002E78         ;;;;;;;;;;;;; TODO PRESSING OTHER KEYS IS GIVING RANDOM 
                       !!!!!!!
 3046 00002E78         checkKBinterrupt                     ; Check if keyboard
                                                             interrupt
 3047 00002E78 E59F0198        LDR              r0, =0xe000C008 ; uart0
 3048 00002E7C E5901000        LDR              r1, [r0]
 3049 00002E80 E3110000        TST              r1, #0      ; check if 0 bit is
                                                             not 1
 3050 00002E84 1A00002A        BNE              FIQ_Exit    ; If not, exit hand
                                                            ler
 3051 00002E88         ;UART0 is cleared automatically when data is read
 3052 00002E88         
 3053 00002E88         
 3054 00002E88         
 3055 00002E88         ; Check if game is currently paused
 3056 00002E88 E59F316C        LDR              r3, =IS_PAUSED



ARM Macro Assembler    Page 73 


 3057 00002E8C E5D34000        LDRB             r4, [r3]
 3058 00002E90 E3540001        CMP              r4, #1
 3059 00002E94 0A000042        BEQ              pausedFIQExit
 3060 00002E98         ; keyboard Handling Code
 3061 00002E98 EBFFFFFE        BL               read_character
 3062 00002E9C         ; If spacebar
 3063 00002E9C E3520020        CMP              r2, #0x20   ; Spacebar
 3064 00002EA0 0B000041        BLEQ             quit        ; quit program
 3065 00002EA4         ; If g
 3066 00002EA4 E3520067        CMP              r2, #0x67   ; New Game
 3067 00002EA8 0BFFF653        BLEQ             newGame     ; Start new Game
 3068 00002EAC 0B000020        BLEQ             FIQ_Exit
 3069 00002EB0         
 3070 00002EB0         ; check if at game over screen
 3071 00002EB0 E59F0140        LDR              r0, =IS_GAMEOVER_SCREEN
 3072 00002EB4 E5901000        LDR              r1, [r0]
 3073 00002EB8 E3510001        CMP              r1, #1      ; set = at game ove
                                                            r screen
 3074 00002EBC 0A000038        BEQ              pausedFIQExit ; only check for 
                                                            new game and quit k
                                                            eys
 3075 00002EC0         ; check if Q recently hit
 3076 00002EC0 E59F0110        LDR              r0, =Q_RECENTLY_HIT
 3077 00002EC4 E5901000        LDR              r1, [r0]
 3078 00002EC8 E3510001        CMP              r1, #1      ; set = at game ove
                                                            r screen
 3079 00002ECC 0A000034        BEQ              pausedFIQExit ; only check for 
                                                            new game and quit k
                                                            eys
 3080 00002ED0         
 3081 00002ED0         
 3082 00002ED0 E51F37A8        LDR              r3, =Q_DIRECTION
 3083 00002ED4 E3520077        CMP              r2, #0x77   ; w
 3084 00002ED8 03A01001        MOVEQ            r1, #1      ; set direction up
 3085 00002EDC 0A000009        BEQ              storeDir
 3086 00002EE0 E3520061        CMP              r2, #0x61   ; a
 3087 00002EE4 03A01002        MOVEQ            r1, #2      ; set direction lef
                                                            t
 3088 00002EE8 0A000006        BEQ              storeDir
 3089 00002EEC E3520073        CMP              r2, #0x73   ; s
 3090 00002EF0 03A01003        MOVEQ            r1, #3      ; set direction dow
                                                            n
 3091 00002EF4 0A000003        BEQ              storeDir
 3092 00002EF8 E3520064        CMP              r2, #0x64   ; d
 3093 00002EFC 03A01004        MOVEQ            r1, #4      ; set direction rig
                                                            ht
 3094 00002F00 0A000000        BEQ              storeDir
 3095 00002F04 E3A01000        MOV              r1, #0      ; If not w,a,s,d th
                                                            en set direction to
                                                             none
 3096 00002F08         storeDir
 3097 00002F08 E5831000        STR              r1, [r3]    ; Store the new dir
                                                            ection
 3098 00002F0C         
 3099 00002F0C         ; Check if Q has any moves left this turn
 3100 00002F0C E59F30F8        LDR              r3, =Q_MOVES
 3101 00002F10 E5934000        LDR              r4, [r3]
 3102 00002F14 E3540000        CMP              r4, #0
 3103 00002F18 DA000005        BLE              outOfMoves  ; do not move Q if 



ARM Macro Assembler    Page 74 


                                                            out of moves
 3104 00002F1C EBFFF6CE        BL               removeQ
 3105 00002F20 EBFFF6EF        BL               redrawQ
 3106 00002F24 EBFFF8C5        BL               updateScore
 3107 00002F28 EBFFFD27        BL               didoHitQ
 3108 00002F2C E2444001        SUB              r4, r4, #1  ; decrement Q_MOVES
                                                             by 1
 3109 00002F30 E5834000        STR              r4, [r3]
 3110 00002F34         outOfMoves
 3111 00002F34         
 3112 00002F34         FIQ_Exit
 3113 00002F34         ; Re-enable timer0
 3114 00002F34 E59F20E0        LDR              r2, =0xE000401C ; Address of Ma
                                                            tch Register 0 (MR0
                                                            )
 3115 00002F38         ;LDR r0, =36864000      ; timeout period of the timer (2
                       s)
 3116 00002F38         ;LDR r0, =18432000      ; timeout period of the timer (1
                       s) 
 3117 00002F38 E59F00E0        LDR              r0, =9216000 ; timeout period o
                                                            f the timer (0.5s)
 3118 00002F3C         ;LDR r0, =8755200      ; timeout period of the timer (0.
                       45s)
 3119 00002F3C         
 3120 00002F3C E59F40E0        LDR              r4, =INC_TIMER_FLAG ; Check if 
                                                            timer needs to be s
                                                            peed up
 3121 00002F40 E5945000        LDR              r5, [r4]    ; 0=no 1=yes
 3122 00002F44 E3550000        CMP              r5, #0
 3123 00002F48 0A00000D        BEQ              noIncrease
 3124 00002F4C E3A05000        MOV              r5, #0      ; timer is no up to
                                                             date
 3125 00002F50 E5845000        STR              r5, [r4]    ; clear flag
 3126 00002F54         ; Increase speed 
 3127 00002F54 E59F30CC        LDR              r3, =LEVEL
 3128 00002F58 E5931000        LDR              r1, [r3]
 3129 00002F5C E3A04000        MOV              r4, #0
 3130 00002F60         ;LDR r5, =2448000
 3131 00002F60 E59F50C4        LDR              r5, =460800
 3132 00002F64         mulAgain1                            ; 5% of 0.5s timeou
                                                            t
 3133 00002F64 E2411001        SUB              r1, r1, #1  ; multiply that per
                                                            cent by the LEVEL-1
                                                            
 3134 00002F68 E3510000        CMP              r1, #0
 3135 00002F6C C0844005        ADDGT            r4, r4, r5
 3136 00002F70 CAFFFFFB        BGT              mulAgain1
 3137 00002F74 E0400004        SUB              r0, r0, r4  ; Subtract that num
                                                            ber from .5s timout
                                                                      
 3138 00002F78 E5820000        STR              r0, [r2]
 3139 00002F7C E59F2098        LDR              r2, =0xE000401C ; Address of Ma
                                                            tch Register 0 (MR0
                                                            )
 3140 00002F80 E5923000        LDR              r3, [r2]
 3141 00002F84         noIncrease
 3142 00002F84 E59F0074        LDR              r0, =0xE0004004 ; (T0TCR) Timer
                                                             0 timer control re
                                                            g



ARM Macro Assembler    Page 75 


 3143 00002F88 E5901000        LDR              r1, [r0]
 3144 00002F8C E3811001        ORR              r1, r1, #1  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
 3145 00002F90 E5801000        STR              r1, [r0]
 3146 00002F94         
 3147 00002F94         ; Re-enable timer1
 3148 00002F94 E59F0068        LDR              r0, =0xE0008004 ; (T1TCR) Timer
                                                             1 timer control re
                                                            g
 3149 00002F98 E5901000        LDR              r1, [r0]
 3150 00002F9C E3811001        ORR              r1, r1, #1  ; set bit 0 to 1 to
                                                             enable, or 0 to di
                                                            sable
 3151 00002FA0 E5801000        STR              r1, [r0]
 3152 00002FA4         
 3153 00002FA4         pausedFIQExit
 3154 00002FA4         ;BL interrupt_init 
 3155 00002FA4 E8BD47FF        LDMFD            SP!, {r0-r10, lr}
 3156 00002FA8 E25EF004        SUBS             pc, lr, #4
 3157 00002FAC         
 3158 00002FAC         
 3159 00002FAC         quit
 3160 00002FAC E3A0200C        MOV              r2, #0x0C   ; ASCII 0x0C is for
                                                             new page
 3161 00002FB0 EBFFFFFE        BL               output_character 
                                                            ; Clear the screen
 3162 00002FB4 E3A04010        MOV              r4, #16     ; Clear the 7-seg d
                                                            isplay
 3163 00002FB8 EBFFFFFE        BL               display_digit_on_7_seg
 3164 00002FBC E3A04006        MOV              r4, #6      ; Turn off RGB LCD
 3165 00002FC0 EBFFFFFE        BL               illuminate_RGB_LED
 3166 00002FC4 E3A0480F        MOV              r4, #0xF0000 ; Turn off all 4 L
                                                            CDs   
 3167 00002FC8 EBFFFFFE        BL               illuminateLEDs
 3168 00002FCC E8BD4000        LDMFD            SP!, {lr}   ; Restore register 
                                                            lr from stack 
 3169 00002FD0 E12FFF1E        BX               LR
 3170 00002FD4                 END
              00000000 
              00000000 
              E002C000 
              FFFFF000 
              E01FC148 
              E000C004 
              E0004014 
              E0008014 
              E01FC140 
              00000000 
              00000000 
              E0004004 
              E0008004 
              E0004000 
              00000000 
              00000000 
              E0008000 
              E000C008 
              E000401C 
              008CA000 



ARM Macro Assembler    Page 76 


              00000000 
              00000000 
              00070800 
Command Line: --debug --xref --apcs=interwork -olab7.o -IC:\Keil\ARM\INC -IC:\K
eil\ARM\INC\Philips --predefine="__EVAL SETA 1" --list=lab7.lst lab7.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BALL1_DIRECTION 000006F8

Symbol: BALL1_DIRECTION
   Definitions
      At line 67 in file lab7.s
   Uses
      None
Comment: BALL1_DIRECTION unused
BALL1_FELL_OFF 000007AC

Symbol: BALL1_FELL_OFF
   Definitions
      At line 113 in file lab7.s
   Uses
      At line 591 in file lab7.s
      At line 2013 in file lab7.s
      At line 2055 in file lab7.s

BALL1_SQUARE 000006FC

Symbol: BALL1_SQUARE
   Definitions
      At line 68 in file lab7.s
   Uses
      At line 157 in file lab7.s
      At line 340 in file lab7.s
      At line 984 in file lab7.s
      At line 1062 in file lab7.s
      At line 1075 in file lab7.s
      At line 1134 in file lab7.s
      At line 1147 in file lab7.s
      At line 1834 in file lab7.s
      At line 2024 in file lab7.s
      At line 2031 in file lab7.s
      At line 2052 in file lab7.s
      At line 2195 in file lab7.s
      At line 2300 in file lab7.s
      At line 2307 in file lab7.s
      At line 2313 in file lab7.s
      At line 2319 in file lab7.s
      At line 2325 in file lab7.s
      At line 2331 in file lab7.s
      At line 2942 in file lab7.s
      At line 2986 in file lab7.s

BALL1_X_POSITION 000006F0

Symbol: BALL1_X_POSITION
   Definitions
      At line 65 in file lab7.s
   Uses
      At line 1069 in file lab7.s
      At line 1141 in file lab7.s
      At line 1790 in file lab7.s
      At line 1833 in file lab7.s
      At line 1983 in file lab7.s

BALL1_Y_POSITION 000006F4




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: BALL1_Y_POSITION
   Definitions
      At line 66 in file lab7.s
   Uses
      At line 1072 in file lab7.s
      At line 1144 in file lab7.s
      At line 1792 in file lab7.s
      At line 1984 in file lab7.s

BALL2_DIRECTION 00000708

Symbol: BALL2_DIRECTION
   Definitions
      At line 71 in file lab7.s
   Uses
      None
Comment: BALL2_DIRECTION unused
BALL2_FELL_OFF 000007B0

Symbol: BALL2_FELL_OFF
   Definitions
      At line 114 in file lab7.s
   Uses
      At line 603 in file lab7.s
      At line 2105 in file lab7.s
      At line 2147 in file lab7.s

BALL2_SQUARE 0000070C

Symbol: BALL2_SQUARE
   Definitions
      At line 72 in file lab7.s
   Uses
      At line 161 in file lab7.s
      At line 344 in file lab7.s
      At line 990 in file lab7.s
      At line 1088 in file lab7.s
      At line 1160 in file lab7.s
      At line 1889 in file lab7.s
      At line 2116 in file lab7.s
      At line 2123 in file lab7.s
      At line 2144 in file lab7.s
      At line 2199 in file lab7.s
      At line 2340 in file lab7.s
      At line 2347 in file lab7.s
      At line 2353 in file lab7.s
      At line 2359 in file lab7.s
      At line 2365 in file lab7.s
      At line 2371 in file lab7.s
      At line 2946 in file lab7.s

BALL2_X_POSITION 00000700

Symbol: BALL2_X_POSITION
   Definitions
      At line 69 in file lab7.s
   Uses
      At line 588 in file lab7.s
      At line 1082 in file lab7.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 1154 in file lab7.s
      At line 1845 in file lab7.s
      At line 1888 in file lab7.s
      At line 2075 in file lab7.s

BALL2_Y_POSITION 00000704

Symbol: BALL2_Y_POSITION
   Definitions
      At line 70 in file lab7.s
   Uses
      At line 1085 in file lab7.s
      At line 1157 in file lab7.s
      At line 1847 in file lab7.s
      At line 2076 in file lab7.s

BLINK 00000794

Symbol: BLINK
   Definitions
      At line 107 in file lab7.s
   Uses
      At line 171 in file lab7.s
      At line 632 in file lab7.s
      At line 662 in file lab7.s
      At line 3000 in file lab7.s

DISPLAY_CURSE 000007BC

Symbol: DISPLAY_CURSE
   Definitions
      At line 117 in file lab7.s
   Uses
      At line 2443 in file lab7.s
      At line 2454 in file lab7.s
      At line 2469 in file lab7.s
      At line 2479 in file lab7.s
      At line 2499 in file lab7.s
      At line 2523 in file lab7.s
      At line 2533 in file lab7.s
      At line 2555 in file lab7.s
      At line 2581 in file lab7.s
      At line 2600 in file lab7.s
      At line 2613 in file lab7.s
      At line 2630 in file lab7.s
      At line 2641 in file lab7.s
      At line 2663 in file lab7.s
      At line 2689 in file lab7.s
      At line 2969 in file lab7.s

EINT1 00002B4C

Symbol: EINT1
   Definitions
      At line 2774 in file lab7.s
   Uses
      None
Comment: EINT1 unused
FIQ_Exit 00002F34



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: FIQ_Exit
   Definitions
      At line 3112 in file lab7.s
   Uses
      At line 2885 in file lab7.s
      At line 2977 in file lab7.s
      At line 3009 in file lab7.s
      At line 3050 in file lab7.s
      At line 3068 in file lab7.s

FIQ_Handler 00002B48

Symbol: FIQ_Handler
   Definitions
      At line 2766 in file lab7.s
   Uses
      At line 3 in file lab7.s
Comment: FIQ_Handler used once
GAME_BOARD 00000000

Symbol: GAME_BOARD
   Definitions
      At line 31 in file lab7.s
   Uses
      At line 226 in file lab7.s
      At line 350 in file lab7.s

GAME_OVER 00000652

Symbol: GAME_OVER
   Definitions
      At line 55 in file lab7.s
   Uses
      At line 279 in file lab7.s
Comment: GAME_OVER used once
INC_TIMER_FLAG 0000079C

Symbol: INC_TIMER_FLAG
   Definitions
      At line 109 in file lab7.s
   Uses
      At line 354 in file lab7.s
      At line 3120 in file lab7.s

INTRO 00000318

Symbol: INTRO
   Definitions
      At line 51 in file lab7.s
   Uses
      At line 138 in file lab7.s
Comment: INTRO used once
IS_GAMEOVER_SCREEN 000007B8

Symbol: IS_GAMEOVER_SCREEN
   Definitions
      At line 116 in file lab7.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 152 in file lab7.s
      At line 302 in file lab7.s
      At line 312 in file lab7.s
      At line 374 in file lab7.s
      At line 2784 in file lab7.s
      At line 2900 in file lab7.s
      At line 2995 in file lab7.s
      At line 3014 in file lab7.s
      At line 3071 in file lab7.s

IS_PAUSED 000007A8

Symbol: IS_PAUSED
   Definitions
      At line 112 in file lab7.s
   Uses
      At line 2796 in file lab7.s
      At line 2844 in file lab7.s
      At line 2910 in file lab7.s
      At line 3033 in file lab7.s
      At line 3056 in file lab7.s

LEVEL 00000730

Symbol: LEVEL
   Definitions
      At line 81 in file lab7.s
   Uses
      At line 194 in file lab7.s
      At line 316 in file lab7.s
      At line 3127 in file lab7.s

LIVES 00000734

Symbol: LIVES
   Definitions
      At line 82 in file lab7.s
   Uses
      At line 199 in file lab7.s
      At line 282 in file lab7.s
      At line 480 in file lab7.s
      At line 637 in file lab7.s
      At line 2183 in file lab7.s

NUM_BALLS 000007A0

Symbol: NUM_BALLS
   Definitions
      At line 110 in file lab7.s
   Uses
      At line 186 in file lab7.s
      At line 364 in file lab7.s
      At line 1008 in file lab7.s
      At line 1267 in file lab7.s
      At line 1722 in file lab7.s
      At line 1967 in file lab7.s
      At line 2059 in file lab7.s
      At line 2151 in file lab7.s
      At line 2207 in file lab7.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 2921 in file lab7.s

NUM_HALF_SECS 000007A4

Symbol: NUM_HALF_SECS
   Definitions
      At line 111 in file lab7.s
   Uses
      At line 176 in file lab7.s
      At line 360 in file lab7.s
      At line 1272 in file lab7.s
      At line 1972 in file lab7.s
      At line 2064 in file lab7.s
      At line 2156 in file lab7.s
      At line 2915 in file lab7.s
      At line 2926 in file lab7.s

Q_DIRECTION 000006E8

Symbol: Q_DIRECTION
   Definitions
      At line 63 in file lab7.s
   Uses
      At line 221 in file lab7.s
      At line 336 in file lab7.s
      At line 420 in file lab7.s
      At line 618 in file lab7.s
      At line 2216 in file lab7.s
      At line 2982 in file lab7.s
      At line 3082 in file lab7.s

Q_MOVES 00000798

Symbol: Q_MOVES
   Definitions
      At line 108 in file lab7.s
   Uses
      At line 2960 in file lab7.s
      At line 3100 in file lab7.s

Q_RECENTLY_HIT 000007C0

Symbol: Q_RECENTLY_HIT
   Definitions
      At line 118 in file lab7.s
   Uses
      At line 2466 in file lab7.s
      At line 2520 in file lab7.s
      At line 2578 in file lab7.s
      At line 2627 in file lab7.s
      At line 2686 in file lab7.s
      At line 2789 in file lab7.s
      At line 2905 in file lab7.s
      At line 2979 in file lab7.s
      At line 3019 in file lab7.s
      At line 3076 in file lab7.s

Q_SQUARE 000006EC




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Symbol: Q_SQUARE
   Definitions
      At line 64 in file lab7.s
   Uses
      At line 476 in file lab7.s
      At line 684 in file lab7.s
      At line 736 in file lab7.s
      At line 771 in file lab7.s
      At line 814 in file lab7.s
      At line 859 in file lab7.s
      At line 895 in file lab7.s
      At line 1238 in file lab7.s
      At line 1285 in file lab7.s
      At line 1934 in file lab7.s
      At line 2022 in file lab7.s
      At line 2114 in file lab7.s
      At line 2174 in file lab7.s
      At line 2219 in file lab7.s
      At line 2225 in file lab7.s
      At line 2231 in file lab7.s
      At line 2237 in file lab7.s
      At line 2243 in file lab7.s
      At line 2249 in file lab7.s
      At line 2258 in file lab7.s
      At line 2265 in file lab7.s
      At line 2271 in file lab7.s
      At line 2277 in file lab7.s
      At line 2283 in file lab7.s
      At line 2289 in file lab7.s
      At line 2298 in file lab7.s
      At line 2305 in file lab7.s
      At line 2311 in file lab7.s
      At line 2317 in file lab7.s
      At line 2323 in file lab7.s
      At line 2329 in file lab7.s
      At line 2338 in file lab7.s
      At line 2345 in file lab7.s
      At line 2351 in file lab7.s
      At line 2357 in file lab7.s
      At line 2363 in file lab7.s
      At line 2369 in file lab7.s
      At line 2383 in file lab7.s

Q_X_POSITION 000006E0

Symbol: Q_X_POSITION
   Definitions
      At line 61 in file lab7.s
   Uses
      At line 213 in file lab7.s
      At line 329 in file lab7.s
      At line 383 in file lab7.s
      At line 422 in file lab7.s
      At line 475 in file lab7.s
      At line 582 in file lab7.s
      At line 611 in file lab7.s
      At line 1287 in file lab7.s
      At line 2177 in file lab7.s




ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Q_Y_POSITION 000006E4

Symbol: Q_Y_POSITION
   Definitions
      At line 62 in file lab7.s
   Uses
      At line 216 in file lab7.s
      At line 332 in file lab7.s
      At line 384 in file lab7.s
      At line 424 in file lab7.s
      At line 614 in file lab7.s
      At line 1289 in file lab7.s
      At line 2180 in file lab7.s

SCORE 00000790

Symbol: SCORE
   Definitions
      At line 106 in file lab7.s
   Uses
      At line 181 in file lab7.s
      At line 286 in file lab7.s
      At line 323 in file lab7.s
      At line 759 in file lab7.s
      At line 803 in file lab7.s
      At line 848 in file lab7.s
      At line 884 in file lab7.s
      At line 929 in file lab7.s
      At line 954 in file lab7.s

SNAKEBALL_DIRECTION 00000718

Symbol: SNAKEBALL_DIRECTION
   Definitions
      At line 75 in file lab7.s
   Uses
      None
Comment: SNAKEBALL_DIRECTION unused
SNAKEBALL_FELL_OFF 000007B4

Symbol: SNAKEBALL_FELL_OFF
   Definitions
      At line 115 in file lab7.s
   Uses
      At line 597 in file lab7.s
      At line 1926 in file lab7.s
      At line 1963 in file lab7.s

SNAKEBALL_SQUARE 0000071C

Symbol: SNAKEBALL_SQUARE
   Definitions
      At line 76 in file lab7.s
   Uses
      At line 164 in file lab7.s
      At line 996 in file lab7.s
      At line 1039 in file lab7.s
      At line 1057 in file lab7.s
      At line 1111 in file lab7.s



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

      At line 1129 in file lab7.s
      At line 1700 in file lab7.s
      At line 1716 in file lab7.s
      At line 1776 in file lab7.s
      At line 1936 in file lab7.s
      At line 1942 in file lab7.s
      At line 1960 in file lab7.s
      At line 2202 in file lab7.s
      At line 2260 in file lab7.s
      At line 2267 in file lab7.s
      At line 2273 in file lab7.s
      At line 2279 in file lab7.s
      At line 2285 in file lab7.s
      At line 2291 in file lab7.s
      At line 2950 in file lab7.s

SNAKEBALL_X_POSITION 00000710

Symbol: SNAKEBALL_X_POSITION
   Definitions
      At line 73 in file lab7.s
   Uses
      At line 585 in file lab7.s
      At line 1051 in file lab7.s
      At line 1123 in file lab7.s
      At line 1705 in file lab7.s
      At line 1732 in file lab7.s
      At line 1775 in file lab7.s
      At line 1897 in file lab7.s

SNAKEBALL_Y_POSITION 00000714

Symbol: SNAKEBALL_Y_POSITION
   Definitions
      At line 74 in file lab7.s
   Uses
      At line 1054 in file lab7.s
      At line 1126 in file lab7.s
      At line 1711 in file lab7.s
      At line 1734 in file lab7.s
      At line 1898 in file lab7.s

SNAKE_DIRECTION 00000728

Symbol: SNAKE_DIRECTION
   Definitions
      At line 79 in file lab7.s
   Uses
      None
Comment: SNAKE_DIRECTION unused
SNAKE_SQUARE 0000072C

Symbol: SNAKE_SQUARE
   Definitions
      At line 80 in file lab7.s
   Uses
      At line 167 in file lab7.s
      At line 1035 in file lab7.s
      At line 1240 in file lab7.s



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

      At line 1246 in file lab7.s
      At line 1263 in file lab7.s
      At line 1291 in file lab7.s
      At line 1691 in file lab7.s
      At line 1717 in file lab7.s
      At line 2205 in file lab7.s
      At line 2221 in file lab7.s
      At line 2227 in file lab7.s
      At line 2233 in file lab7.s
      At line 2239 in file lab7.s
      At line 2245 in file lab7.s
      At line 2251 in file lab7.s
      At line 2938 in file lab7.s

SNAKE_X_POSITION 00000720

Symbol: SNAKE_X_POSITION
   Definitions
      At line 77 in file lab7.s
   Uses
      At line 1170 in file lab7.s
      At line 1209 in file lab7.s
      At line 1293 in file lab7.s
      At line 1690 in file lab7.s
      At line 1706 in file lab7.s

SNAKE_Y_POSITION 00000724

Symbol: SNAKE_Y_POSITION
   Definitions
      At line 78 in file lab7.s
   Uses
      At line 1172 in file lab7.s
      At line 1210 in file lab7.s
      At line 1295 in file lab7.s
      At line 1712 in file lab7.s

SQUARE 00000738

Symbol: SQUARE
   Definitions
      At line 83 in file lab7.s
   Uses
      At line 260 in file lab7.s
      At line 485 in file lab7.s
      At line 735 in file lab7.s
      At line 770 in file lab7.s
      At line 813 in file lab7.s
      At line 858 in file lab7.s
      At line 894 in file lab7.s
      At line 1245 in file lab7.s
      At line 1941 in file lab7.s
      At line 2030 in file lab7.s
      At line 2122 in file lab7.s

TEST_TIMER1 000006CC

Symbol: TEST_TIMER1
   Definitions



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols

      At line 57 in file lab7.s
   Uses
      None
Comment: TEST_TIMER1 unused
allDone 00002214

Symbol: allDone
   Definitions
      At line 2068 in file lab7.s
   Uses
      At line 1258 in file lab7.s
      At line 1954 in file lab7.s
      At line 2039 in file lab7.s
      At line 2044 in file lab7.s
      At line 2131 in file lab7.s
      At line 2136 in file lab7.s

allDone2 00002338

Symbol: allDone2
   Definitions
      At line 2160 in file lab7.s
   Uses
      None
Comment: allDone2 unused
allDoneC 000020F0

Symbol: allDoneC
   Definitions
      At line 1975 in file lab7.s
   Uses
      At line 1950 in file lab7.s
Comment: allDoneC used once
allDoneS 000016DC

Symbol: allDoneS
   Definitions
      At line 1275 in file lab7.s
   Uses
      At line 1254 in file lab7.s
Comment: allDoneS used once
allowDurGamOvr 00002DA4

Symbol: allowDurGamOvr
   Definitions
      At line 2964 in file lab7.s
   Uses
      At line 2903 in file lab7.s
      At line 2908 in file lab7.s

alreadyClr 000021CC

Symbol: alreadyClr
   Definitions
      At line 2041 in file lab7.s
   Uses
      At line 2036 in file lab7.s
Comment: alreadyClr used once
alreadyClr2 000022F0



ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Relocatable symbols


Symbol: alreadyClr2
   Definitions
      At line 2133 in file lab7.s
   Uses
      At line 2128 in file lab7.s
Comment: alreadyClr2 used once
alreadyClrC 000020A8

Symbol: alreadyClrC
   Definitions
      At line 1951 in file lab7.s
   Uses
      At line 1947 in file lab7.s
Comment: alreadyClrC used once
alreadyClrLL 00001000

Symbol: alreadyClrLL
   Definitions
      At line 763 in file lab7.s
   Uses
      At line 741 in file lab7.s
Comment: alreadyClrLL used once
alreadyClrLLL 000011A0

Symbol: alreadyClrLLL
   Definitions
      At line 888 in file lab7.s
   Uses
      At line 864 in file lab7.s
Comment: alreadyClrLLL used once
alreadyClrLLR 00001128

Symbol: alreadyClrLLR
   Definitions
      At line 852 in file lab7.s
   Uses
      At line 819 in file lab7.s
Comment: alreadyClrLLR used once
alreadyClrLR 00001090

Symbol: alreadyClrLR
   Definitions
      At line 807 in file lab7.s
   Uses
      At line 776 in file lab7.s
Comment: alreadyClrLR used once
alreadyClrLRR 00001238

Symbol: alreadyClrLRR
   Definitions
      At line 933 in file lab7.s
   Uses
      At line 900 in file lab7.s
Comment: alreadyClrLRR used once
alreadyClrS 000016A0

Symbol: alreadyClrS
   Definitions



ARM Macro Assembler    Page 13 Alphabetic symbol ordering
Relocatable symbols

      At line 1255 in file lab7.s
   Uses
      At line 1251 in file lab7.s
Comment: alreadyClrS used once
ball2Fell 00000D70

Symbol: ball2Fell
   Definitions
      At line 602 in file lab7.s
   Uses
      At line 590 in file lab7.s
Comment: ball2Fell used once
blinkOnDeath 00000E1C

Symbol: blinkOnDeath
   Definitions
      At line 660 in file lab7.s
   Uses
      At line 635 in file lab7.s
      At line 2966 in file lab7.s

cOnPyramid 00002068

Symbol: cOnPyramid
   Definitions
      At line 1933 in file lab7.s
   Uses
      At line 1929 in file lab7.s
Comment: cOnPyramid used once
checkBall1 000013F4

Symbol: checkBall1
   Definitions
      At line 1061 in file lab7.s
   Uses
      At line 1038 in file lab7.s
      At line 1042 in file lab7.s
      At line 1047 in file lab7.s

checkBall1Sqr3 000014EC

Symbol: checkBall1Sqr3
   Definitions
      At line 1133 in file lab7.s
   Uses
      At line 1114 in file lab7.s
      At line 1119 in file lab7.s

checkKBinterrupt 00002E78

Symbol: checkKBinterrupt
   Definitions
      At line 3046 in file lab7.s
   Uses
      At line 3017 in file lab7.s
      At line 3022 in file lab7.s
      At line 3028 in file lab7.s

checkOthers 00002D40



ARM Macro Assembler    Page 14 Alphabetic symbol ordering
Relocatable symbols


Symbol: checkOthers
   Definitions
      At line 2931 in file lab7.s
   Uses
      None
Comment: checkOthers unused
clearLL 00000F98

Symbol: clearLL
   Definitions
      At line 732 in file lab7.s
   Uses
      At line 689 in file lab7.s
      At line 691 in file lab7.s
      At line 693 in file lab7.s

clearLLL 00001130

Symbol: clearLLL
   Definitions
      At line 856 in file lab7.s
   Uses
      At line 687 in file lab7.s
      At line 725 in file lab7.s

clearLLR 00001098

Symbol: clearLLR
   Definitions
      At line 811 in file lab7.s
   Uses
      At line 713 in file lab7.s
      At line 715 in file lab7.s
      At line 717 in file lab7.s
      At line 719 in file lab7.s
      At line 721 in file lab7.s
      At line 723 in file lab7.s

clearLR 00001008

Symbol: clearLR
   Definitions
      At line 767 in file lab7.s
   Uses
      At line 695 in file lab7.s
      At line 697 in file lab7.s
      At line 699 in file lab7.s
      At line 701 in file lab7.s
      At line 703 in file lab7.s
      At line 705 in file lab7.s
      At line 707 in file lab7.s
      At line 709 in file lab7.s
      At line 711 in file lab7.s

clearLRR 000011A8

Symbol: clearLRR
   Definitions



ARM Macro Assembler    Page 15 Alphabetic symbol ordering
Relocatable symbols

      At line 892 in file lab7.s
   Uses
      At line 727 in file lab7.s
Comment: clearLRR used once
clearSquare 00000E60

Symbol: clearSquare
   Definitions
      At line 682 in file lab7.s
   Uses
      At line 483 in file lab7.s
Comment: clearSquare used once
curseLL 00002734

Symbol: curseLL
   Definitions
      At line 2431 in file lab7.s
   Uses
      At line 2388 in file lab7.s
      At line 2390 in file lab7.s
      At line 2392 in file lab7.s

curseLLL 00002940

Symbol: curseLLL
   Definitions
      At line 2588 in file lab7.s
   Uses
      At line 2386 in file lab7.s
      At line 2424 in file lab7.s

curseLLR 0000287C

Symbol: curseLLR
   Definitions
      At line 2530 in file lab7.s
   Uses
      At line 2412 in file lab7.s
      At line 2414 in file lab7.s
      At line 2416 in file lab7.s
      At line 2418 in file lab7.s
      At line 2420 in file lab7.s
      At line 2422 in file lab7.s

curseLR 000027C8

Symbol: curseLR
   Definitions
      At line 2476 in file lab7.s
   Uses
      At line 2394 in file lab7.s
      At line 2396 in file lab7.s
      At line 2398 in file lab7.s
      At line 2400 in file lab7.s
      At line 2402 in file lab7.s
      At line 2404 in file lab7.s
      At line 2406 in file lab7.s
      At line 2408 in file lab7.s
      At line 2410 in file lab7.s



ARM Macro Assembler    Page 16 Alphabetic symbol ordering
Relocatable symbols


curseLRR 000029E4

Symbol: curseLRR
   Definitions
      At line 2637 in file lab7.s
   Uses
      At line 2426 in file lab7.s
Comment: curseLRR used once
didoHitQ 000023CC

Symbol: didoHitQ
   Definitions
      At line 2214 in file lab7.s
   Uses
      At line 2956 in file lab7.s
      At line 3107 in file lab7.s

doneHit 00002628

Symbol: doneHit
   Definitions
      At line 2376 in file lab7.s
   Uses
      At line 2256 in file lab7.s
      At line 2296 in file lab7.s
      At line 2336 in file lab7.s

doneLL 000027C0

Symbol: doneLL
   Definitions
      At line 2472 in file lab7.s
   Uses
      At line 2457 in file lab7.s
Comment: doneLL used once
doneLLL 000029DC

Symbol: doneLLL
   Definitions
      At line 2633 in file lab7.s
   Uses
      At line 2616 in file lab7.s
Comment: doneLLL used once
doneLLR 00002938

Symbol: doneLLR
   Definitions
      At line 2584 in file lab7.s
   Uses
      At line 2558 in file lab7.s
Comment: doneLLR used once
doneLR 00002874

Symbol: doneLR
   Definitions
      At line 2526 in file lab7.s
   Uses
      At line 2502 in file lab7.s



ARM Macro Assembler    Page 17 Alphabetic symbol ordering
Relocatable symbols

Comment: doneLR used once
doneLRR 00002AA0

Symbol: doneLRR
   Definitions
      At line 2692 in file lab7.s
   Uses
      At line 2666 in file lab7.s
Comment: doneLRR used once
doneSquare 00000D14

Symbol: doneSquare
   Definitions
      At line 570 in file lab7.s
   Uses
      At line 507 in file lab7.s
      At line 510 in file lab7.s
      At line 513 in file lab7.s
      At line 516 in file lab7.s
      At line 519 in file lab7.s
      At line 522 in file lab7.s
      At line 525 in file lab7.s
      At line 528 in file lab7.s
      At line 531 in file lab7.s
      At line 534 in file lab7.s
      At line 537 in file lab7.s
      At line 540 in file lab7.s
      At line 543 in file lab7.s
      At line 546 in file lab7.s
      At line 549 in file lab7.s
      At line 552 in file lab7.s
      At line 555 in file lab7.s
      At line 558 in file lab7.s
      At line 561 in file lab7.s
      At line 564 in file lab7.s
      At line 567 in file lab7.s

endlessLoop 000007F4

Symbol: endlessLoop
   Definitions
      At line 142 in file lab7.s
   Uses
      At line 144 in file lab7.s
Comment: endlessLoop used once
fallOff 00000D20

Symbol: fallOff
   Definitions
      At line 579 in file lab7.s
   Uses
      At line 568 in file lab7.s
Comment: fallOff used once
gameOver 00000934

Symbol: gameOver
   Definitions
      At line 274 in file lab7.s
   Uses



ARM Macro Assembler    Page 18 Alphabetic symbol ordering
Relocatable symbols

      At line 652 in file lab7.s
      At line 3038 in file lab7.s

increaseLevel 000009A0

Symbol: increaseLevel
   Definitions
      At line 308 in file lab7.s
   Uses
      At line 494 in file lab7.s
Comment: increaseLevel used once
interrupt_init 00002AA8

Symbol: interrupt_init
   Definitions
      At line 2698 in file lab7.s
   Uses
      At line 127 in file lab7.s
      At line 252 in file lab7.s
      At line 413 in file lab7.s
      At line 496 in file lab7.s
      At line 1276 in file lab7.s
      At line 1976 in file lab7.s
      At line 2069 in file lab7.s
      At line 2161 in file lab7.s

interrupts 00000000

Symbol: interrupts
   Definitions
      At line 1 in file lab7.s
   Uses
      None
Comment: interrupts unused
lab7 000007C4

Symbol: lab7
   Definitions
      At line 122 in file lab7.s
   Uses
      At line 2 in file lab7.s
Comment: lab7 used once
moveBall1 00001E48

Symbol: moveBall1
   Definitions
      At line 1783 in file lab7.s
   Uses
      At line 2945 in file lab7.s
Comment: moveBall1 used once
moveBall2 00001F10

Symbol: moveBall2
   Definitions
      At line 1839 in file lab7.s
   Uses
      At line 2949 in file lab7.s
Comment: moveBall2 used once
moveSnake 00001700



ARM Macro Assembler    Page 19 Alphabetic symbol ordering
Relocatable symbols


Symbol: moveSnake
   Definitions
      At line 1281 in file lab7.s
   Uses
      At line 2941 in file lab7.s
Comment: moveSnake used once
moveSnakeBall 00001D18

Symbol: moveSnakeBall
   Definitions
      At line 1696 in file lab7.s
   Uses
      At line 2953 in file lab7.s
Comment: moveSnakeBall used once
mulAgain1 00002F64

Symbol: mulAgain1
   Definitions
      At line 3132 in file lab7.s
   Uses
      At line 3136 in file lab7.s
Comment: mulAgain1 used once
newGame 000007FC

Symbol: newGame
   Definitions
      At line 146 in file lab7.s
   Uses
      At line 3067 in file lab7.s
Comment: newGame used once
nextSquare 00000BE0

Symbol: nextSquare
   Definitions
      At line 487 in file lab7.s
   Uses
      At line 493 in file lab7.s
Comment: nextSquare used once
noBlinks 00000E54

Symbol: noBlinks
   Definitions
      At line 677 in file lab7.s
   Uses
      At line 666 in file lab7.s
Comment: noBlinks used once
noIncrease 00002F84

Symbol: noIncrease
   Definitions
      At line 3141 in file lab7.s
   Uses
      At line 3123 in file lab7.s
Comment: noIncrease used once
noSpawn 00001558

Symbol: noSpawn
   Definitions



ARM Macro Assembler    Page 20 Alphabetic symbol ordering
Relocatable symbols

      At line 1163 in file lab7.s
   Uses
      At line 987 in file lab7.s
      At line 989 in file lab7.s
      At line 993 in file lab7.s
      At line 995 in file lab7.s
      At line 999 in file lab7.s
      At line 1001 in file lab7.s
      At line 1006 in file lab7.s

normalMove 00001D88

Symbol: normalMove
   Definitions
      At line 1728 in file lab7.s
   Uses
      At line 1703 in file lab7.s
Comment: normalMove used once
not2Secs 00002D98

Symbol: not2Secs
   Definitions
      At line 2958 in file lab7.s
   Uses
      At line 2920 in file lab7.s
      At line 2929 in file lab7.s

notClear 00000BFC

Symbol: notClear
   Definitions
      At line 495 in file lab7.s
   Uses
      At line 490 in file lab7.s
Comment: notClear used once
notCurse 00002DF4

Symbol: notCurse
   Definitions
      At line 2992 in file lab7.s
   Uses
      At line 2972 in file lab7.s
Comment: notCurse used once
notSpawning 00002D94

Symbol: notSpawning
   Definitions
      At line 2955 in file lab7.s
   Uses
      At line 2936 in file lab7.s
Comment: notSpawning used once
o2OnPyramid 000022B0

Symbol: o2OnPyramid
   Definitions
      At line 2113 in file lab7.s
   Uses
      At line 2108 in file lab7.s
Comment: o2OnPyramid used once



ARM Macro Assembler    Page 21 Alphabetic symbol ordering
Relocatable symbols

oFell 00000DB0

Symbol: oFell
   Definitions
      At line 622 in file lab7.s
   Uses
      At line 595 in file lab7.s
      At line 601 in file lab7.s
      At line 607 in file lab7.s

oOnPyramid 0000218C

Symbol: oOnPyramid
   Definitions
      At line 2021 in file lab7.s
   Uses
      At line 2016 in file lab7.s
Comment: oOnPyramid used once
offSquare 00000D18

Symbol: offSquare
   Definitions
      At line 572 in file lab7.s
   Uses
      At line 569 in file lab7.s
Comment: offSquare used once
outOfMoves 00002F34

Symbol: outOfMoves
   Definitions
      At line 3110 in file lab7.s
   Uses
      At line 3103 in file lab7.s
Comment: outOfMoves used once
pausedFIQExit 00002FA4

Symbol: pausedFIQExit
   Definitions
      At line 3153 in file lab7.s
   Uses
      At line 2841 in file lab7.s
      At line 2913 in file lab7.s
      At line 3036 in file lab7.s
      At line 3039 in file lab7.s
      At line 3059 in file lab7.s
      At line 3074 in file lab7.s
      At line 3079 in file lab7.s

qCurse 00002630

Symbol: qCurse
   Definitions
      At line 2381 in file lab7.s
   Uses
      At line 2230 in file lab7.s
      At line 2270 in file lab7.s
      At line 2310 in file lab7.s
      At line 2350 in file lab7.s
      At line 2981 in file lab7.s



ARM Macro Assembler    Page 22 Alphabetic symbol ordering
Relocatable symbols


qDead 00000E14

Symbol: qDead
   Definitions
      At line 656 in file lab7.s
   Uses
      At line 654 in file lab7.s
Comment: qDead used once
qFell 00000D84

Symbol: qFell
   Definitions
      At line 608 in file lab7.s
   Uses
      At line 584 in file lab7.s
Comment: qFell used once
qOnSquare 000021D8

Symbol: qOnSquare
   Definitions
      At line 2046 in file lab7.s
   Uses
      At line 2027 in file lab7.s
Comment: qOnSquare used once
qOnSquare2 000022FC

Symbol: qOnSquare2
   Definitions
      At line 2138 in file lab7.s
   Uses
      At line 2119 in file lab7.s
Comment: qOnSquare2 used once
qOnSquareC 000020B4

Symbol: qOnSquareC
   Definitions
      At line 1955 in file lab7.s
   Uses
      At line 1939 in file lab7.s
Comment: qOnSquareC used once
qOnSquareS 000016AC

Symbol: qOnSquareS
   Definitions
      At line 1259 in file lab7.s
   Uses
      At line 1243 in file lab7.s
Comment: qOnSquareS used once
quit 00002FAC

Symbol: quit
   Definitions
      At line 3159 in file lab7.s
   Uses
      At line 3064 in file lab7.s
Comment: quit used once
randomNum 00002344




ARM Macro Assembler    Page 23 Alphabetic symbol ordering
Relocatable symbols

Symbol: randomNum
   Definitions
      At line 2168 in file lab7.s
   Uses
      At line 1004 in file lab7.s
      At line 1014 in file lab7.s
      At line 1045 in file lab7.s
      At line 1117 in file lab7.s
      At line 1731 in file lab7.s
      At line 1789 in file lab7.s
      At line 1844 in file lab7.s

redrawQ 00000AE4

Symbol: redrawQ
   Definitions
      At line 418 in file lab7.s
   Uses
      At line 655 in file lab7.s
      At line 2989 in file lab7.s
      At line 3105 in file lab7.s

removeBall1 000020FC

Symbol: removeBall1
   Definitions
      At line 1981 in file lab7.s
   Uses
      At line 594 in file lab7.s
      At line 1785 in file lab7.s
      At line 2242 in file lab7.s
      At line 2282 in file lab7.s
      At line 2334 in file lab7.s
      At line 2368 in file lab7.s

removeBall2 00002220

Symbol: removeBall2
   Definitions
      At line 2073 in file lab7.s
   Uses
      At line 606 in file lab7.s
      At line 1841 in file lab7.s
      At line 2248 in file lab7.s
      At line 2288 in file lab7.s
      At line 2328 in file lab7.s
      At line 2374 in file lab7.s

removeCurse 00002DCC

Symbol: removeCurse
   Definitions
      At line 2978 in file lab7.s
   Uses
      At line 2974 in file lab7.s
Comment: removeCurse used once
removeLife 00000DB8

Symbol: removeLife



ARM Macro Assembler    Page 24 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 627 in file lab7.s
   Uses
      At line 621 in file lab7.s
      At line 2224 in file lab7.s
      At line 2263 in file lab7.s
      At line 2303 in file lab7.s
      At line 2343 in file lab7.s

removeQ 00000A5C

Symbol: removeQ
   Definitions
      At line 381 in file lab7.s
   Uses
      At line 609 in file lab7.s
      At line 3104 in file lab7.s

removeSnake 000015EC

Symbol: removeSnake
   Definitions
      At line 1207 in file lab7.s
   Uses
      At line 1283 in file lab7.s
      At line 2254 in file lab7.s
      At line 2276 in file lab7.s
      At line 2316 in file lab7.s
      At line 2356 in file lab7.s

removeSnakeBall 00001FD8

Symbol: removeSnakeBall
   Definitions
      At line 1895 in file lab7.s
   Uses
      At line 600 in file lab7.s
      At line 1698 in file lab7.s
      At line 2236 in file lab7.s
      At line 2294 in file lab7.s
      At line 2322 in file lab7.s
      At line 2362 in file lab7.s

resetAllSquares 0000090C

Symbol: resetAllSquares
   Definitions
      At line 257 in file lab7.s
   Uses
      At line 191 in file lab7.s
      At line 370 in file lab7.s

resetBall 000021E0

Symbol: resetBall
   Definitions
      At line 2050 in file lab7.s
   Uses
      At line 2019 in file lab7.s



ARM Macro Assembler    Page 25 Alphabetic symbol ordering
Relocatable symbols

Comment: resetBall used once
resetBall2 00002304

Symbol: resetBall2
   Definitions
      At line 2142 in file lab7.s
   Uses
      At line 2111 in file lab7.s
Comment: resetBall2 used once
resetNextSquare 00000918

Symbol: resetNextSquare
   Definitions
      At line 262 in file lab7.s
   Uses
      At line 269 in file lab7.s
Comment: resetNextSquare used once
resetSBall 000020BC

Symbol: resetSBall
   Definitions
      At line 1958 in file lab7.s
   Uses
      At line 1932 in file lab7.s
Comment: resetSBall used once
sOnPyramid 00001660

Symbol: sOnPyramid
   Definitions
      At line 1237 in file lab7.s
   Uses
      None
Comment: sOnPyramid unused
saveBall2Position 00001F4C

Symbol: saveBall2Position
   Definitions
      At line 1856 in file lab7.s
   Uses
      At line 1852 in file lab7.s
Comment: saveBall2Position used once
saveBallPosition 00001E84

Symbol: saveBallPosition
   Definitions
      At line 1801 in file lab7.s
   Uses
      At line 1797 in file lab7.s
Comment: saveBallPosition used once
savePosition 00000B44

Symbol: savePosition
   Definitions
      At line 443 in file lab7.s
   Uses
      At line 427 in file lab7.s
      At line 431 in file lab7.s
      At line 435 in file lab7.s
      At line 439 in file lab7.s



ARM Macro Assembler    Page 26 Alphabetic symbol ordering
Relocatable symbols

      At line 1380 in file lab7.s
      At line 1398 in file lab7.s
      At line 1416 in file lab7.s
      At line 1434 in file lab7.s
      At line 1448 in file lab7.s
      At line 1466 in file lab7.s
      At line 1492 in file lab7.s
      At line 1518 in file lab7.s
      At line 1540 in file lab7.s
      At line 1558 in file lab7.s
      At line 1592 in file lab7.s
      At line 1614 in file lab7.s
      At line 1625 in file lab7.s
      At line 1640 in file lab7.s
      At line 1655 in file lab7.s

saveSBallPosition 00001DBC

Symbol: saveSBallPosition
   Definitions
      At line 1743 in file lab7.s
   Uses
      At line 1739 in file lab7.s
Comment: saveSBallPosition used once
saveSnakePosition 00001C8C

Symbol: saveSnakePosition
   Definitions
      At line 1658 in file lab7.s
   Uses
      At line 1300 in file lab7.s
      At line 1304 in file lab7.s
      At line 1310 in file lab7.s
      At line 1314 in file lab7.s
      At line 1317 in file lab7.s
      At line 1324 in file lab7.s
      At line 1328 in file lab7.s
      At line 1332 in file lab7.s
      At line 1336 in file lab7.s
      At line 1339 in file lab7.s
      At line 1346 in file lab7.s
      At line 1349 in file lab7.s
      At line 1356 in file lab7.s
      At line 1360 in file lab7.s
      At line 1363 in file lab7.s
      At line 1370 in file lab7.s
      At line 1373 in file lab7.s
      At line 1384 in file lab7.s
      At line 1388 in file lab7.s
      At line 1391 in file lab7.s
      At line 1402 in file lab7.s
      At line 1406 in file lab7.s
      At line 1409 in file lab7.s
      At line 1420 in file lab7.s
      At line 1424 in file lab7.s
      At line 1427 in file lab7.s
      At line 1438 in file lab7.s
      At line 1441 in file lab7.s
      At line 1452 in file lab7.s



ARM Macro Assembler    Page 27 Alphabetic symbol ordering
Relocatable symbols

      At line 1456 in file lab7.s
      At line 1459 in file lab7.s
      At line 1470 in file lab7.s
      At line 1474 in file lab7.s
      At line 1478 in file lab7.s
      At line 1482 in file lab7.s
      At line 1485 in file lab7.s
      At line 1496 in file lab7.s
      At line 1500 in file lab7.s
      At line 1504 in file lab7.s
      At line 1508 in file lab7.s
      At line 1511 in file lab7.s
      At line 1522 in file lab7.s
      At line 1526 in file lab7.s
      At line 1530 in file lab7.s
      At line 1533 in file lab7.s
      At line 1544 in file lab7.s
      At line 1548 in file lab7.s
      At line 1551 in file lab7.s
      At line 1562 in file lab7.s
      At line 1566 in file lab7.s
      At line 1570 in file lab7.s
      At line 1574 in file lab7.s
      At line 1578 in file lab7.s
      At line 1582 in file lab7.s
      At line 1585 in file lab7.s
      At line 1596 in file lab7.s
      At line 1600 in file lab7.s
      At line 1604 in file lab7.s
      At line 1607 in file lab7.s
      At line 1618 in file lab7.s
      At line 1622 in file lab7.s
      At line 1632 in file lab7.s
      At line 1636 in file lab7.s
      At line 1643 in file lab7.s
      At line 1648 in file lab7.s
      At line 1652 in file lab7.s

setAllSqrsTo0 00002390

Symbol: setAllSqrsTo0
   Definitions
      At line 2192 in file lab7.s
   Uses
      None
Comment: setAllSqrsTo0 unused
snakeBallFell 00000D5C

Symbol: snakeBallFell
   Definitions
      At line 596 in file lab7.s
   Uses
      At line 587 in file lab7.s
Comment: snakeBallFell used once
snakeSpawned 00001E40

Symbol: snakeSpawned
   Definitions
      At line 1778 in file lab7.s



ARM Macro Assembler    Page 28 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 1727 in file lab7.s
Comment: snakeSpawned used once
spawnBall2at2 00001434

Symbol: spawnBall2at2
   Definitions
      At line 1079 in file lab7.s
   Uses
      At line 1065 in file lab7.s
Comment: spawnBall2at2 used once
spawnBall2at3 0000152C

Symbol: spawnBall2at3
   Definitions
      At line 1151 in file lab7.s
   Uses
      At line 1137 in file lab7.s
Comment: spawnBall2at3 used once
spawnEnemy 000012E0

Symbol: spawnEnemy
   Definitions
      At line 981 in file lab7.s
   Uses
      At line 2924 in file lab7.s
Comment: spawnEnemy used once
spawnSnake 00001560

Symbol: spawnSnake
   Definitions
      At line 1168 in file lab7.s
   Uses
      At line 1726 in file lab7.s
Comment: spawnSnake used once
square1 00001C60

Symbol: square1
   Definitions
      At line 1644 in file lab7.s
   Uses
      At line 1628 in file lab7.s
Comment: square1 used once
square10 00001A68

Symbol: square10
   Definitions
      At line 1512 in file lab7.s
   Uses
      At line 1488 in file lab7.s
Comment: square10 used once
square11 00001838

Symbol: square11
   Definitions
      At line 1364 in file lab7.s
   Uses
      At line 1352 in file lab7.s
Comment: square11 used once



ARM Macro Assembler    Page 29 Alphabetic symbol ordering
Relocatable symbols

square12 0000185C

Symbol: square12
   Definitions
      At line 1374 in file lab7.s
   Uses
      At line 1366 in file lab7.s
Comment: square12 used once
square13 000018A0

Symbol: square13
   Definitions
      At line 1392 in file lab7.s
   Uses
      At line 1376 in file lab7.s
Comment: square13 used once
square14 000018E4

Symbol: square14
   Definitions
      At line 1410 in file lab7.s
   Uses
      At line 1394 in file lab7.s
Comment: square14 used once
square15 00001928

Symbol: square15
   Definitions
      At line 1428 in file lab7.s
   Uses
      At line 1412 in file lab7.s
Comment: square15 used once
square18 0000178C

Symbol: square18
   Definitions
      At line 1318 in file lab7.s
   Uses
      At line 1306 in file lab7.s
Comment: square18 used once
square19 000017E0

Symbol: square19
   Definitions
      At line 1340 in file lab7.s
   Uses
      At line 1320 in file lab7.s
Comment: square19 used once
square2 00001558

Symbol: square2
   Definitions
      At line 1164 in file lab7.s
   Uses
      At line 1060 in file lab7.s
      At line 1078 in file lab7.s
      At line 1091 in file lab7.s
      At line 1132 in file lab7.s
      At line 1150 in file lab7.s



ARM Macro Assembler    Page 30 Alphabetic symbol ordering
Relocatable symbols


square20 00001804

Symbol: square20
   Definitions
      At line 1350 in file lab7.s
   Uses
      At line 1342 in file lab7.s
Comment: square20 used once
square2_ 00001BD8

Symbol: square2_
   Definitions
      At line 1608 in file lab7.s
   Uses
      At line 1588 in file lab7.s
Comment: square2_ used once
square3 00001464

Symbol: square3
   Definitions
      At line 1092 in file lab7.s
   Uses
      At line 1016 in file lab7.s
Comment: square3 used once
square3_ 00001C1C

Symbol: square3_
   Definitions
      At line 1626 in file lab7.s
   Uses
      At line 1610 in file lab7.s
Comment: square3_ used once
square4 00001ABC

Symbol: square4
   Definitions
      At line 1534 in file lab7.s
   Uses
      At line 1514 in file lab7.s
Comment: square4 used once
square5 00001B00

Symbol: square5
   Definitions
      At line 1552 in file lab7.s
   Uses
      At line 1536 in file lab7.s
Comment: square5 used once
square6 00001B84

Symbol: square6
   Definitions
      At line 1586 in file lab7.s
   Uses
      At line 1554 in file lab7.s
Comment: square6 used once
square7 0000195C




ARM Macro Assembler    Page 31 Alphabetic symbol ordering
Relocatable symbols

Symbol: square7
   Definitions
      At line 1442 in file lab7.s
   Uses
      At line 1430 in file lab7.s
Comment: square7 used once
square8 000019A0

Symbol: square8
   Definitions
      At line 1460 in file lab7.s
   Uses
      At line 1444 in file lab7.s
Comment: square8 used once
square9 00001A04

Symbol: square9
   Definitions
      At line 1486 in file lab7.s
   Uses
      At line 1462 in file lab7.s
Comment: square9 used once
storeDir 00002F08

Symbol: storeDir
   Definitions
      At line 3096 in file lab7.s
   Uses
      At line 3085 in file lab7.s
      At line 3088 in file lab7.s
      At line 3091 in file lab7.s
      At line 3094 in file lab7.s

timer0Interrupt 00002CC0

Symbol: timer0Interrupt
   Definitions
      At line 2888 in file lab7.s
   Uses
      At line 2778 in file lab7.s
      At line 2787 in file lab7.s
      At line 2792 in file lab7.s

timer1Interrupt 00002E28

Symbol: timer1Interrupt
   Definitions
      At line 3013 in file lab7.s
   Uses
      At line 2894 in file lab7.s
Comment: timer1Interrupt used once
unpause 00002C28

Symbol: unpause
   Definitions
      At line 2842 in file lab7.s
   Uses
      At line 2799 in file lab7.s
Comment: unpause used once



ARM Macro Assembler    Page 32 Alphabetic symbol ordering
Relocatable symbols

updateScore 00001240

Symbol: updateScore
   Definitions
      At line 937 in file lab7.s
   Uses
      At line 290 in file lab7.s
      At line 3106 in file lab7.s

updateSquare 00000C08

Symbol: updateSquare
   Definitions
      At line 502 in file lab7.s
   Uses
      At line 477 in file lab7.s
      At line 1692 in file lab7.s
      At line 1777 in file lab7.s
      At line 1835 in file lab7.s
      At line 1890 in file lab7.s

writeCurseLL 00002790

Symbol: writeCurseLL
   Definitions
      At line 2458 in file lab7.s
   Uses
      At line 2446 in file lab7.s
Comment: writeCurseLL used once
writeCurseLLL 000029A4

Symbol: writeCurseLLL
   Definitions
      At line 2617 in file lab7.s
   Uses
      At line 2603 in file lab7.s
Comment: writeCurseLLL used once
writeCurseLLR 000028E0

Symbol: writeCurseLLR
   Definitions
      At line 2559 in file lab7.s
   Uses
      At line 2536 in file lab7.s
Comment: writeCurseLLR used once
writeCurseLR 00002824

Symbol: writeCurseLR
   Definitions
      At line 2503 in file lab7.s
   Uses
      At line 2482 in file lab7.s
Comment: writeCurseLR used once
writeCurseLRR 00002A48

Symbol: writeCurseLRR
   Definitions
      At line 2667 in file lab7.s
   Uses



ARM Macro Assembler    Page 33 Alphabetic symbol ordering
Relocatable symbols

      At line 2644 in file lab7.s
Comment: writeCurseLRR used once
177 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

display_digit_on_7_seg 00000000

Symbol: display_digit_on_7_seg
   Definitions
      At line 14 in file lab7.s
   Uses
      At line 133 in file lab7.s
      At line 204 in file lab7.s
      At line 320 in file lab7.s
      At line 3163 in file lab7.s

div_and_mod 00000000

Symbol: div_and_mod
   Definitions
      At line 11 in file lab7.s
   Uses
      At line 391 in file lab7.s
      At line 402 in file lab7.s
      At line 453 in file lab7.s
      At line 464 in file lab7.s
      At line 670 in file lab7.s
      At line 958 in file lab7.s
      At line 964 in file lab7.s
      At line 970 in file lab7.s
      At line 1181 in file lab7.s
      At line 1192 in file lab7.s
      At line 1217 in file lab7.s
      At line 1228 in file lab7.s
      At line 1668 in file lab7.s
      At line 1679 in file lab7.s
      At line 1753 in file lab7.s
      At line 1764 in file lab7.s
      At line 1811 in file lab7.s
      At line 1822 in file lab7.s
      At line 1866 in file lab7.s
      At line 1877 in file lab7.s
      At line 1905 in file lab7.s
      At line 1916 in file lab7.s
      At line 1991 in file lab7.s
      At line 2002 in file lab7.s
      At line 2083 in file lab7.s
      At line 2094 in file lab7.s
      At line 2188 in file lab7.s
      At line 2933 in file lab7.s

illuminateLEDs 00000000

Symbol: illuminateLEDs
   Definitions
      At line 12 in file lab7.s
   Uses
      At line 210 in file lab7.s
      At line 650 in file lab7.s
      At line 3167 in file lab7.s

illuminate_RGB_LED 00000000

Symbol: illuminate_RGB_LED



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 13 in file lab7.s
   Uses
      At line 136 in file lab7.s
      At line 206 in file lab7.s
      At line 678 in file lab7.s
      At line 2815 in file lab7.s
      At line 2859 in file lab7.s
      At line 3007 in file lab7.s
      At line 3165 in file lab7.s

output_character 00000000

Symbol: output_character
   Definitions
      At line 8 in file lab7.s
   Uses
      At line 130 in file lab7.s
      At line 149 in file lab7.s
      At line 277 in file lab7.s
      At line 349 in file lab7.s
      At line 386 in file lab7.s
      At line 388 in file lab7.s
      At line 394 in file lab7.s
      At line 397 in file lab7.s
      At line 399 in file lab7.s
      At line 405 in file lab7.s
      At line 408 in file lab7.s
      At line 410 in file lab7.s
      At line 412 in file lab7.s
      At line 448 in file lab7.s
      At line 450 in file lab7.s
      At line 456 in file lab7.s
      At line 459 in file lab7.s
      At line 461 in file lab7.s
      At line 467 in file lab7.s
      At line 470 in file lab7.s
      At line 472 in file lab7.s
      At line 474 in file lab7.s
      At line 744 in file lab7.s
      At line 746 in file lab7.s
      At line 748 in file lab7.s
      At line 750 in file lab7.s
      At line 752 in file lab7.s
      At line 754 in file lab7.s
      At line 779 in file lab7.s
      At line 781 in file lab7.s
      At line 783 in file lab7.s
      At line 785 in file lab7.s
      At line 787 in file lab7.s
      At line 790 in file lab7.s
      At line 792 in file lab7.s
      At line 794 in file lab7.s
      At line 796 in file lab7.s
      At line 798 in file lab7.s
      At line 822 in file lab7.s
      At line 824 in file lab7.s
      At line 826 in file lab7.s
      At line 828 in file lab7.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 830 in file lab7.s
      At line 832 in file lab7.s
      At line 835 in file lab7.s
      At line 837 in file lab7.s
      At line 839 in file lab7.s
      At line 841 in file lab7.s
      At line 843 in file lab7.s
      At line 867 in file lab7.s
      At line 869 in file lab7.s
      At line 871 in file lab7.s
      At line 873 in file lab7.s
      At line 875 in file lab7.s
      At line 877 in file lab7.s
      At line 879 in file lab7.s
      At line 903 in file lab7.s
      At line 905 in file lab7.s
      At line 907 in file lab7.s
      At line 909 in file lab7.s
      At line 911 in file lab7.s
      At line 914 in file lab7.s
      At line 916 in file lab7.s
      At line 918 in file lab7.s
      At line 920 in file lab7.s
      At line 922 in file lab7.s
      At line 924 in file lab7.s
      At line 940 in file lab7.s
      At line 942 in file lab7.s
      At line 944 in file lab7.s
      At line 946 in file lab7.s
      At line 948 in file lab7.s
      At line 950 in file lab7.s
      At line 952 in file lab7.s
      At line 961 in file lab7.s
      At line 967 in file lab7.s
      At line 973 in file lab7.s
      At line 976 in file lab7.s
      At line 1019 in file lab7.s
      At line 1021 in file lab7.s
      At line 1023 in file lab7.s
      At line 1025 in file lab7.s
      At line 1027 in file lab7.s
      At line 1029 in file lab7.s
      At line 1031 in file lab7.s
      At line 1050 in file lab7.s
      At line 1068 in file lab7.s
      At line 1081 in file lab7.s
      At line 1095 in file lab7.s
      At line 1097 in file lab7.s
      At line 1099 in file lab7.s
      At line 1101 in file lab7.s
      At line 1103 in file lab7.s
      At line 1105 in file lab7.s
      At line 1107 in file lab7.s
      At line 1122 in file lab7.s
      At line 1140 in file lab7.s
      At line 1153 in file lab7.s
      At line 1176 in file lab7.s
      At line 1178 in file lab7.s
      At line 1184 in file lab7.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      At line 1187 in file lab7.s
      At line 1189 in file lab7.s
      At line 1195 in file lab7.s
      At line 1198 in file lab7.s
      At line 1200 in file lab7.s
      At line 1202 in file lab7.s
      At line 1212 in file lab7.s
      At line 1214 in file lab7.s
      At line 1220 in file lab7.s
      At line 1223 in file lab7.s
      At line 1225 in file lab7.s
      At line 1231 in file lab7.s
      At line 1234 in file lab7.s
      At line 1236 in file lab7.s
      At line 1253 in file lab7.s
      At line 1257 in file lab7.s
      At line 1261 in file lab7.s
      At line 1663 in file lab7.s
      At line 1665 in file lab7.s
      At line 1671 in file lab7.s
      At line 1674 in file lab7.s
      At line 1676 in file lab7.s
      At line 1682 in file lab7.s
      At line 1685 in file lab7.s
      At line 1687 in file lab7.s
      At line 1689 in file lab7.s
      At line 1748 in file lab7.s
      At line 1750 in file lab7.s
      At line 1756 in file lab7.s
      At line 1759 in file lab7.s
      At line 1761 in file lab7.s
      At line 1767 in file lab7.s
      At line 1770 in file lab7.s
      At line 1772 in file lab7.s
      At line 1774 in file lab7.s
      At line 1806 in file lab7.s
      At line 1808 in file lab7.s
      At line 1814 in file lab7.s
      At line 1817 in file lab7.s
      At line 1819 in file lab7.s
      At line 1825 in file lab7.s
      At line 1828 in file lab7.s
      At line 1830 in file lab7.s
      At line 1832 in file lab7.s
      At line 1861 in file lab7.s
      At line 1863 in file lab7.s
      At line 1869 in file lab7.s
      At line 1872 in file lab7.s
      At line 1874 in file lab7.s
      At line 1880 in file lab7.s
      At line 1883 in file lab7.s
      At line 1885 in file lab7.s
      At line 1887 in file lab7.s
      At line 1900 in file lab7.s
      At line 1902 in file lab7.s
      At line 1908 in file lab7.s
      At line 1911 in file lab7.s
      At line 1913 in file lab7.s
      At line 1919 in file lab7.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
External symbols

      At line 1922 in file lab7.s
      At line 1924 in file lab7.s
      At line 1931 in file lab7.s
      At line 1949 in file lab7.s
      At line 1953 in file lab7.s
      At line 1957 in file lab7.s
      At line 1986 in file lab7.s
      At line 1988 in file lab7.s
      At line 1994 in file lab7.s
      At line 1997 in file lab7.s
      At line 1999 in file lab7.s
      At line 2005 in file lab7.s
      At line 2008 in file lab7.s
      At line 2010 in file lab7.s
      At line 2018 in file lab7.s
      At line 2038 in file lab7.s
      At line 2043 in file lab7.s
      At line 2048 in file lab7.s
      At line 2078 in file lab7.s
      At line 2080 in file lab7.s
      At line 2086 in file lab7.s
      At line 2089 in file lab7.s
      At line 2091 in file lab7.s
      At line 2097 in file lab7.s
      At line 2100 in file lab7.s
      At line 2102 in file lab7.s
      At line 2110 in file lab7.s
      At line 2130 in file lab7.s
      At line 2135 in file lab7.s
      At line 2140 in file lab7.s
      At line 2435 in file lab7.s
      At line 2437 in file lab7.s
      At line 2439 in file lab7.s
      At line 2441 in file lab7.s
      At line 2449 in file lab7.s
      At line 2451 in file lab7.s
      At line 2453 in file lab7.s
      At line 2460 in file lab7.s
      At line 2462 in file lab7.s
      At line 2464 in file lab7.s
      At line 2485 in file lab7.s
      At line 2487 in file lab7.s
      At line 2489 in file lab7.s
      At line 2491 in file lab7.s
      At line 2494 in file lab7.s
      At line 2496 in file lab7.s
      At line 2498 in file lab7.s
      At line 2506 in file lab7.s
      At line 2508 in file lab7.s
      At line 2510 in file lab7.s
      At line 2512 in file lab7.s
      At line 2514 in file lab7.s
      At line 2516 in file lab7.s
      At line 2518 in file lab7.s
      At line 2539 in file lab7.s
      At line 2541 in file lab7.s
      At line 2543 in file lab7.s
      At line 2545 in file lab7.s
      At line 2548 in file lab7.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
External symbols

      At line 2550 in file lab7.s
      At line 2552 in file lab7.s
      At line 2554 in file lab7.s
      At line 2562 in file lab7.s
      At line 2564 in file lab7.s
      At line 2566 in file lab7.s
      At line 2568 in file lab7.s
      At line 2570 in file lab7.s
      At line 2572 in file lab7.s
      At line 2574 in file lab7.s
      At line 2576 in file lab7.s
      At line 2592 in file lab7.s
      At line 2594 in file lab7.s
      At line 2596 in file lab7.s
      At line 2598 in file lab7.s
      At line 2606 in file lab7.s
      At line 2608 in file lab7.s
      At line 2610 in file lab7.s
      At line 2612 in file lab7.s
      At line 2619 in file lab7.s
      At line 2621 in file lab7.s
      At line 2623 in file lab7.s
      At line 2625 in file lab7.s
      At line 2647 in file lab7.s
      At line 2649 in file lab7.s
      At line 2651 in file lab7.s
      At line 2653 in file lab7.s
      At line 2656 in file lab7.s
      At line 2658 in file lab7.s
      At line 2660 in file lab7.s
      At line 2662 in file lab7.s
      At line 2670 in file lab7.s
      At line 2672 in file lab7.s
      At line 2674 in file lab7.s
      At line 2676 in file lab7.s
      At line 2678 in file lab7.s
      At line 2680 in file lab7.s
      At line 2682 in file lab7.s
      At line 2684 in file lab7.s
      At line 2818 in file lab7.s
      At line 2820 in file lab7.s
      At line 2822 in file lab7.s
      At line 2824 in file lab7.s
      At line 2826 in file lab7.s
      At line 2828 in file lab7.s
      At line 2830 in file lab7.s
      At line 2832 in file lab7.s
      At line 2834 in file lab7.s
      At line 2836 in file lab7.s
      At line 2838 in file lab7.s
      At line 2840 in file lab7.s
      At line 2862 in file lab7.s
      At line 2864 in file lab7.s
      At line 2866 in file lab7.s
      At line 2868 in file lab7.s
      At line 2870 in file lab7.s
      At line 2872 in file lab7.s
      At line 2874 in file lab7.s
      At line 2876 in file lab7.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
External symbols

      At line 2878 in file lab7.s
      At line 2880 in file lab7.s
      At line 2882 in file lab7.s
      At line 2884 in file lab7.s
      At line 3161 in file lab7.s

output_string 00000000

Symbol: output_string
   Definitions
      At line 10 in file lab7.s
   Uses
      At line 139 in file lab7.s
      At line 227 in file lab7.s
      At line 280 in file lab7.s
      At line 351 in file lab7.s

pin_connect_block_setup_for_uart0 00000000

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 5 in file lab7.s
   Uses
      At line 126 in file lab7.s
Comment: pin_connect_block_setup_for_uart0 used once
read_character 00000000

Symbol: read_character
   Definitions
      At line 7 in file lab7.s
   Uses
      At line 3061 in file lab7.s
Comment: read_character used once
read_string 00000000

Symbol: read_string
   Definitions
      At line 9 in file lab7.s
   Uses
      None
Comment: read_string unused
uart_init 00000000

Symbol: uart_init
   Definitions
      At line 6 in file lab7.s
   Uses
      At line 125 in file lab7.s
Comment: uart_init used once
10 symbols
515 symbols in table
